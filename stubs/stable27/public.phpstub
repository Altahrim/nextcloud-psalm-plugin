<?php

namespace OCP\Accounts;

/**
 * Interface IAccountProperty
 *
 * @since 15.0.0
 */
interface IAccountProperty extends \JsonSerializable
{
    /**
     * Set the value of a property
     *
     * @since 15.0.0
     *
     * @param string $value
     * @return IAccountProperty
     */
    public function setValue(string $value) : \OCP\Accounts\IAccountProperty;
    /**
     * Set the scope of a property
     *
     * @since 15.0.0
     *
     * @param string $scope
     * @return IAccountProperty
     * @throws InvalidArgumentException (since 22.0.0)
     */
    public function setScope(string $scope) : \OCP\Accounts\IAccountProperty;
    /**
     * Set the verification status of a property
     *
     * @since 15.0.0
     *
     * @param string $verified
     * @return IAccountProperty
     */
    public function setVerified(string $verified) : \OCP\Accounts\IAccountProperty;
    /**
     * Get the name of a property
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getName() : string;
    /**
     * Get the value of a property
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getValue() : string;
    /**
     * Get the scope of a property
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getScope() : string;
    /**
     * Get the verification status of a property
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getVerified() : string;
    /**
     * Sets data for verification purposes.
     *
     * @since 22.0.0
     */
    public function setVerificationData(string $verificationData) : \OCP\Accounts\IAccountProperty;
    /**
     * Retrieves data for verification purposes.
     *
     * @since 22.0.0
     */
    public function getVerificationData() : string;
    /**
     * Set the instance-based verification status of a property
     *
     * @since 23.0.0
     *
     * @param string $verified must be one of the verification constants of IAccountManager
     * @return IAccountProperty
     * @throws InvalidArgumentException
     */
    public function setLocallyVerified(string $verified) : \OCP\Accounts\IAccountProperty;
    /**
     * Get the instance-based verification status of a property
     *
     * @since 23.0.0
     *
     * @return string
     */
    public function getLocallyVerified() : string;
}
/**
 * Class PropertyDoesNotExistException
 *
 * @since 15.0.0
 *
 */
class PropertyDoesNotExistException extends \Exception
{
    /**
     * Constructor
     * @param string $msg the error message
     * @since 15.0.0
     */
    public function __construct($property)
    {
    }
}
/**
 * Interface IAccount
 *
 * @since 15.0.0
 */
interface IAccount extends \JsonSerializable
{
    /**
     * Set a property with data
     *
     * @since 15.0.0
     *
     * @param string $property  Must be one of the PROPERTY_ prefixed constants of \OCP\Accounts\IAccountManager
     * @param string $value
     * @param string $scope Must be one of the VISIBILITY_ prefixed constants of \OCP\Accounts\IAccountManager
     * @param string $verified \OCP\Accounts\IAccountManager::NOT_VERIFIED | \OCP\Accounts\IAccountManager::VERIFICATION_IN_PROGRESS | \OCP\Accounts\IAccountManager::VERIFIED
     * @param string $verificationData Optional, defaults to empty string. Since @22.0.0.
     * @return IAccount
     */
    public function setProperty(string $property, string $value, string $scope, string $verified, string $verificationData = '') : \OCP\Accounts\IAccount;
    /**
     * Get a property by its key
     *
     * @since 15.0.0
     *
     * @param string $property Must be one of the PROPERTY_ prefixed constants of \OCP\Accounts\IAccountManager
     * @return IAccountProperty
     * @throws PropertyDoesNotExistException
     */
    public function getProperty(string $property) : \OCP\Accounts\IAccountProperty;
    /**
     * Get all properties of an account. Array indices are property names.
     * Values from IAccountPropertyCollections are not included in the return
     * array.
     *
     * @since 15.0.0
     * @deprecated 22.0.0 use getAllProperties()
     */
    public function getProperties() : array;
    /**
     * Set all properties of an account
     *
     * @param array<string, array<string, string>>|array<string, array<int, array<string, string>>> $properties
     *
     * e.g. `[
     *   'displayname' => [
     *     'name' => 'displayname',
     *     'value' => 'Jonathan Smith',
     *     'scope' => 'v2-federated',
     *     'verified' => '0',
     *     'verificationData' => '',
     *   ],
     *   'email' => [
     *     'name' => 'email',
     *     'value' => 'jonathan@example.org',
     *     'scope' => 'v2-federated',
     *     'verified' => '0',
     *     'verificationData' => '',
     *   ],
     *   // ...
     *   'additional_mail' => [
     *     [
     *       'name' => 'additional_mail',
     *       'value' => 'jon@example.org',
     *       'scope' => 'v2-local',
     *       'verified' => '0',
     *       'verificationData' => '',
     *     ],
     *     [
     *       'name' => 'additional_mail',
     *       'value' => 'jon@earth.org',
     *       'scope' => 'v2-local',
     *       'verified' => '0',
     *       'verificationData' => '',
     *     ],
     *   ],
     * ]`
     *
     * @since 24.0.0
     */
    public function setAllPropertiesFromJson(array $properties) : \OCP\Accounts\IAccount;
    /**
     * Get all properties of an account. Array indices are numeric. To get
     * the property name, call getName() against the value.
     *
     * IAccountPropertyCollections are being flattened into an IAccountProperty
     * for each value.
     *
     * @since 22.0.0
     *
     * @return Generator<int, IAccountProperty>
     */
    public function getAllProperties() : \Generator;
    /**
     * Set a property collection (multi-value properties)
     *
     * @since 22.0.0
     */
    public function setPropertyCollection(\OCP\Accounts\IAccountPropertyCollection $propertyCollection) : \OCP\Accounts\IAccount;
    /**
     * Returns the requested property collection (multi-value properties)
     *
     * @throws PropertyDoesNotExistException against invalid collection name
     * @since 22.0.0
     */
    public function getPropertyCollection(string $propertyCollectionName) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * Get all properties that match the provided filters for scope and verification status
     *
     * Since 22.0.0 values from IAccountPropertyCollection are included, but also
     * as IAccountProperty instances. They for properties of IAccountPropertyCollection are
     * suffixed incrementally, i.e. #0, #1 ... #n – the numbers have no further meaning.
     *
     * @since 15.0.0
     *
     * @param string $scope Must be one of the VISIBILITY_ prefixed constants of \OCP\Accounts\IAccountManager
     * @param string $verified \OCP\Accounts\IAccountManager::NOT_VERIFIED | \OCP\Accounts\IAccountManager::VERIFICATION_IN_PROGRESS | \OCP\Accounts\IAccountManager::VERIFIED
     * @return IAccountProperty[]
     */
    public function getFilteredProperties(string $scope = null, string $verified = null) : array;
    /**
     * Get the related user for the account data
     *
     * @since 15.0.0
     *
     * @return IUser
     */
    public function getUser() : \OCP\IUser;
}
/**
 * Access user profile information
 *
 * @since 15.0.0
 *
 */
interface IAccountManager
{
    /**
     * Contact details visible locally only
     *
     * @since 21.0.1
     */
    public const SCOPE_PRIVATE = 'v2-private';
    /**
     * Contact details visible locally and through public link access on local instance
     *
     * @since 21.0.1
     */
    public const SCOPE_LOCAL = 'v2-local';
    /**
     * Contact details visible locally, through public link access and on trusted federated servers.
     *
     * @since 21.0.1
     */
    public const SCOPE_FEDERATED = 'v2-federated';
    /**
     * Contact details visible locally, through public link access, on trusted federated servers
     * and published to the public lookup server.
     *
     * @since 21.0.1
     */
    public const SCOPE_PUBLISHED = 'v2-published';
    /**
     * Contact details only visible locally
     *
     * @deprecated 21.0.1
     */
    public const VISIBILITY_PRIVATE = 'private';
    /**
     * Contact details visible on trusted federated servers.
     *
     * @deprecated 21.0.1
     */
    public const VISIBILITY_CONTACTS_ONLY = 'contacts';
    /**
     * Contact details visible on trusted federated servers and in the public lookup server.
     *
     * @deprecated 21.0.1
     */
    public const VISIBILITY_PUBLIC = 'public';
    /**
     * The list of allowed scopes
     *
     * @since 25.0.0
     */
    public const ALLOWED_SCOPES = [self::SCOPE_PRIVATE, self::SCOPE_LOCAL, self::SCOPE_FEDERATED, self::SCOPE_PUBLISHED, self::VISIBILITY_PRIVATE, self::VISIBILITY_CONTACTS_ONLY, self::VISIBILITY_PUBLIC];
    public const PROPERTY_AVATAR = 'avatar';
    public const PROPERTY_DISPLAYNAME = 'displayname';
    public const PROPERTY_DISPLAYNAME_LEGACY = 'display-name';
    public const PROPERTY_PHONE = 'phone';
    public const PROPERTY_EMAIL = 'email';
    public const PROPERTY_WEBSITE = 'website';
    public const PROPERTY_ADDRESS = 'address';
    public const PROPERTY_TWITTER = 'twitter';
    public const PROPERTY_FEDIVERSE = 'fediverse';
    /**
     * @since 23.0.0
     */
    public const PROPERTY_ORGANISATION = 'organisation';
    /**
     * @since 23.0.0
     */
    public const PROPERTY_ROLE = 'role';
    /**
     * @since 23.0.0
     */
    public const PROPERTY_HEADLINE = 'headline';
    /**
     * @since 23.0.0
     */
    public const PROPERTY_BIOGRAPHY = 'biography';
    /**
     * @since 23.0.0
     */
    public const PROPERTY_PROFILE_ENABLED = 'profile_enabled';
    /**
     * The list of allowed properties
     *
     * @since 25.0.0
     */
    public const ALLOWED_PROPERTIES = [self::PROPERTY_AVATAR, self::PROPERTY_DISPLAYNAME, self::PROPERTY_PHONE, self::PROPERTY_EMAIL, self::PROPERTY_WEBSITE, self::PROPERTY_ADDRESS, self::PROPERTY_TWITTER, self::PROPERTY_FEDIVERSE, self::PROPERTY_ORGANISATION, self::PROPERTY_ROLE, self::PROPERTY_HEADLINE, self::PROPERTY_BIOGRAPHY, self::PROPERTY_PROFILE_ENABLED];
    public const COLLECTION_EMAIL = 'additional_mail';
    public const NOT_VERIFIED = '0';
    public const VERIFICATION_IN_PROGRESS = '1';
    public const VERIFIED = '2';
    /**
     * Get the account data for a given user
     *
     * @since 15.0.0
     *
     * @param IUser $user
     * @return IAccount
     */
    public function getAccount(\OCP\IUser $user) : \OCP\Accounts\IAccount;
    /**
     * Update the account data with for the user
     *
     * @since 21.0.1
     *
     * @param IAccount $account
     * @throws \InvalidArgumentException Message is the property that was invalid
     */
    public function updateAccount(\OCP\Accounts\IAccount $account) : void;
    /**
     * Search for users based on account data
     *
     * @param string $property - property or property collection name – since
     * NC 22 the implementation MAY add a fitting property collection into the
     * search even if a property name was given e.g. email property and email
     * collection)
     * @param string[] $values
     * @return array
     *
     * @since 21.0.0
     */
    public function searchUsers(string $property, array $values) : array;
}
/**
 * Interface IAccountPropertyCollection
 *
 * @package OCP\Accounts
 *
 * @since 22.0.0
 */
interface IAccountPropertyCollection extends \JsonSerializable
{
    /**
     * returns the collection name
     *
     * @since 22.0.0
     */
    public function getName() : string;
    /**
     * set properties of this collection
     *
     * @param IAccountProperty[] $properties
     * @throws InvalidArgumentException
     * @since 22.0.0
     */
    public function setProperties(array $properties) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * @return IAccountProperty[]
     * @since 22.0.0
     */
    public function getProperties() : array;
    /**
     * adds a property to this collection
     *
     * @throws InvalidArgumentException
     * @since 22.0.0
     */
    public function addProperty(\OCP\Accounts\IAccountProperty $property) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * adds a property to this collection with only specifying the value
     *
     * @throws InvalidArgumentException
     * @since 22.0.0
     */
    public function addPropertyWithDefaults(string $value) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * removes a property of this collection
     *
     * @since 22.0.0
     */
    public function removeProperty(\OCP\Accounts\IAccountProperty $property) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * removes a property identified by its value
     *
     * @since 22.0.0
     */
    public function removePropertyByValue(string $value) : \OCP\Accounts\IAccountPropertyCollection;
    /**
     * retrieves a property identified by its value. null, if none was found.
     *
     * Returns only the first property if there are more with the same value.
     *
     * @since 23.0.0
     */
    public function getPropertyByValue(string $value) : ?\OCP\Accounts\IAccountProperty;
}
namespace OCP\Activity;

/**
 * Interface ISetting
 *
 * @since 11.0.0
 */
interface ISetting
{
    /**
     * @return string Lowercase a-z and underscore only identifier
     * @since 11.0.0
     */
    public function getIdentifier();
    /**
     * @return string A translated string
     * @since 11.0.0
     */
    public function getName();
    /**
     * @return int whether the filter should be rather on the top or bottom of
     * the admin section. The filters are arranged in ascending order of the
     * priority values. It is required to return a value between 0 and 100.
     * @since 11.0.0
     */
    public function getPriority();
    /**
     * @return bool True when the option can be changed for the stream
     * @since 11.0.0
     */
    public function canChangeStream();
    /**
     * @return bool True when the option can be changed for the stream
     * @since 11.0.0
     */
    public function isDefaultEnabledStream();
    /**
     * @return bool True when the option can be changed for the mail
     * @since 11.0.0
     */
    public function canChangeMail();
    /**
     * @return bool True when the option can be changed for the stream
     * @since 11.0.0
     */
    public function isDefaultEnabledMail();
}
/**
 * @since 20.0.0
 */
abstract class ActivitySettings implements \OCP\Activity\ISetting
{
    /**
     * @return string Lowercase a-z and underscore only identifier
     * @since 20.0.0
     */
    public abstract function getIdentifier();
    /**
     * @return string A translated string
     * @since 20.0.0
     */
    public abstract function getName();
    /**
     * @return string Lowercase a-z and underscore only group identifier
     * @since 20.0.0
     */
    public abstract function getGroupIdentifier();
    /**
     * @return string A translated string for the settings group
     * @since 20.0.0
     */
    public abstract function getGroupName();
    /**
     * @return int whether the filter should be rather on the top or bottom of
     * the admin section. The filters are arranged in ascending order of the
     * priority values. It is required to return a value between 0 and 100.
     * @since 20.0.0
     */
    public abstract function getPriority();
    /**
     * @return bool True when the option can be changed for the mail
     * @since 20.0.0
     */
    public function canChangeMail()
    {
    }
    /**
     * @return bool True when the option can be changed for the notification
     * @since 20.0.0
     */
    public function canChangeNotification()
    {
    }
    /**
     * @return bool Whether or not an activity email should be send by default
     * @since 20.0.0
     */
    public function isDefaultEnabledMail()
    {
    }
    /**
     * @return bool Whether or not an activity notification should be send by default
     * @since 20.0.0
     */
    public function isDefaultEnabledNotification()
    {
    }
    /**
     * Left in for backwards compatibility
     *
     * @return bool
     * @since 20.0.0
     */
    public function canChangeStream()
    {
    }
    /**
     * Left in for backwards compatibility
     *
     * @return bool
     * @since 20.0.0
     */
    public function isDefaultEnabledStream()
    {
    }
}
/**
 * Interface IConsumer
 *
 * @since 6.0.0
 */
interface IConsumer
{
    /**
     * @param IEvent $event
     * @return null
     * @since 6.0.0
     * @since 8.2.0 Replaced the parameters with an IEvent object
     */
    public function receive(\OCP\Activity\IEvent $event);
}
/**
 * Interface IExtension
 *
 * @since 8.0.0
 */
interface IExtension
{
    public const METHOD_STREAM = 'stream';
    public const METHOD_MAIL = 'email';
    public const METHOD_NOTIFICATION = 'notification';
    public const PRIORITY_VERYLOW = 10;
    public const PRIORITY_LOW = 20;
    public const PRIORITY_MEDIUM = 30;
    public const PRIORITY_HIGH = 40;
    public const PRIORITY_VERYHIGH = 50;
}
/**
 * Interface IManager
 *
 * @since 6.0.0
 */
interface IManager
{
    /**
     * Generates a new IEvent object
     *
     * Make sure to call at least the following methods before sending it to the
     * app with via the publish() method:
     *  - setApp()
     *  - setType()
     *  - setAffectedUser()
     *  - setSubject()
     *  - setObject()
     *
     * @return IEvent
     * @since 8.2.0
     */
    public function generateEvent() : \OCP\Activity\IEvent;
    /**
     * Publish an event to the activity consumers
     *
     * Make sure to call at least the following methods before sending an Event:
     *  - setApp()
     *  - setType()
     *  - setAffectedUser()
     *  - setSubject()
     *  - setObject()
     *
     * @param IEvent $event
     * @throws \BadMethodCallException if required values have not been set
     * @since 8.2.0
     */
    public function publish(\OCP\Activity\IEvent $event) : void;
    /**
     * In order to improve lazy loading a closure can be registered which will be called in case
     * activity consumers are actually requested
     *
     * $callable has to return an instance of \OCP\Activity\IConsumer
     *
     * @param \Closure $callable
     * @since 6.0.0
     */
    public function registerConsumer(\Closure $callable) : void;
    /**
     * @param string $filter Class must implement OCA\Activity\IFilter
     * @since 11.0.0
     */
    public function registerFilter(string $filter) : void;
    /**
     * @return IFilter[]
     * @since 11.0.0
     */
    public function getFilters() : array;
    /**
     * @param string $id
     * @return IFilter
     * @throws \InvalidArgumentException when the filter was not found
     * @since 11.0.0
     */
    public function getFilterById(string $id) : \OCP\Activity\IFilter;
    /**
     * @param string $setting Class must implement OCA\Activity\ISetting
     * @since 11.0.0
     */
    public function registerSetting(string $setting) : void;
    /**
     * @return ActivitySettings[]
     * @since 11.0.0
     */
    public function getSettings() : array;
    /**
     * @param string $provider Class must implement OCA\Activity\IProvider
     * @since 11.0.0
     */
    public function registerProvider(string $provider) : void;
    /**
     * @return IProvider[]
     * @since 11.0.0
     */
    public function getProviders() : array;
    /**
     * @param string $id
     * @return ActivitySettings
     * @throws \InvalidArgumentException when the setting was not found
     * @since 11.0.0
     */
    public function getSettingById(string $id) : \OCP\Activity\ActivitySettings;
    /**
     * @param string $type
     * @param int $id
     * @since 8.2.0
     */
    public function setFormattingObject(string $type, int $id) : void;
    /**
     * @return bool
     * @since 8.2.0
     */
    public function isFormattingFilteredObject() : bool;
    /**
     * @param bool $status Set to true, when parsing events should not use SVG icons
     * @since 12.0.1
     */
    public function setRequirePNG(bool $status) : void;
    /**
     * @return bool
     * @since 12.0.1
     */
    public function getRequirePNG() : bool;
    /**
     * Set the user we need to use
     *
     * @param string|null $currentUserId
     * @throws \UnexpectedValueException If the user is invalid
     * @since 9.0.1
     */
    public function setCurrentUserId(string $currentUserId = null) : void;
    /**
     * Get the user we need to use
     *
     * Either the user is logged in, or we try to get it from the token
     *
     * @return string
     * @throws \UnexpectedValueException If the token is invalid, does not exist or is not unique
     * @since 8.1.0
     */
    public function getCurrentUserId() : string;
}
/**
 * Interface IProvider
 *
 * @since 11.0.0
 */
interface IProvider
{
    /**
     * @param string $language The language which should be used for translating, e.g. "en"
     * @param IEvent $event The current event which should be parsed
     * @param IEvent|null $previousEvent A potential previous event which you can combine with the current one.
     *                                   To do so, simply use setChildEvent($previousEvent) after setting the
     *                                   combined subject on the current event.
     * @return IEvent
     * @throws \InvalidArgumentException Should be thrown if your provider does not know this event
     * @since 11.0.0
     */
    public function parse($language, \OCP\Activity\IEvent $event, \OCP\Activity\IEvent $previousEvent = null);
}
/**
 * Interface IEvent
 *
 * @since 8.2.0
 */
interface IEvent
{
    /**
     * Set the app of the activity
     *
     * @param string $app
     * @return IEvent
     * @throws \InvalidArgumentException if the app id is invalid
     * @since 8.2.0
     */
    public function setApp(string $app) : self;
    /**
     * Set the type of the activity
     *
     * @param string $type
     * @return IEvent
     * @throws \InvalidArgumentException if the type is invalid
     * @since 8.2.0
     */
    public function setType(string $type) : self;
    /**
     * Set the affected user of the activity
     *
     * @param string $user
     * @return IEvent
     * @throws \InvalidArgumentException if the affected user is invalid
     * @since 8.2.0
     */
    public function setAffectedUser(string $user) : self;
    /**
     * Set the author of the activity
     *
     * @param string $author
     * @return IEvent
     * @throws \InvalidArgumentException if the author is invalid
     * @since 8.2.0
     */
    public function setAuthor(string $author) : self;
    /**
     * Set the author of the activity
     *
     * @param int $timestamp
     * @return IEvent
     * @throws \InvalidArgumentException if the timestamp is invalid
     * @since 8.2.0
     */
    public function setTimestamp(int $timestamp) : self;
    /**
     * Set the subject of the activity
     *
     * @param string $subject
     * @param array $parameters
     * @return IEvent
     * @throws \InvalidArgumentException if the subject or parameters are invalid
     * @since 8.2.0
     */
    public function setSubject(string $subject, array $parameters = []) : self;
    /**
     * Set a parsed subject
     *
     * HTML is not allowed in the parsed subject and will be escaped
     * automatically by the clients. You can use the RichObjectString system
     * provided by the Nextcloud server to highlight important parameters via
     * the setRichSubject method.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $subject
     * @return $this
     * @throws \InvalidArgumentException if the subject is invalid
     * @since 11.0.0
     */
    public function setParsedSubject(string $subject) : self;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getParsedSubject() : string;
    /**
     * Set a RichObjectString subject
     *
     * HTML is not allowed in the rich subject and will be escaped automatically
     * by the clients, but you can use the RichObjectString system provided by
     * the Nextcloud server to highlight important parameters.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $subject
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the subject or parameters are invalid
     * @since 11.0.0
     */
    public function setRichSubject(string $subject, array $parameters = []) : self;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getRichSubject() : string;
    /**
     * @return array[]
     * @since 11.0.0
     */
    public function getRichSubjectParameters() : array;
    /**
     * Set the message of the activity
     *
     * @param string $message
     * @param array $parameters
     * @return IEvent
     * @throws \InvalidArgumentException if the message or parameters are invalid
     * @since 8.2.0
     */
    public function setMessage(string $message, array $parameters = []) : self;
    /**
     * Set a parsed message
     *
     * HTML is not allowed in the parsed message and will be escaped
     * automatically by the clients. You can use the RichObjectString system
     * provided by the Nextcloud server to highlight important parameters via
     * the setRichMessage method.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $message
     * @return $this
     * @throws \InvalidArgumentException if the message is invalid
     * @since 11.0.0
     */
    public function setParsedMessage(string $message) : self;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getParsedMessage() : string;
    /**
     * Set a RichObjectString message
     *
     * HTML is not allowed in the rich message and will be escaped automatically
     * by the clients, but you can use the RichObjectString system provided by
     * the Nextcloud server to highlight important parameters.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $message
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the message or parameters are invalid
     * @since 11.0.0
     */
    public function setRichMessage(string $message, array $parameters = []) : self;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getRichMessage() : string;
    /**
     * @return array[]
     * @since 11.0.0
     */
    public function getRichMessageParameters() : array;
    /**
     * Set the object of the activity
     *
     * @param string $objectType
     * @param int $objectId
     * @param string $objectName
     * @return IEvent
     * @throws \InvalidArgumentException if the object is invalid
     * @since 8.2.0
     */
    public function setObject(string $objectType, int $objectId, string $objectName = '') : self;
    /**
     * Set the link of the activity
     *
     * @param string $link
     * @return IEvent
     * @throws \InvalidArgumentException if the link is invalid
     * @since 8.2.0
     */
    public function setLink(string $link) : self;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getApp() : string;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getType() : string;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getAffectedUser() : string;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getAuthor() : string;
    /**
     * @return int
     * @since 8.2.0
     */
    public function getTimestamp() : int;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getSubject() : string;
    /**
     * @return array
     * @since 8.2.0
     */
    public function getSubjectParameters() : array;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getMessage() : string;
    /**
     * @return array
     * @since 8.2.0
     */
    public function getMessageParameters() : array;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getObjectType() : string;
    /**
     * @return int
     * @since 8.2.0
     */
    public function getObjectId() : int;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getObjectName() : string;
    /**
     * @return string
     * @since 8.2.0
     */
    public function getLink() : string;
    /**
     * @param string $icon
     * @return $this
     * @throws \InvalidArgumentException if the icon is invalid
     * @since 11.0.0
     */
    public function setIcon(string $icon) : self;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getIcon() : string;
    /**
     * @param IEvent $child
     * @return $this
     * @since 11.0.0 - Since 15.0.0 returns $this
     */
    public function setChildEvent(\OCP\Activity\IEvent $child) : self;
    /**
     * @return IEvent|null
     * @since 11.0.0
     */
    public function getChildEvent();
    /**
     * @return bool
     * @since 11.0.0
     */
    public function isValid() : bool;
    /**
     * @return bool
     * @since 11.0.0
     */
    public function isValidParsed() : bool;
    /**
     * Set whether or not a notification should be automatically generated for this activity.
     *
     * Set this to `false` if the app already generates a notification for the event.
     *
     * @param bool $generate
     * @return IEvent
     * @since 20.0.0
     */
    public function setGenerateNotification(bool $generate) : self;
    /**
     * whether or not a notification should be automatically generated for this activity.
     *
     * @return bool
     * @since 20.0.0
     */
    public function getGenerateNotification() : bool;
}
/**
 * Interface EventMerger
 *
 * @since 11.0
 */
interface IEventMerger
{
    /**
     * Combines two events when possible to have grouping:
     *
     * Example1: Two events with subject '{user} created {file}' and
     * $mergeParameter file with different file and same user will be merged
     * to '{user} created {file1} and {file2}' and the childEvent on the return
     * will be set, if the events have been merged.
     *
     * Example2: Two events with subject '{user} created {file}' and
     * $mergeParameter file with same file and same user will be merged to
     * '{user} created {file1}' and the childEvent on the return will be set, if
     * the events have been merged.
     *
     * The following requirements have to be met, in order to be merged:
     * - Both events need to have the same `getApp()`
     * - Both events must not have a message `getMessage()`
     * - Both events need to have the same subject `getSubject()`
     * - Both events need to have the same object type `getObjectType()`
     * - The time difference between both events must not be bigger then 3 hours
     * - Only up to 5 events can be merged.
     * - All parameters apart from such starting with $mergeParameter must be
     *   the same for both events.
     *
     * @param string $mergeParameter
     * @param IEvent $event
     * @param IEvent|null $previousEvent
     * @return IEvent
     * @since 11.0
     */
    public function mergeEvents($mergeParameter, \OCP\Activity\IEvent $event, \OCP\Activity\IEvent $previousEvent = null);
}
/**
 * Interface IFilter
 *
 * @since 11.0.0
 */
interface IFilter
{
    /**
     * @return string Lowercase a-z and underscore only identifier
     * @since 11.0.0
     */
    public function getIdentifier();
    /**
     * @return string A translated string
     * @since 11.0.0
     */
    public function getName();
    /**
     * @return int whether the filter should be rather on the top or bottom of
     * the admin section. The filters are arranged in ascending order of the
     * priority values. It is required to return a value between 0 and 100.
     * @since 11.0.0
     */
    public function getPriority();
    /**
     * @return string Full URL to an icon, empty string when none is given
     * @since 11.0.0
     */
    public function getIcon();
    /**
     * @param string[] $types
     * @return string[] An array of allowed apps from which activities should be displayed
     * @since 11.0.0
     */
    public function filterTypes(array $types);
    /**
     * @return string[] An array of allowed apps from which activities should be displayed
     * @since 11.0.0
     */
    public function allowedApps();
}
namespace OCP\App;

/**
 * Class AppPathNotFoundException
 *
 * @since 11.0.0
 */
class AppPathNotFoundException extends \Exception
{
}
namespace OCP\EventDispatcher;

/**
 * Base event class for the event dispatcher service
 *
 * Typically this class isn't instantiated directly but sub classed for specific
 * event types
 *
 * This class extended \Symfony\Contracts\EventDispatcher\Event until 21.0, since
 * 22.0.0 this class directly implements the PSR StoppableEventInterface and no
 * longer relies on Symfony. This transition does not come with any changes in API,
 * the class has the same methods and behavior before and after this change.
 *
 * @since 17.0.0
 */
class Event implements \Psr\EventDispatcher\StoppableEventInterface
{
    /**
     * Compatibility constructor
     *
     * In Nextcloud 17.0.0 this event class used a now deprecated/removed Symfony base
     * class that had a constructor (with default arguments). To lower the risk of
     * a breaking change (PHP won't allow parent constructor calls if there is none),
     * this empty constructor's only purpose is to hopefully not break existing sub-
     * classes of this class.
     *
     * @since 18.0.0
     */
    public function __construct()
    {
    }
    /**
     * Stops the propagation of the event to further event listeners
     *
     * @return void
     *
     * @since 22.0.0
     */
    public function stopPropagation() : void
    {
    }
    /**
     * {@inheritDoc}
     *
     * @since 22.0.0
     * @see \Psr\EventDispatcher\StoppableEventInterface
     */
    public function isPropagationStopped() : bool
    {
    }
}
namespace OCP\App;

/**
 * Class ManagerEvent
 *
 * @since 9.0.0
 */
class ManagerEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_APP_ENABLE = 'OCP\\App\\IAppManager::enableApp';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_APP_ENABLE_FOR_GROUPS = 'OCP\\App\\IAppManager::enableAppForGroups';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_APP_DISABLE = 'OCP\\App\\IAppManager::disableApp';
    /**
     * @since 9.1.0
     * @deprecated 22.0.0
     */
    public const EVENT_APP_UPDATE = 'OCP\\App\\IAppManager::updateApp';
    /** @var string */
    protected $event;
    /** @var string */
    protected $appID;
    /** @var \OCP\IGroup[]|null */
    protected $groups;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @param $appID
     * @param \OCP\IGroup[]|null $groups
     * @since 9.0.0
     */
    public function __construct($event, $appID, array $groups = null)
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getEvent()
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getAppID()
    {
    }
    /**
     * returns the group Ids
     * @return string[]
     * @since 9.0.0
     */
    public function getGroups()
    {
    }
}
namespace OCP\App\Events;

/**
 * @since 27.0.0
 */
class AppDisableEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 27.0.0
     */
    public function __construct(string $appId)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getAppId() : string
    {
    }
}
/**
 * @since 27.0.0
 */
class AppEnableEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string[] $groupIds
     * @since 27.0.0
     */
    public function __construct(string $appId, array $groupIds = [])
    {
    }
    /**
     * @since 27.0.0
     */
    public function getAppId() : string
    {
    }
    /**
     * @since 27.0.0
     */
    public function getGroupIds() : array
    {
    }
}
/**
 * @since 27.0.0
 */
class AppUpdateEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 27.0.0
     */
    public function __construct(string $appId)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getAppId() : string
    {
    }
}
namespace OCP\App;

/**
 * Interface IAppManager
 *
 * @warning This interface shouldn't be included with dependency injection in
 *          classes used for installing Nextcloud.
 *
 * @since 8.0.0
 */
interface IAppManager
{
    /**
     * Returns the app information from "appinfo/info.xml".
     *
     * @param string $appId
     * @return mixed
     * @since 14.0.0
     */
    public function getAppInfo(string $appId, bool $path = false, $lang = null);
    /**
     * Returns the app information from "appinfo/info.xml".
     *
     * @param string $appId
     * @param bool $useCache
     * @return string
     * @since 14.0.0
     */
    public function getAppVersion(string $appId, bool $useCache = true) : string;
    /**
     * Check if an app is enabled for user
     *
     * @param string $appId
     * @param \OCP\IUser $user (optional) if not defined, the currently loggedin user will be used
     * @return bool
     * @since 8.0.0
     */
    public function isEnabledForUser($appId, $user = null);
    /**
     * Check if an app is enabled in the instance
     *
     * Notice: This actually checks if the app is enabled and not only if it is installed.
     *
     * @param string $appId
     * @return bool
     * @since 8.0.0
     */
    public function isInstalled($appId);
    /**
     * Check if an app should be enabled by default
     *
     * Notice: This actually checks if the app should be enabled by default
     * and not if currently installed/enabled
     *
     * @param string $appId ID of the app
     * @since 25.0.0
     */
    public function isDefaultEnabled(string $appId) : bool;
    /**
     * Load an app, if not already loaded
     * @param string $app app id
     * @since 27.0.0
     */
    public function loadApp(string $app) : void;
    /**
     * Check if an app is loaded
     * @param string $app app id
     * @since 27.0.0
     */
    public function isAppLoaded(string $app) : bool;
    /**
     * Enable an app for every user
     *
     * @param string $appId
     * @param bool $forceEnable
     * @throws AppPathNotFoundException
     * @since 8.0.0
     */
    public function enableApp(string $appId, bool $forceEnable = false) : void;
    /**
     * Whether a list of types contains a protected app type
     *
     * @param string[] $types
     * @return bool
     * @since 12.0.0
     */
    public function hasProtectedAppType($types);
    /**
     * Enable an app only for specific groups
     *
     * @param string $appId
     * @param \OCP\IGroup[] $groups
     * @param bool $forceEnable
     * @throws \Exception
     * @since 8.0.0
     */
    public function enableAppForGroups(string $appId, array $groups, bool $forceEnable = false) : void;
    /**
     * Disable an app for every user
     *
     * @param string $appId
     * @param bool $automaticDisabled
     * @since 8.0.0
     */
    public function disableApp($appId, $automaticDisabled = false);
    /**
     * Get the directory for the given app.
     *
     * @param string $appId
     * @return string
     * @since 11.0.0
     * @throws AppPathNotFoundException
     */
    public function getAppPath($appId);
    /**
     * Get the web path for the given app.
     *
     * @param string $appId
     * @return string
     * @since 18.0.0
     * @throws AppPathNotFoundException
     */
    public function getAppWebPath(string $appId) : string;
    /**
     * List all apps enabled for a user
     *
     * @param \OCP\IUser $user
     * @return string[]
     * @since 8.1.0
     */
    public function getEnabledAppsForUser(\OCP\IUser $user);
    /**
     * List all installed apps
     *
     * @return string[]
     * @since 8.1.0
     */
    public function getInstalledApps();
    /**
     * Clear the cached list of apps when enabling/disabling an app
     * @since 8.1.0
     */
    public function clearAppsCache();
    /**
     * @param string $appId
     * @return boolean
     * @since 9.0.0
     */
    public function isShipped($appId);
    /**
     * Loads all apps
     *
     * @param string[] $types
     * @return bool
     *
     * This function walks through the Nextcloud directory and loads all apps
     * it can find. A directory contains an app if the file /appinfo/info.xml
     * exists.
     *
     * if $types is set to non-empty array, only apps of those types will be loaded
     * @since 27.0.0
     */
    public function loadApps(array $types = []) : bool;
    /**
     * Check if an app is of a specific type
     * @since 27.0.0
     */
    public function isType(string $app, array $types) : bool;
    /**
     * @return string[]
     * @since 9.0.0
     */
    public function getAlwaysEnabledApps();
    /**
     * @return string[] app IDs
     * @since 25.0.0
     */
    public function getDefaultEnabledApps() : array;
    /**
     * @param \OCP\IGroup $group
     * @return String[]
     * @since 17.0.0
     */
    public function getEnabledAppsForGroup(\OCP\IGroup $group) : array;
    /**
     * @param String $appId
     * @return string[]
     * @since 17.0.0
     */
    public function getAppRestriction(string $appId) : array;
    /**
     * Returns the id of the user's default app
     *
     * If `user` is not passed, the currently logged in user will be used
     *
     * @since 25.0.6
     */
    public function getDefaultAppForUser(?\OCP\IUser $user = null) : string;
}
namespace OCP\AppFramework\Bootstrap;

/**
 * @since 20.0.0
 */
interface IBootContext
{
    /**
     * Get hold of the app's container
     *
     * Useful to register and query app-specific services
     *
     * @return IAppContainer
     * @since 20.0.0
     */
    public function getAppContainer() : \OCP\AppFramework\IAppContainer;
    /**
     * Get hold of the server DI container
     *
     * Useful to register and query system-wide services
     *
     * @return IServerContainer
     * @since 20.0.0
     */
    public function getServerContainer() : \OCP\IServerContainer;
    /**
     * Invoke the given callable and inject all parameters based on their types
     * and names
     *
     * Note: when used with methods, make sure they are public or use \Closure::fromCallable
     * to wrap the private method call, e.g.
     *  * `$context->injectFn([$obj, 'publicMethod'])`
     *  * `$context->injectFn([$this, 'publicMethod'])`
     *  * `$context->injectFn(\Closure::fromCallable([$this, 'privateMethod']))`
     *
     * Note: the app container will be queried
     *
     * @param callable $fn
     * @throws ContainerExceptionInterface if at least one of the parameter can't be resolved
     * @throws Throwable any error the function invocation might cause
     * @return mixed|null the return value of the invoked function, if any
     * @since 20.0.0
     */
    public function injectFn(callable $fn);
}
/**
 * @since 20.0.0
 */
interface IBootstrap
{
    /**
     * @param IRegistrationContext $context
     *
     * @since 20.0.0
     */
    public function register(\OCP\AppFramework\Bootstrap\IRegistrationContext $context) : void;
    /**
     * Boot the application
     *
     * At this stage you can assume that all services are registered and the DI
     * container(s) are ready to be queried.
     *
     * This is also the state where an optional `appinfo/app.php` was loaded.
     *
     * @param IBootContext $context
     *
     * @since 20.0.0
     */
    public function boot(\OCP\AppFramework\Bootstrap\IBootContext $context) : void;
}
/**
 * The context object passed to IBootstrap::register
 *
 * @since 20.0.0
 * @see IBootstrap::register()
 */
interface IRegistrationContext
{
    /**
     * @param string $capability
     * @psalm-param class-string<ICapability> $capability
     * @see IAppContainer::registerCapability
     *
     * @since 20.0.0
     */
    public function registerCapability(string $capability) : void;
    /**
     * Register an implementation of \OCP\Support\CrashReport\IReporter that
     * will receive unhandled exceptions and throwables
     *
     * @param string $reporterClass
     * @psalm-param class-string<\OCP\Support\CrashReport\IReporter> $reporterClass
     * @return void
     * @since 20.0.0
     */
    public function registerCrashReporter(string $reporterClass) : void;
    /**
     * Register an implementation of \OCP\Dashboard\IWidget that
     * will handle the implementation of a dashboard widget
     *
     * @param string $widgetClass
     * @psalm-param class-string<\OCP\Dashboard\IWidget> $widgetClass
     * @return void
     * @since 20.0.0
     */
    public function registerDashboardWidget(string $widgetClass) : void;
    /**
     * Register a service
     *
     * @param string $name
     * @param callable $factory
     * @psalm-param callable(\Psr\Container\ContainerInterface): mixed $factory
     * @param bool $shared
     *
     * @return void
     * @see IContainer::registerService()
     *
     * @since 20.0.0
     */
    public function registerService(string $name, callable $factory, bool $shared = true) : void;
    /**
     * @param string $alias
     * @psalm-param string|class-string $alias
     * @param string $target
     * @psalm-param string|class-string $target
     *
     * @return void
     * @see IContainer::registerAlias()
     *
     * @since 20.0.0
     */
    public function registerServiceAlias(string $alias, string $target) : void;
    /**
     * @param string $name
     * @param mixed $value
     *
     * @return void
     * @see IContainer::registerParameter()
     *
     * @since 20.0.0
     */
    public function registerParameter(string $name, $value) : void;
    /**
     * Register a service listener
     *
     * This is equivalent to calling IEventDispatcher::addServiceListener
     *
     * @psalm-template T of \OCP\EventDispatcher\Event
     * @param string $event preferably the fully-qualified class name of the Event sub class to listen for
     * @psalm-param string|class-string<T> $event preferably the fully-qualified class name of the Event sub class to listen for
     * @param string $listener fully qualified class name (or ::class notation) of a \OCP\EventDispatcher\IEventListener that can be built by the DI container
     * @psalm-param class-string<\OCP\EventDispatcher\IEventListener> $listener fully qualified class name that can be built by the DI container
     * @param int $priority The higher this value, the earlier an event
     *                      listener will be triggered in the chain (defaults to 0)
     *
     * @see IEventDispatcher::addServiceListener()
     *
     * @since 20.0.0
     */
    public function registerEventListener(string $event, string $listener, int $priority = 0) : void;
    /**
     * @param string $class
     * @param bool $global load this middleware also for requests of other apps? Added in Nextcloud 26
     * @psalm-param class-string<\OCP\AppFramework\Middleware> $class
     *
     * @return void
     * @see IAppContainer::registerMiddleWare()
     *
     * @since 20.0.0
     * @since 26.0.0 Added optional argument $global
     */
    public function registerMiddleware(string $class, bool $global = false) : void;
    /**
     * Register a search provider for the unified search
     *
     * It is allowed to register more than one provider per app as the search
     * results can go into distinct sections, e.g. "Files" and "Files shared
     * with you" in the Files app.
     *
     * @param string $class
     * @psalm-param class-string<\OCP\Search\IProvider> $class
     *
     * @return void
     *
     * @since 20.0.0
     */
    public function registerSearchProvider(string $class) : void;
    /**
     * Register an alternative login option
     *
     * It is allowed to register more than one option per app.
     *
     * @param string $class
     * @psalm-param class-string<\OCP\Authentication\IAlternativeLogin> $class
     *
     * @return void
     *
     * @since 20.0.0
     */
    public function registerAlternativeLogin(string $class) : void;
    /**
     * Register an initialstate provider
     *
     * It is allowed to register more than one provider per app.
     *
     * @param string $class
     * @psalm-param class-string<\OCP\AppFramework\Services\InitialStateProvider> $class
     *
     * @return void
     *
     * @since 21.0.0
     */
    public function registerInitialStateProvider(string $class) : void;
    /**
     * Register a well known protocol handler
     *
     * It is allowed to register more than one handler per app.
     *
     * @param string $class
     * @psalm-param class-string<\OCP\Http\WellKnown\IHandler> $class
     *
     * @return void
     *
     * @since 21.0.0
     */
    public function registerWellKnownHandler(string $class) : void;
    /**
     * Register a custom SpeechToText provider class that can provide transcription
     * of audio through the OCP\SpeechToText APIs
     *
     * @param string $providerClass
     * @psalm-param class-string<ISpeechToTextProvider> $providerClass
     * @since 27.0.0
     */
    public function registerSpeechToTextProvider(string $providerClass) : void;
    /**
     * Register a custom text processing provider class that provides a promptable language model
     * through the OCP\TextProcessing APIs
     *
     * @param string $providerClass
     * @psalm-param class-string<ITextProcessingProvider> $providerClass
     * @since 27.1.0
     */
    public function registerTextProcessingProvider(string $providerClass) : void;
    /**
     * Register a custom template provider class that is able to inject custom templates
     * in addition to the user defined ones
     *
     * @param string $providerClass
     * @psalm-param class-string<ICustomTemplateProvider> $providerClass
     * @since 21.0.0
     */
    public function registerTemplateProvider(string $providerClass) : void;
    /**
     * Register a custom translation provider class that can provide translation
     * between languages through the OCP\Translation APIs
     *
     * @param string $providerClass
     * @psalm-param class-string<ITranslationProvider> $providerClass
     * @since 21.0.0
     */
    public function registerTranslationProvider(string $providerClass) : void;
    /**
     * Register an INotifier class
     *
     * @param string $notifierClass
     * @psalm-param class-string<INotifier> $notifierClass
     * @since 22.0.0
     */
    public function registerNotifierService(string $notifierClass) : void;
    /**
     * Register a two-factor provider
     *
     * @param string $twoFactorProviderClass
     * @psalm-param class-string<IProvider> $twoFactorProviderClass
     * @since 22.0.0
     */
    public function registerTwoFactorProvider(string $twoFactorProviderClass) : void;
    /**
     * Register a preview provider
     *
     * It is allowed to register more than one provider per app.
     *
     * @param string $previewProviderClass
     * @param string $mimeTypeRegex
     * @psalm-param class-string<IProviderV2> $previewProviderClass
     * @since 23.0.0
     */
    public function registerPreviewProvider(string $previewProviderClass, string $mimeTypeRegex) : void;
    /**
     * Register a calendar provider
     *
     * @param string $class
     * @psalm-param class-string<ICalendarProvider> $class
     * @since 23.0.0
     */
    public function registerCalendarProvider(string $class) : void;
    /**
     * Register a reference provider
     *
     * @param string $class
     * @psalm-param class-string<IReferenceProvider> $class
     * @since 25.0.0
     */
    public function registerReferenceProvider(string $class) : void;
    /**
     * Register an implementation of \OCP\Profile\ILinkAction that
     * will handle the implementation of a profile link action
     *
     * @param string $actionClass
     * @psalm-param class-string<\OCP\Profile\ILinkAction> $actionClass
     * @return void
     * @since 23.0.0
     */
    public function registerProfileLinkAction(string $actionClass) : void;
    /**
     * Register the backend of the Talk app
     *
     * This service must only be used by the Talk app
     *
     * @param string $backend
     * @return void
     * @since 24.0.0
     */
    public function registerTalkBackend(string $backend) : void;
    /**
     * Register a resource backend for the DAV server
     *
     * @param string $actionClass
     * @psalm-param class-string<\OCP\Calendar\Resource\IBackend> $actionClass
     * @return void
     * @since 24.0.0
     */
    public function registerCalendarResourceBackend(string $class) : void;
    /**
     * Register a room backend for the DAV server
     *
     * @param string $actionClass
     * @psalm-param class-string<\OCP\Calendar\Room\IBackend> $actionClass
     * @return void
     * @since 24.0.0
     */
    public function registerCalendarRoomBackend(string $class) : void;
    /**
     * Register an implementation of \OCP\UserMigration\IMigrator that
     * will handle the implementation of a migrator
     *
     * @param string $migratorClass
     * @psalm-param class-string<\OCP\UserMigration\IMigrator> $migratorClass
     * @return void
     * @since 24.0.0
     */
    public function registerUserMigrator(string $migratorClass) : void;
    /**
     * Announce methods of classes that may contain sensitive values, which
     * should be obfuscated before being logged.
     *
     * @param string $class
     * @param string[] $methods
     * @return void
     * @since 25.0.0
     */
    public function registerSensitiveMethods(string $class, array $methods) : void;
    /**
     * Register an implementation of IPublicShareTemplateProvider.
     *
     * @param string $class
     * @psalm-param class-string<\OCP\Share\IPublicShareTemplateProvider> $class
     * @return void
     * @since 26.0.0
     */
    public function registerPublicShareTemplateProvider(string $class) : void;
}
namespace OCP\AppFramework\Db;

/**
 * @since 16.0.0
 */
interface IMapperException extends \Throwable
{
}
/**
 * This is returned or should be returned when a find request does not find an
 * entry in the database
 * @since 7.0.0
 */
class DoesNotExistException extends \Exception implements \OCP\AppFramework\Db\IMapperException
{
    /**
     * Constructor
     * @param string $msg the error message
     * @since 7.0.0
     */
    public function __construct($msg)
    {
    }
}
/**
 * This is returned or should be returned when a find request finds more than one
 * row
 * @since 7.0.0
 */
class MultipleObjectsReturnedException extends \Exception implements \OCP\AppFramework\Db\IMapperException
{
    /**
     * Constructor
     * @param string $msg the error message
     * @since 7.0.0
     */
    public function __construct($msg)
    {
    }
}
/**
 * Simple parent class for inheriting your data access layer from. This class
 * may be subject to change in the future
 *
 * @since 14.0.0
 *
 * @template T of Entity
 */
abstract class QBMapper
{
    /** @var string */
    protected $tableName;
    /** @var string|class-string<T> */
    protected $entityClass;
    /** @var IDBConnection */
    protected $db;
    /**
     * @param IDBConnection $db Instance of the Db abstraction layer
     * @param string $tableName the name of the table. set this to allow entity
     * @param class-string<T>|null $entityClass the name of the entity that the sql should be
     * mapped to queries without using sql
     * @since 14.0.0
     */
    public function __construct(\OCP\IDBConnection $db, string $tableName, string $entityClass = null)
    {
    }
    /**
     * @return string the table name
     * @since 14.0.0
     */
    public function getTableName() : string
    {
    }
    /**
     * Deletes an entity from the table
     *
     * @param Entity $entity the entity that should be deleted
     * @psalm-param T $entity the entity that should be deleted
     * @return Entity the deleted entity
     * @psalm-return T the deleted entity
     * @throws Exception
     * @since 14.0.0
     */
    public function delete(\OCP\AppFramework\Db\Entity $entity) : \OCP\AppFramework\Db\Entity
    {
    }
    /**
     * Creates a new entry in the db from an entity
     *
     * @param Entity $entity the entity that should be created
     * @psalm-param T $entity the entity that should be created
     * @return Entity the saved entity with the set id
     * @psalm-return T the saved entity with the set id
     * @throws Exception
     * @since 14.0.0
     */
    public function insert(\OCP\AppFramework\Db\Entity $entity) : \OCP\AppFramework\Db\Entity
    {
    }
    /**
     * Tries to creates a new entry in the db from an entity and
     * updates an existing entry if duplicate keys are detected
     * by the database
     *
     * @param Entity $entity the entity that should be created/updated
     * @psalm-param T $entity the entity that should be created/updated
     * @return Entity the saved entity with the (new) id
     * @psalm-return T the saved entity with the (new) id
     * @throws Exception
     * @throws \InvalidArgumentException if entity has no id
     * @since 15.0.0
     */
    public function insertOrUpdate(\OCP\AppFramework\Db\Entity $entity) : \OCP\AppFramework\Db\Entity
    {
    }
    /**
     * Updates an entry in the db from an entity
     *
     * @param Entity $entity the entity that should be created
     * @psalm-param T $entity the entity that should be created
     * @return Entity the saved entity with the set id
     * @psalm-return T the saved entity with the set id
     * @throws Exception
     * @throws \InvalidArgumentException if entity has no id
     * @since 14.0.0
     */
    public function update(\OCP\AppFramework\Db\Entity $entity) : \OCP\AppFramework\Db\Entity
    {
    }
    /**
     * Returns the type parameter for the QueryBuilder for a specific property
     * of the $entity
     *
     * @param Entity $entity   The entity to get the types from
     * @psalm-param T $entity
     * @param string $property The property of $entity to get the type for
     * @return int|string
     * @since 16.0.0
     */
    protected function getParameterTypeForProperty(\OCP\AppFramework\Db\Entity $entity, string $property)
    {
    }
    /**
     * Returns an db result and throws exceptions when there are more or less
     * results
     *
     * @param IQueryBuilder $query
     * @return array the result as row
     * @throws Exception
     * @throws MultipleObjectsReturnedException if more than one item exist
     * @throws DoesNotExistException if the item does not exist
     * @see findEntity
     *
     * @since 14.0.0
     */
    protected function findOneQuery(\OCP\DB\QueryBuilder\IQueryBuilder $query) : array
    {
    }
    /**
     * Creates an entity from a row. Automatically determines the entity class
     * from the current mapper name (MyEntityMapper -> MyEntity)
     *
     * @param array $row the row which should be converted to an entity
     * @return Entity the entity
     * @psalm-return T the entity
     * @since 14.0.0
     */
    protected function mapRowToEntity(array $row) : \OCP\AppFramework\Db\Entity
    {
    }
    /**
     * Runs a sql query and returns an array of entities
     *
     * @param IQueryBuilder $query
     * @return Entity[] all fetched entities
     * @psalm-return T[] all fetched entities
     * @throws Exception
     * @since 14.0.0
     */
    protected function findEntities(\OCP\DB\QueryBuilder\IQueryBuilder $query) : array
    {
    }
    /**
     * Returns an db result and throws exceptions when there are more or less
     * results
     *
     * @param IQueryBuilder $query
     * @return Entity the entity
     * @psalm-return T the entity
     * @throws Exception
     * @throws MultipleObjectsReturnedException if more than one item exist
     * @throws DoesNotExistException if the item does not exist
     * @since 14.0.0
     */
    protected function findEntity(\OCP\DB\QueryBuilder\IQueryBuilder $query) : \OCP\AppFramework\Db\Entity
    {
    }
}
/**
 * Helper trait for transactional operations
 *
 * @since 24.0.0
 */
trait TTransactional
{
    /**
     * Run an atomic database operation
     *
     * - Commit if no exceptions are thrown, return the callable result
     * - Revert otherwise and rethrows the exception
     *
     * @template T
     * @param callable $fn
     * @psalm-param callable():T $fn
     * @param IDBConnection $db
     *
     * @return mixed the result of the passed callable
     * @psalm-return T
     *
     * @throws Exception for possible errors of commit or rollback or the custom operations within the closure
     * @throws Throwable any other error caused by the closure
     *
     * @since 24.0.0
     * @see https://docs.nextcloud.com/server/latest/developer_manual/basics/storage/database.html#transactions
     */
    protected function atomic(callable $fn, \OCP\IDBConnection $db)
    {
    }
    /**
     * Wrapper around atomic() to retry after a retryable exception occurred
     *
     * Certain transactions might need to be retried. This is especially useful
     * in highly concurrent requests where a deadlocks is thrown by the database
     * without waiting for the lock to be freed (e.g. due to MySQL/MariaDB deadlock
     * detection)
     *
     * @template T
     * @param callable $fn
     * @psalm-param callable():T $fn
     * @param IDBConnection $db
     * @param int $maxRetries
     *
     * @return mixed the result of the passed callable
     * @psalm-return T
     *
     * @throws Exception for possible errors of commit or rollback or the custom operations within the closure
     * @throws Throwable any other error caused by the closure
     *
     * @since 27.0.0
     */
    protected function atomicRetry(callable $fn, \OCP\IDBConnection $db, int $maxRetries = 3) : mixed
    {
    }
}
/**
 * @method int getId()
 * @method void setId(int $id)
 * @since 7.0.0
 * @psalm-consistent-constructor
 */
abstract class Entity
{
    /**
     * @var int
     */
    public $id;
    /**
     * Simple alternative constructor for building entities from a request
     * @param array $params the array which was obtained via $this->params('key')
     * in the controller
     * @since 7.0.0
     */
    public static function fromParams(array $params) : static
    {
    }
    /**
     * Maps the keys of the row array to the attributes
     * @param array $row the row to map onto the entity
     * @since 7.0.0
     */
    public static function fromRow(array $row) : static
    {
    }
    /**
     * @return array with attribute and type
     * @since 7.0.0
     */
    public function getFieldTypes()
    {
    }
    /**
     * Marks the entity as clean needed for setting the id after the insertion
     * @since 7.0.0
     */
    public function resetUpdatedFields()
    {
    }
    /**
     * Generic setter for properties
     * @since 7.0.0
     */
    protected function setter(string $name, array $args) : void
    {
    }
    /**
     * Generic getter for properties
     * @since 7.0.0
     */
    protected function getter(string $name) : mixed
    {
    }
    /**
     * Each time a setter is called, push the part after set
     * into an array: for instance setId will save Id in the
     * updated fields array so it can be easily used to create the
     * getter method
     * @since 7.0.0
     */
    public function __call(string $methodName, array $args)
    {
    }
    /**
     * @param string $methodName
     * @return bool
     * @since 18.0.0
     */
    protected function isGetterForBoolProperty(string $methodName) : bool
    {
    }
    /**
     * Mark am attribute as updated
     * @param string $attribute the name of the attribute
     * @since 7.0.0
     */
    protected function markFieldUpdated(string $attribute) : void
    {
    }
    /**
     * Transform a database columnname to a property
     * @param string $columnName the name of the column
     * @return string the property name
     * @since 7.0.0
     */
    public function columnToProperty($columnName)
    {
    }
    /**
     * Transform a property to a database column name
     * @param string $property the name of the property
     * @return string the column name
     * @since 7.0.0
     */
    public function propertyToColumn($property)
    {
    }
    /**
     * @return array array of updated fields for update query
     * @since 7.0.0
     */
    public function getUpdatedFields()
    {
    }
    /**
     * Adds type information for a field so that its automatically casted to
     * that value once its being returned from the database
     * @param string $fieldName the name of the attribute
     * @param string $type the type which will be used to call settype()
     * @since 7.0.0
     */
    protected function addType($fieldName, $type)
    {
    }
    /**
     * Slugify the value of a given attribute
     * Warning: This doesn't result in a unique value
     * @param string $attributeName the name of the attribute, which value should be slugified
     * @return string slugified value
     * @since 7.0.0
     * @deprecated 24.0.0
     */
    public function slugify($attributeName)
    {
    }
}
namespace OCP\AppFramework;

/**
 * Base class which contains constants for HTTP status codes
 * @since 6.0.0
 */
class Http
{
    public const STATUS_CONTINUE = 100;
    public const STATUS_SWITCHING_PROTOCOLS = 101;
    public const STATUS_PROCESSING = 102;
    public const STATUS_OK = 200;
    public const STATUS_CREATED = 201;
    public const STATUS_ACCEPTED = 202;
    public const STATUS_NON_AUTHORATIVE_INFORMATION = 203;
    public const STATUS_NO_CONTENT = 204;
    public const STATUS_RESET_CONTENT = 205;
    public const STATUS_PARTIAL_CONTENT = 206;
    public const STATUS_MULTI_STATUS = 207;
    public const STATUS_ALREADY_REPORTED = 208;
    public const STATUS_IM_USED = 226;
    public const STATUS_MULTIPLE_CHOICES = 300;
    public const STATUS_MOVED_PERMANENTLY = 301;
    public const STATUS_FOUND = 302;
    public const STATUS_SEE_OTHER = 303;
    public const STATUS_NOT_MODIFIED = 304;
    public const STATUS_USE_PROXY = 305;
    public const STATUS_RESERVED = 306;
    public const STATUS_TEMPORARY_REDIRECT = 307;
    public const STATUS_BAD_REQUEST = 400;
    public const STATUS_UNAUTHORIZED = 401;
    public const STATUS_PAYMENT_REQUIRED = 402;
    public const STATUS_FORBIDDEN = 403;
    public const STATUS_NOT_FOUND = 404;
    public const STATUS_METHOD_NOT_ALLOWED = 405;
    public const STATUS_NOT_ACCEPTABLE = 406;
    public const STATUS_PROXY_AUTHENTICATION_REQUIRED = 407;
    public const STATUS_REQUEST_TIMEOUT = 408;
    public const STATUS_CONFLICT = 409;
    public const STATUS_GONE = 410;
    public const STATUS_LENGTH_REQUIRED = 411;
    public const STATUS_PRECONDITION_FAILED = 412;
    public const STATUS_REQUEST_ENTITY_TOO_LARGE = 413;
    public const STATUS_REQUEST_URI_TOO_LONG = 414;
    public const STATUS_UNSUPPORTED_MEDIA_TYPE = 415;
    public const STATUS_REQUEST_RANGE_NOT_SATISFIABLE = 416;
    public const STATUS_EXPECTATION_FAILED = 417;
    public const STATUS_IM_A_TEAPOT = 418;
    public const STATUS_UNPROCESSABLE_ENTITY = 422;
    public const STATUS_LOCKED = 423;
    public const STATUS_FAILED_DEPENDENCY = 424;
    public const STATUS_UPGRADE_REQUIRED = 426;
    public const STATUS_PRECONDITION_REQUIRED = 428;
    public const STATUS_TOO_MANY_REQUESTS = 429;
    public const STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
    public const STATUS_INTERNAL_SERVER_ERROR = 500;
    public const STATUS_NOT_IMPLEMENTED = 501;
    public const STATUS_BAD_GATEWAY = 502;
    public const STATUS_SERVICE_UNAVAILABLE = 503;
    public const STATUS_GATEWAY_TIMEOUT = 504;
    public const STATUS_HTTP_VERSION_NOT_SUPPORTED = 505;
    public const STATUS_VARIANT_ALSO_NEGOTIATES = 506;
    public const STATUS_INSUFFICIENT_STORAGE = 507;
    public const STATUS_LOOP_DETECTED = 508;
    public const STATUS_BANDWIDTH_LIMIT_EXCEEDED = 509;
    public const STATUS_NOT_EXTENDED = 510;
    public const STATUS_NETWORK_AUTHENTICATION_REQUIRED = 511;
}
namespace OCP\AppFramework\Http\Events;

/**
 * Emitted before the rendering step of each TemplateResponse. The event holds a
 * flag that specifies if an user is logged in.
 *
 * @since 20.0.0
 */
class BeforeTemplateRenderedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 20.0.0
     */
    public function __construct(bool $loggedIn, \OCP\AppFramework\Http\TemplateResponse $response)
    {
    }
    /**
     * @since 20.0.0
     */
    public function isLoggedIn() : bool
    {
    }
    /**
     * @since 20.0.0
     */
    public function getResponse() : \OCP\AppFramework\Http\TemplateResponse
    {
    }
}
namespace OCP\AppFramework\Http;

/**
 * Class EmptyFeaturePolicy is a simple helper which allows applications
 * to modify the FeaturePolicy sent by Nextcloud. Per default the policy
 * is forbidding everything.
 *
 * As alternative with sane exemptions look at FeaturePolicy
 *
 * @see \OCP\AppFramework\Http\FeaturePolicy
 * @since 17.0.0
 */
class EmptyFeaturePolicy
{
    /** @var string[] of allowed domains to autoplay media */
    protected $autoplayDomains = null;
    /** @var string[] of allowed domains that can access the camera */
    protected $cameraDomains = null;
    /** @var string[] of allowed domains that can use fullscreen */
    protected $fullscreenDomains = null;
    /** @var string[] of allowed domains that can use the geolocation of the device */
    protected $geolocationDomains = null;
    /** @var string[] of allowed domains that can use the microphone */
    protected $microphoneDomains = null;
    /** @var string[] of allowed domains that can use the payment API */
    protected $paymentDomains = null;
    /**
     * Allows to use autoplay from a specific domain. Use * to allow from all domains.
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedAutoplayDomain(string $domain) : self
    {
    }
    /**
     * Allows to use the camera on a specific domain. Use * to allow from all domains
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedCameraDomain(string $domain) : self
    {
    }
    /**
     * Allows the full screen functionality to be used on a specific domain. Use * to allow from all domains
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedFullScreenDomain(string $domain) : self
    {
    }
    /**
     * Allows to use the geolocation on a specific domain. Use * to allow from all domains
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedGeoLocationDomain(string $domain) : self
    {
    }
    /**
     * Allows to use the microphone on a specific domain. Use * to allow from all domains
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedMicrophoneDomain(string $domain) : self
    {
    }
    /**
     * Allows to use the payment API on a specific domain. Use * to allow from all domains
     *
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 17.0.0
     */
    public function addAllowedPaymentDomain(string $domain) : self
    {
    }
    /**
     * Get the generated Feature-Policy as a string
     *
     * @return string
     * @since 17.0.0
     */
    public function buildPolicy() : string
    {
    }
}
/**
 * Class FeaturePolicy is a simple helper which allows applications to
 * modify the Feature-Policy sent by Nextcloud. Per default only autoplay is allowed
 * from the same domain and full screen as well from the same domain.
 *
 * Even if a value gets modified above defaults will still get appended. Please
 * notice that Nextcloud ships already with sensible defaults and those policies
 * should require no modification at all for most use-cases.
 *
 * @since 17.0.0
 */
class FeaturePolicy extends \OCP\AppFramework\Http\EmptyFeaturePolicy
{
    protected $autoplayDomains = ['\'self\''];
    /** @var string[] of allowed domains that can access the camera */
    protected $cameraDomains = [];
    protected $fullscreenDomains = ['\'self\''];
    /** @var string[] of allowed domains that can use the geolocation of the device */
    protected $geolocationDomains = [];
    /** @var string[] of allowed domains that can use the microphone */
    protected $microphoneDomains = [];
    /** @var string[] of allowed domains that can use the payment API */
    protected $paymentDomains = [];
}
namespace OCP\AppFramework\Http\Template;

/**
 * Interface IMenuAction
 *
 * @since 14.0
 */
interface IMenuAction
{
    /**
     * @since 14.0.0
     * @return string
     */
    public function getId() : string;
    /**
     * @since 14.0.0
     * @return string
     */
    public function getLabel() : string;
    /**
     * @since 14.0.0
     * @return string
     */
    public function getLink() : string;
    /**
     * @since 14.0.0
     * @return int
     */
    public function getPriority() : int;
    /**
     * @since 14.0.0
     * @return string
     */
    public function render() : string;
}
/**
 * Class SimpleMenuAction
 *
 * @since 14.0.0
 */
class SimpleMenuAction implements \OCP\AppFramework\Http\Template\IMenuAction
{
    /**
     * SimpleMenuAction constructor.
     *
     * @param string $id
     * @param string $label
     * @param string $icon
     * @param string $link
     * @param int $priority
     * @param string $detail
     * @since 14.0.0
     */
    public function __construct(string $id, string $label, string $icon, string $link = '', int $priority = 100, string $detail = '')
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getId() : string
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getLabel() : string
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getIcon() : string
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getLink() : string
    {
    }
    /**
     * @return int
     * @since 14.0.0
     */
    public function getPriority() : int
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function render() : string
    {
    }
}
/**
 * Class LinkMenuAction
 *
 * @since 14.0.0
 */
class ExternalShareMenuAction extends \OCP\AppFramework\Http\Template\SimpleMenuAction
{
    /**
     * ExternalShareMenuAction constructor.
     *
     * @param string $label
     * @param string $icon
     * @param string $owner
     * @param string $displayname
     * @param string $shareName
     * @since 14.0.0
     */
    public function __construct(string $label, string $icon, string $owner, string $displayname, string $shareName)
    {
    }
    /**
     * @since 14.0.0
     */
    public function render() : string
    {
    }
}
/**
 * Class LinkMenuAction
 *
 * @since 14.0.0
 */
class LinkMenuAction extends \OCP\AppFramework\Http\Template\SimpleMenuAction
{
    /**
     * LinkMenuAction constructor.
     *
     * @param string $label
     * @param string $icon
     * @param string $link
     * @since 14.0.0
     */
    public function __construct(string $label, string $icon, string $link)
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function render() : string
    {
    }
}
namespace OCP\AppFramework\Http;

/**
 * Base class for responses. Also used to just send headers.
 *
 * It handles headers, HTTP status code, last modified and ETag.
 * @since 6.0.0
 */
class Response
{
    /**
     * @since 17.0.0
     */
    public function __construct()
    {
    }
    /**
     * Caches the response
     *
     * @param int $cacheSeconds amount of seconds the response is fresh, 0 to disable cache.
     * @param bool $public whether the page should be cached by public proxy. Usually should be false, unless this is a static resources.
     * @param bool $immutable whether browser should treat the resource as immutable and not ask the server for each page load if the resource changed.
     * @return $this
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function cacheFor(int $cacheSeconds, bool $public = false, bool $immutable = false)
    {
    }
    /**
     * Adds a new cookie to the response
     * @param string $name The name of the cookie
     * @param string $value The value of the cookie
     * @param \DateTime|null $expireDate Date on that the cookie should expire, if set
     * 									to null cookie will be considered as session
     * 									cookie.
     * @param string $sameSite The samesite value of the cookie. Defaults to Lax. Other possibilities are Strict or None
     * @return $this
     * @since 8.0.0
     */
    public function addCookie($name, $value, \DateTime $expireDate = null, $sameSite = 'Lax')
    {
    }
    /**
     * Set the specified cookies
     * @param array $cookies array('foo' => array('value' => 'bar', 'expire' => null))
     * @return $this
     * @since 8.0.0
     */
    public function setCookies(array $cookies)
    {
    }
    /**
     * Invalidates the specified cookie
     * @param string $name
     * @return $this
     * @since 8.0.0
     */
    public function invalidateCookie($name)
    {
    }
    /**
     * Invalidates the specified cookies
     * @param array $cookieNames array('foo', 'bar')
     * @return $this
     * @since 8.0.0
     */
    public function invalidateCookies(array $cookieNames)
    {
    }
    /**
     * Returns the cookies
     * @return array
     * @since 8.0.0
     */
    public function getCookies()
    {
    }
    /**
     * Adds a new header to the response that will be called before the render
     * function
     * @param string $name The name of the HTTP header
     * @param string $value The value, null will delete it
     * @return $this
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function addHeader($name, $value)
    {
    }
    /**
     * Set the headers
     * @param array $headers value header pairs
     * @return $this
     * @since 8.0.0
     */
    public function setHeaders(array $headers)
    {
    }
    /**
     * Returns the set headers
     * @return array the headers
     * @since 6.0.0
     */
    public function getHeaders()
    {
    }
    /**
     * By default renders no output
     * @return string
     * @since 6.0.0
     */
    public function render()
    {
    }
    /**
     * Set response status
     * @param int $status a HTTP status code, see also the STATUS constants
     * @return Response Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function setStatus($status)
    {
    }
    /**
     * Set a Content-Security-Policy
     * @param EmptyContentSecurityPolicy $csp Policy to set for the response object
     * @return $this
     * @since 8.1.0
     */
    public function setContentSecurityPolicy(\OCP\AppFramework\Http\EmptyContentSecurityPolicy $csp)
    {
    }
    /**
     * Get the currently used Content-Security-Policy
     * @return EmptyContentSecurityPolicy|null Used Content-Security-Policy or null if
     *                                    none specified.
     * @since 8.1.0
     */
    public function getContentSecurityPolicy()
    {
    }
    /**
     * @since 17.0.0
     */
    public function getFeaturePolicy() : \OCP\AppFramework\Http\EmptyFeaturePolicy
    {
    }
    /**
     * @since 17.0.0
     */
    public function setFeaturePolicy(\OCP\AppFramework\Http\EmptyFeaturePolicy $featurePolicy) : self
    {
    }
    /**
     * Get response status
     * @since 6.0.0
     */
    public function getStatus()
    {
    }
    /**
     * Get the ETag
     * @return string the etag
     * @since 6.0.0
     */
    public function getETag()
    {
    }
    /**
     * Get "last modified" date
     * @return \DateTime RFC2822 formatted last modified date
     * @since 6.0.0
     */
    public function getLastModified()
    {
    }
    /**
     * Set the ETag
     * @param string $ETag
     * @return Response Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function setETag($ETag)
    {
    }
    /**
     * Set "last modified" date
     * @param \DateTime $lastModified
     * @return Response Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function setLastModified($lastModified)
    {
    }
    /**
     * Marks the response as to throttle. Will be throttled when the
     * @BruteForceProtection annotation is added.
     *
     * @param array $metadata
     * @since 12.0.0
     */
    public function throttle(array $metadata = [])
    {
    }
    /**
     * Returns the throttle metadata, defaults to empty array
     *
     * @return array
     * @since 13.0.0
     */
    public function getThrottleMetadata()
    {
    }
    /**
     * Whether the current response is throttled.
     *
     * @since 12.0.0
     */
    public function isThrottled()
    {
    }
}
/**
 * Response for a normal template
 * @since 6.0.0
 */
class TemplateResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_GUEST = 'guest';
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_BLANK = '';
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_BASE = 'base';
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_USER = 'user';
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_ERROR = 'error';
    /**
     * @since 20.0.0
     */
    public const RENDER_AS_PUBLIC = 'public';
    /**
     * @deprecated 20.0.0 use OCP\AppFramework\Http\Events\BeforeTemplateRenderedEvent
     */
    public const EVENT_LOAD_ADDITIONAL_SCRIPTS = self::class . '::loadAdditionalScripts';
    /**
     * @deprecated 20.0.0 use OCP\AppFramework\Http\Events\BeforeTemplateRenderedEvent
     */
    public const EVENT_LOAD_ADDITIONAL_SCRIPTS_LOGGEDIN = self::class . '::loadAdditionalScriptsLoggedIn';
    /**
     * name of the template
     * @var string
     */
    protected $templateName;
    /**
     * parameters
     * @var array
     */
    protected $params;
    /**
     * rendering type (admin, user, blank)
     * @var string
     */
    protected $renderAs;
    /**
     * app name
     * @var string
     */
    protected $appName;
    /**
     * constructor of TemplateResponse
     * @param string $appName the name of the app to load the template from
     * @param string $templateName the name of the template
     * @param array $params an array of parameters which should be passed to the
     * template
     * @param string $renderAs how the page should be rendered, defaults to user
     * @since 6.0.0 - parameters $params and $renderAs were added in 7.0.0
     */
    public function __construct($appName, $templateName, array $params = [], $renderAs = self::RENDER_AS_USER)
    {
    }
    /**
     * Sets template parameters
     * @param array $params an array with key => value structure which sets template
     *                      variables
     * @return TemplateResponse Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function setParams(array $params)
    {
    }
    /**
     * Used for accessing the set parameters
     * @return array the params
     * @since 6.0.0
     */
    public function getParams()
    {
    }
    /**
     * @return string the app id of the used template
     * @since 25.0.0
     */
    public function getApp() : string
    {
    }
    /**
     * Used for accessing the name of the set template
     * @return string the name of the used template
     * @since 6.0.0
     */
    public function getTemplateName()
    {
    }
    /**
     * Sets the template page
     * @param string $renderAs admin, user or blank. Admin also prints the admin
     *                         settings header and footer, user renders the normal
     *                         normal page including footer and header and blank
     *                         just renders the plain template
     * @return TemplateResponse Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function renderAs($renderAs)
    {
    }
    /**
     * Returns the set renderAs
     * @return string the renderAs value
     * @since 6.0.0
     */
    public function getRenderAs()
    {
    }
    /**
     * Returns the rendered html
     * @return string the rendered html
     * @since 6.0.0
     */
    public function render()
    {
    }
}
namespace OCP\AppFramework\Http\Template;

/**
 * Class PublicTemplateResponse
 *
 * @since 14.0.0
 */
class PublicTemplateResponse extends \OCP\AppFramework\Http\TemplateResponse
{
    /**
     * PublicTemplateResponse constructor.
     *
     * @param string $appName
     * @param string $templateName
     * @param array $params
     * @since 14.0.0
     */
    public function __construct(string $appName, string $templateName, array $params = [])
    {
    }
    /**
     * @param string $title
     * @since 14.0.0
     */
    public function setHeaderTitle(string $title)
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getHeaderTitle() : string
    {
    }
    /**
     * @param string $details
     * @since 14.0.0
     */
    public function setHeaderDetails(string $details)
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function getHeaderDetails() : string
    {
    }
    /**
     * @param array $actions
     * @since 14.0.0
     * @throws InvalidArgumentException
     */
    public function setHeaderActions(array $actions)
    {
    }
    /**
     * @return IMenuAction
     * @since 14.0.0
     * @throws \Exception
     */
    public function getPrimaryAction() : \OCP\AppFramework\Http\Template\IMenuAction
    {
    }
    /**
     * @return int
     * @since 14.0.0
     */
    public function getActionCount() : int
    {
    }
    /**
     * @return IMenuAction[]
     * @since 14.0.0
     */
    public function getOtherActions() : array
    {
    }
    /**
     * @since 14.0.0
     */
    public function setFooterVisible(bool $visible = false)
    {
    }
    /**
     * @since 14.0.0
     */
    public function getFooterVisible() : bool
    {
    }
    /**
     * @return string
     * @since 14.0.0
     */
    public function render() : string
    {
    }
}
namespace OCP\AppFramework\Http\Attribute;

/**
 * Attribute for controller methods that want to limit the times a logged-in
 * user can call the endpoint in a given time period.
 *
 * @since 27.0.0
 */
abstract class ARateLimit
{
    /**
     * @since 27.0.0
     */
    public function __construct(protected int $limit, protected int $period)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getLimit() : int
    {
    }
    /**
     * @since 27.0.0
     */
    public function getPeriod() : int
    {
    }
}
/**
 * Attribute for controller methods that want to limit the times a not logged-in
 * guest can call the endpoint in a given time period.
 *
 * @since 27.0.0
 */
#[\Attribute(\Attribute::TARGET_METHOD)]
class AnonRateLimit extends \OCP\AppFramework\Http\Attribute\ARateLimit
{
}
/**
 * Attribute for controller methods that should be only accessible with
 * full admin or partial admin permissions.
 *
 * @since 27.0.0
 */
#[\Attribute(\Attribute::TARGET_METHOD | \Attribute::IS_REPEATABLE)]
class AuthorizedAdminSetting
{
    /**
     * @param class-string<IDelegatedSettings> $settings A settings section the user needs to be able to access
     * @since 27.0.0
     */
    public function __construct(protected string $settings)
    {
    }
    /**
     *
     * @return class-string<IDelegatedSettings>
     * @since 27.0.0
     */
    public function getSettings() : string
    {
    }
}
/**
 * Attribute for controller methods that want to protect passwords, keys, tokens
 * or other data against brute force
 *
 * @since 27.0.0
 */
#[\Attribute(\Attribute::TARGET_METHOD | \Attribute::IS_REPEATABLE)]
class BruteForceProtection
{
    /**
     * @since 27.0.0
     */
    public function __construct(protected string $action)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getAction() : string
    {
    }
}
/**
 * Attribute for controller methods that can also be accessed by not logged-in user
 *
 * @since 27.0.0
 */
#[\Attribute]
class CORS
{
}
/**
 * Attribute for controller methods that can be accessed by any logged-in user
 *
 * @since 27.0.0
 */
#[\Attribute]
class NoAdminRequired
{
}
/**
 * Attribute for controller methods that are not CSRF protected
 *
 * @since 27.0.0
 */
#[\Attribute]
class NoCSRFRequired
{
}
/**
 * Attribute for controller methods that require the password to be confirmed with in the last 30 minutes
 *
 * @since 27.0.0
 */
#[\Attribute]
class PasswordConfirmationRequired
{
}
/**
 * Attribute for controller methods that can also be accessed by not logged-in user
 *
 * @since 27.0.0
 */
#[\Attribute]
class PublicPage
{
}
/**
 * Attribute for controller methods that require strict cookies
 *
 * @since 27.0.0
 */
#[\Attribute]
class StrictCookiesRequired
{
}
/**
 * Attribute for controller methods that can be accessed by sub-admins
 *
 * @since 27.0.0
 */
#[\Attribute]
class SubAdminRequired
{
}
/**
 * Attribute for controller methods that need to read/write PHP session data
 *
 * @since 26.0.0
 */
#[\Attribute]
class UseSession
{
}
/**
 * Attribute for controller methods that want to limit the times a logged-in
 * user can call the endpoint in a given time period.
 *
 * @since 27.0.0
 */
#[\Attribute(\Attribute::TARGET_METHOD)]
class UserRateLimit extends \OCP\AppFramework\Http\Attribute\ARateLimit
{
}
namespace OCP\AppFramework\Http;

/**
 * Interface ICallbackResponse
 *
 * @since 8.1.0
 */
interface ICallbackResponse
{
    /**
     * Outputs the content that should be printed
     *
     * @param IOutput $output a small wrapper that handles output
     * @since 8.1.0
     */
    public function callback(\OCP\AppFramework\Http\IOutput $output);
}
/**
 * Very thin wrapper class to make output testable
 * @since 8.1.0
 */
interface IOutput
{
    /**
     * @param string $out
     * @since 8.1.0
     */
    public function setOutput($out);
    /**
     * @param string|resource $path or file handle
     *
     * @return bool false if an error occurred
     * @since 8.1.0
     */
    public function setReadfile($path);
    /**
     * @param string $header
     * @since 8.1.0
     */
    public function setHeader($header);
    /**
     * @return int returns the current http response code
     * @since 8.1.0
     */
    public function getHttpResponseCode();
    /**
     * @param int $code sets the http status code
     * @since 8.1.0
     */
    public function setHttpResponseCode($code);
    /**
     * @param string $name
     * @param string $value
     * @param int $expire
     * @param string $path
     * @param string $domain
     * @param bool $secure
     * @param bool $httpOnly
     * @param string $sameSite (added in 20)
     * @since 8.1.0
     */
    public function setCookie($name, $value, $expire, $path, $domain, $secure, $httpOnly, $sameSite = 'Lax');
}
/**
 * Class EmptyContentSecurityPolicy is a simple helper which allows applications
 * to modify the Content-Security-Policy sent by Nexcloud. Per default the policy
 * is forbidding everything.
 *
 * As alternative with sane exemptions look at ContentSecurityPolicy
 *
 * @see \OCP\AppFramework\Http\ContentSecurityPolicy
 * @since 9.0.0
 */
class EmptyContentSecurityPolicy
{
    /** @var bool Whether inline JS snippets are allowed */
    protected $inlineScriptAllowed = null;
    /** @var string Whether JS nonces should be used */
    protected $useJsNonce = null;
    /** @var bool Whether strict-dynamic should be used */
    protected $strictDynamicAllowed = null;
    /**
     * @var bool Whether eval in JS scripts is allowed
     * TODO: Disallow per default
     * @link https://github.com/owncloud/core/issues/11925
     */
    protected $evalScriptAllowed = null;
    /** @var array Domains from which scripts can get loaded */
    protected $allowedScriptDomains = null;
    /**
     * @var bool Whether inline CSS is allowed
     * TODO: Disallow per default
     * @link https://github.com/owncloud/core/issues/13458
     */
    protected $inlineStyleAllowed = null;
    /** @var array Domains from which CSS can get loaded */
    protected $allowedStyleDomains = null;
    /** @var array Domains from which images can get loaded */
    protected $allowedImageDomains = null;
    /** @var array Domains to which connections can be done */
    protected $allowedConnectDomains = null;
    /** @var array Domains from which media elements can be loaded */
    protected $allowedMediaDomains = null;
    /** @var array Domains from which object elements can be loaded */
    protected $allowedObjectDomains = null;
    /** @var array Domains from which iframes can be loaded */
    protected $allowedFrameDomains = null;
    /** @var array Domains from which fonts can be loaded */
    protected $allowedFontDomains = null;
    /** @var array Domains from which web-workers and nested browsing content can load elements */
    protected $allowedChildSrcDomains = null;
    /** @var array Domains which can embed this Nextcloud instance */
    protected $allowedFrameAncestors = null;
    /** @var array Domains from which web-workers can be loaded */
    protected $allowedWorkerSrcDomains = null;
    /** @var array Domains which can be used as target for forms */
    protected $allowedFormActionDomains = null;
    /** @var array Locations to report violations to */
    protected $reportTo = null;
    /**
     * Whether inline JavaScript snippets are allowed or forbidden
     * @param bool $state
     * @return $this
     * @since 8.1.0
     * @deprecated 10.0 CSP tokens are now used
     */
    public function allowInlineScript($state = false)
    {
    }
    /**
     * @param bool $state
     * @return EmptyContentSecurityPolicy
     * @since 24.0.0
     */
    public function useStrictDynamic(bool $state = false) : self
    {
    }
    /**
     * Use the according JS nonce
     * This method is only for CSPMiddleware, custom values are ignored in mergePolicies of ContentSecurityPolicyManager
     *
     * @param string $nonce
     * @return $this
     * @since 11.0.0
     */
    public function useJsNonce($nonce)
    {
    }
    /**
     * Whether eval in JavaScript is allowed or forbidden
     * @param bool $state
     * @return $this
     * @since 8.1.0
     * @deprecated Eval should not be used anymore. Please update your scripts. This function will stop functioning in a future version of Nextcloud.
     */
    public function allowEvalScript($state = true)
    {
    }
    /**
     * Allows to execute JavaScript files from a specific domain. Use * to
     * allow JavaScript from all domains.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedScriptDomain($domain)
    {
    }
    /**
     * Remove the specified allowed script domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowScriptDomain($domain)
    {
    }
    /**
     * Whether inline CSS snippets are allowed or forbidden
     * @param bool $state
     * @return $this
     * @since 8.1.0
     */
    public function allowInlineStyle($state = true)
    {
    }
    /**
     * Allows to execute CSS files from a specific domain. Use * to allow
     * CSS from all domains.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedStyleDomain($domain)
    {
    }
    /**
     * Remove the specified allowed style domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowStyleDomain($domain)
    {
    }
    /**
     * Allows using fonts from a specific domain. Use * to allow
     * fonts from all domains.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedFontDomain($domain)
    {
    }
    /**
     * Remove the specified allowed font domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowFontDomain($domain)
    {
    }
    /**
     * Allows embedding images from a specific domain. Use * to allow
     * images from all domains.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedImageDomain($domain)
    {
    }
    /**
     * Remove the specified allowed image domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowImageDomain($domain)
    {
    }
    /**
     * To which remote domains the JS connect to.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedConnectDomain($domain)
    {
    }
    /**
     * Remove the specified allowed connect domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowConnectDomain($domain)
    {
    }
    /**
     * From which domains media elements can be embedded.
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedMediaDomain($domain)
    {
    }
    /**
     * Remove the specified allowed media domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowMediaDomain($domain)
    {
    }
    /**
     * From which domains objects such as <object>, <embed> or <applet> are executed
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedObjectDomain($domain)
    {
    }
    /**
     * Remove the specified allowed object domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowObjectDomain($domain)
    {
    }
    /**
     * Which domains can be embedded in an iframe
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     */
    public function addAllowedFrameDomain($domain)
    {
    }
    /**
     * Remove the specified allowed frame domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     */
    public function disallowFrameDomain($domain)
    {
    }
    /**
     * Domains from which web-workers and nested browsing content can load elements
     * @param string $domain Domain to whitelist. Any passed value needs to be properly sanitized.
     * @return $this
     * @since 8.1.0
     * @deprecated 15.0.0 use addAllowedWorkerSrcDomains or addAllowedFrameDomain
     */
    public function addAllowedChildSrcDomain($domain)
    {
    }
    /**
     * Remove the specified allowed child src domain from the allowed domains.
     *
     * @param string $domain
     * @return $this
     * @since 8.1.0
     * @deprecated 15.0.0 use the WorkerSrcDomains or FrameDomain
     */
    public function disallowChildSrcDomain($domain)
    {
    }
    /**
     * Domains which can embed an iFrame of the Nextcloud instance
     *
     * @param string $domain
     * @return $this
     * @since 13.0.0
     */
    public function addAllowedFrameAncestorDomain($domain)
    {
    }
    /**
     * Domains which can embed an iFrame of the Nextcloud instance
     *
     * @param string $domain
     * @return $this
     * @since 13.0.0
     */
    public function disallowFrameAncestorDomain($domain)
    {
    }
    /**
     * Domain from which workers can be loaded
     *
     * @param string $domain
     * @return $this
     * @since 15.0.0
     */
    public function addAllowedWorkerSrcDomain(string $domain)
    {
    }
    /**
     * Remove domain from which workers can be loaded
     *
     * @param string $domain
     * @return $this
     * @since 15.0.0
     */
    public function disallowWorkerSrcDomain(string $domain)
    {
    }
    /**
     * Domain to where forms can submit
     *
     * @since 17.0.0
     *
     * @return $this
     */
    public function addAllowedFormActionDomain(string $domain)
    {
    }
    /**
     * Remove domain to where forms can submit
     *
     * @return $this
     * @since 17.0.0
     */
    public function disallowFormActionDomain(string $domain)
    {
    }
    /**
     * Add location to report CSP violations to
     *
     * @param string $location
     * @return $this
     * @since 15.0.0
     */
    public function addReportTo(string $location)
    {
    }
    /**
     * Get the generated Content-Security-Policy as a string
     * @return string
     * @since 8.1.0
     */
    public function buildPolicy()
    {
    }
}
/**
 * Class ContentSecurityPolicy is a simple helper which allows applications to
 * modify the Content-Security-Policy sent by Nextcloud. Per default only JavaScript,
 * stylesheets, images, fonts, media and connections from the same domain
 * ('self') are allowed.
 *
 * Even if a value gets modified above defaults will still get appended. Please
 * notice that Nextcloud ships already with sensible defaults and those policies
 * should require no modification at all for most use-cases.
 *
 * This class allows unsafe-inline of CSS.
 *
 * @since 8.1.0
 */
class ContentSecurityPolicy extends \OCP\AppFramework\Http\EmptyContentSecurityPolicy
{
    /** @var bool Whether inline JS snippets are allowed */
    protected $inlineScriptAllowed = false;
    /** @var bool Whether eval in JS scripts is allowed */
    protected $evalScriptAllowed = false;
    /** @var bool Whether strict-dynamic should be set */
    protected $strictDynamicAllowed = false;
    /** @var array Domains from which scripts can get loaded */
    protected $allowedScriptDomains = ['\'self\''];
    /**
     * @var bool Whether inline CSS is allowed
     * TODO: Disallow per default
     * @link https://github.com/owncloud/core/issues/13458
     */
    protected $inlineStyleAllowed = true;
    /** @var array Domains from which CSS can get loaded */
    protected $allowedStyleDomains = ['\'self\''];
    /** @var array Domains from which images can get loaded */
    protected $allowedImageDomains = ['\'self\'', 'data:', 'blob:'];
    /** @var array Domains to which connections can be done */
    protected $allowedConnectDomains = ['\'self\''];
    /** @var array Domains from which media elements can be loaded */
    protected $allowedMediaDomains = ['\'self\''];
    /** @var array Domains from which object elements can be loaded */
    protected $allowedObjectDomains = [];
    /** @var array Domains from which iframes can be loaded */
    protected $allowedFrameDomains = [];
    /** @var array Domains from which fonts can be loaded */
    protected $allowedFontDomains = ['\'self\'', 'data:'];
    /** @var array Domains from which web-workers and nested browsing content can load elements */
    protected $allowedChildSrcDomains = [];
    /** @var array Domains which can embed this Nextcloud instance */
    protected $allowedFrameAncestors = ['\'self\''];
    /** @var array Domains from which web-workers can be loaded */
    protected $allowedWorkerSrcDomains = [];
    /** @var array Domains which can be used as target for forms */
    protected $allowedFormActionDomains = ['\'self\''];
    /** @var array Locations to report violations to */
    protected $reportTo = [];
}
/**
 * Class DataDisplayResponse
 *
 * @since 8.1.0
 */
class DataDisplayResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * response data
     * @var string
     */
    protected $data;
    /**
     * @param string $data the data to display
     * @param int $statusCode the Http status code, defaults to 200
     * @param array $headers additional key value based headers
     * @since 8.1.0
     */
    public function __construct($data = '', $statusCode = \OCP\AppFramework\Http::STATUS_OK, $headers = [])
    {
    }
    /**
     * Outputs data. No processing is done.
     * @return string
     * @since 8.1.0
     */
    public function render()
    {
    }
    /**
     * Sets values in the data
     * @param string $data the data to display
     * @return DataDisplayResponse Reference to this object
     * @since 8.1.0
     */
    public function setData($data)
    {
    }
    /**
     * Used to get the set parameters
     * @return string the data
     * @since 8.1.0
     */
    public function getData()
    {
    }
}
/**
 * Prompts the user to download the a file
 * @since 7.0.0
 */
class DownloadResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * Creates a response that prompts the user to download the file
     * @param string $filename the name that the downloaded file should have
     * @param string $contentType the mimetype that the downloaded file should have
     * @since 7.0.0
     */
    public function __construct(string $filename, string $contentType)
    {
    }
}
/**
 * Class DataDownloadResponse
 *
 * @since 8.0.0
 */
class DataDownloadResponse extends \OCP\AppFramework\Http\DownloadResponse
{
    /**
     * Creates a response that prompts the user to download the text
     * @param string $data text to be downloaded
     * @param string $filename the name that the downloaded file should have
     * @param string $contentType the mimetype that the downloaded file should have
     * @since 8.0.0
     */
    public function __construct($data, $filename, $contentType)
    {
    }
    /**
     * @param string $data
     * @since 8.0.0
     */
    public function setData($data)
    {
    }
    /**
     * @return string
     * @since 8.0.0
     */
    public function render()
    {
    }
}
/**
 * A generic DataResponse class that is used to return generic data responses
 * for responders to transform
 * @since 8.0.0
 */
class DataResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * response data
     * @var array|int|float|string|bool|object
     */
    protected $data;
    /**
     * @param array|int|float|string|bool|object $data the object or array that should be transformed
     * @param int $statusCode the Http status code, defaults to 200
     * @param array $headers additional key value based headers
     * @since 8.0.0
     */
    public function __construct($data = [], $statusCode = \OCP\AppFramework\Http::STATUS_OK, array $headers = [])
    {
    }
    /**
     * Sets values in the data json array
     * @param array|int|float|string|object $data an array or object which will be transformed
     * @return DataResponse Reference to this object
     * @since 8.0.0
     */
    public function setData($data)
    {
    }
    /**
     * Used to get the set parameters
     * @return array|int|float|string|bool|object the data
     * @since 8.0.0
     */
    public function getData()
    {
    }
}
/**
 * Class FileDisplayResponse
 *
 * @since 11.0.0
 */
class FileDisplayResponse extends \OCP\AppFramework\Http\Response implements \OCP\AppFramework\Http\ICallbackResponse
{
    /**
     * FileDisplayResponse constructor.
     *
     * @param \OCP\Files\File|\OCP\Files\SimpleFS\ISimpleFile $file
     * @param int $statusCode
     * @param array $headers
     * @since 11.0.0
     */
    public function __construct($file, $statusCode = \OCP\AppFramework\Http::STATUS_OK, $headers = [])
    {
    }
    /**
     * @param IOutput $output
     * @since 11.0.0
     */
    public function callback(\OCP\AppFramework\Http\IOutput $output)
    {
    }
}
/**
 * A renderer for JSON calls
 * @since 6.0.0
 */
class JSONResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * response data
     * @var array|object
     */
    protected $data;
    /**
     * constructor of JSONResponse
     * @param array|object $data the object or array that should be transformed
     * @param int $statusCode the Http status code, defaults to 200
     * @since 6.0.0
     */
    public function __construct($data = [], $statusCode = \OCP\AppFramework\Http::STATUS_OK)
    {
    }
    /**
     * Returns the rendered json
     * @return string the rendered json
     * @since 6.0.0
     * @throws \Exception If data could not get encoded
     */
    public function render()
    {
    }
    /**
     * Sets values in the data json array
     * @param array|object $data an array or object which will be transformed
     *                             to JSON
     * @return JSONResponse Reference to this object
     * @since 6.0.0 - return value was added in 7.0.0
     */
    public function setData($data)
    {
    }
    /**
     * Used to get the set parameters
     * @return array the data
     * @since 6.0.0
     */
    public function getData()
    {
    }
}
/**
 * A generic 404 response showing an 404 error page as well to the end-user
 * @since 8.1.0
 */
class NotFoundResponse extends \OCP\AppFramework\Http\TemplateResponse
{
    /**
     * @since 8.1.0
     */
    public function __construct()
    {
    }
}
/**
 * Redirects to a different URL
 * @since 7.0.0
 */
class RedirectResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * Creates a response that redirects to a url
     * @param string $redirectURL the url to redirect to
     * @since 7.0.0
     */
    public function __construct($redirectURL)
    {
    }
    /**
     * @return string the url to redirect
     * @since 7.0.0
     */
    public function getRedirectURL()
    {
    }
}
/**
 * Redirects to the default app
 *
 * @since 16.0.0
 * @deprecated 23.0.0 Use RedirectResponse() with IURLGenerator::linkToDefaultPageUrl() instead
 */
class RedirectToDefaultAppResponse extends \OCP\AppFramework\Http\RedirectResponse
{
    /**
     * Creates a response that redirects to the default app
     *
     * @since 16.0.0
     * @deprecated 23.0.0 Use RedirectResponse() with IURLGenerator::linkToDefaultPageUrl() instead
     */
    public function __construct()
    {
    }
}
/**
 * A template response that does not emit the loadAdditionalScripts events.
 *
 * This is useful for pages that are authenticated but do not yet show the
 * full nextcloud UI. Like the 2FA page, or the grant page in the login flow.
 *
 * @since 16.0.0
 */
class StandaloneTemplateResponse extends \OCP\AppFramework\Http\TemplateResponse
{
}
/**
 * Class StreamResponse
 *
 * @since 8.1.0
 */
class StreamResponse extends \OCP\AppFramework\Http\Response implements \OCP\AppFramework\Http\ICallbackResponse
{
    /**
     * @param string|resource $filePath the path to the file or a file handle which should be streamed
     * @since 8.1.0
     */
    public function __construct($filePath)
    {
    }
    /**
     * Streams the file using readfile
     *
     * @param IOutput $output a small wrapper that handles output
     * @since 8.1.0
     */
    public function callback(\OCP\AppFramework\Http\IOutput $output)
    {
    }
}
/**
 * Class StrictContentSecurityPolicy is a simple helper which allows applications to
 * modify the Content-Security-Policy sent by Nextcloud. Per default only JavaScript,
 * stylesheets, images, fonts, media and connections from the same domain
 * ('self') are allowed.
 *
 * Even if a value gets modified above defaults will still get appended. Please
 * notice that Nextcloud ships already with sensible defaults and those policies
 * should require no modification at all for most use-cases.
 *
 * This class represents out strictest defaults. They may get change from release
 * to release if more strict CSP directives become available.
 *
 * @since 14.0.0
 * @deprecated 17.0.0
 */
class StrictContentSecurityPolicy extends \OCP\AppFramework\Http\EmptyContentSecurityPolicy
{
    /** @var bool Whether inline JS snippets are allowed */
    protected $inlineScriptAllowed = false;
    /** @var bool Whether eval in JS scripts is allowed */
    protected $evalScriptAllowed = false;
    /** @var array Domains from which scripts can get loaded */
    protected $allowedScriptDomains = ['\'self\''];
    /** @var bool Whether inline CSS is allowed */
    protected $inlineStyleAllowed = false;
    /** @var array Domains from which CSS can get loaded */
    protected $allowedStyleDomains = ['\'self\''];
    /** @var array Domains from which images can get loaded */
    protected $allowedImageDomains = ['\'self\'', 'data:', 'blob:'];
    /** @var array Domains to which connections can be done */
    protected $allowedConnectDomains = ['\'self\''];
    /** @var array Domains from which media elements can be loaded */
    protected $allowedMediaDomains = ['\'self\''];
    /** @var array Domains from which object elements can be loaded */
    protected $allowedObjectDomains = [];
    /** @var array Domains from which iframes can be loaded */
    protected $allowedFrameDomains = [];
    /** @var array Domains from which fonts can be loaded */
    protected $allowedFontDomains = ['\'self\''];
    /** @var array Domains from which web-workers and nested browsing content can load elements */
    protected $allowedChildSrcDomains = [];
    /** @var array Domains which can embed this Nextcloud instance */
    protected $allowedFrameAncestors = [];
}
/**
 * Class StrictInlineContentSecurityPolicy is a simple helper which allows applications to
 * modify the Content-Security-Policy sent by Nextcloud. Per default only JavaScript,
 * stylesheets, images, fonts, media and connections from the same domain
 * ('self') are allowed.
 *
 * Even if a value gets modified above defaults will still get appended. Please
 * notice that Nextcloud ships already with sensible defaults and those policies
 * should require no modification at all for most use-cases.
 *
 * This is a temp helper class from the default ContentSecurityPolicy to allow slow
 * migration to a stricter CSP. This does not allow unsafe eval.
 *
 * @since 14.0.0
 * @deprecated 17.0.0
 */
class StrictEvalContentSecurityPolicy extends \OCP\AppFramework\Http\ContentSecurityPolicy
{
    /**
     * @since 14.0.0
     */
    public function __construct()
    {
    }
}
/**
 * Class StrictInlineContentSecurityPolicy is a simple helper which allows applications to
 * modify the Content-Security-Policy sent by Nextcloud. Per default only JavaScript,
 * stylesheets, images, fonts, media and connections from the same domain
 * ('self') are allowed.
 *
 * Even if a value gets modified above defaults will still get appended. Please
 * notice that Nextcloud ships already with sensible defaults and those policies
 * should require no modification at all for most use-cases.
 *
 * This is a temp helper class from the default ContentSecurityPolicy to allow slow
 * migration to a stricter CSP. This does not allow inline styles.
 *
 * @since 14.0.0
 * @deprecated 17.0.0
 */
class StrictInlineContentSecurityPolicy extends \OCP\AppFramework\Http\ContentSecurityPolicy
{
    /**
     * @since 14.0.0
     */
    public function __construct()
    {
    }
}
/**
 * A renderer for text responses
 * @since 22.0.0
 */
class TextPlainResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * constructor of TextPlainResponse
     * @param string $text The text body
     * @param int $statusCode the Http status code, defaults to 200
     * @since 22.0.0
     */
    public function __construct(string $text = '', int $statusCode = \OCP\AppFramework\Http::STATUS_OK)
    {
    }
    /**
     * Returns the text
     * @return string
     * @since 22.0.0
     * @throws \Exception If data could not get encoded
     */
    public function render() : string
    {
    }
}
/**
 * A generic 429 response showing an 404 error page as well to the end-user
 * @since 19.0.0
 */
class TooManyRequestsResponse extends \OCP\AppFramework\Http\Response
{
    /**
     * @since 19.0.0
     */
    public function __construct()
    {
    }
    /**
     * @return string
     * @since 19.0.0
     */
    public function render()
    {
    }
}
/**
 * Public library to send several files in one zip archive.
 *
 * @since 15.0.0
 */
class ZipResponse extends \OCP\AppFramework\Http\Response implements \OCP\AppFramework\Http\ICallbackResponse
{
    /**
     * @since 15.0.0
     */
    public function __construct(\OCP\IRequest $request, string $name = 'output')
    {
    }
    /**
     * @since 15.0.0
     */
    public function addResource($r, string $internalName, int $size, int $time = -1)
    {
    }
    /**
     * @since 15.0.0
     */
    public function callback(\OCP\AppFramework\Http\IOutput $output)
    {
    }
}
namespace OCP\AppFramework\OCS;

/**
 * Class OCSException
 *
 * @since 9.1.0
 */
class OCSException extends \Exception
{
}
/**
 * Class OCSBadRequestException
 *
 * @since 9.1.0
 */
class OCSBadRequestException extends \OCP\AppFramework\OCS\OCSException
{
    /**
     * OCSBadRequestException constructor.
     *
     * @param string $message
     * @param Exception|null $previous
     * @since 9.1.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Class OCSForbiddenException
 *
 * @since 9.1.0
 */
class OCSForbiddenException extends \OCP\AppFramework\OCS\OCSException
{
    /**
     * OCSForbiddenException constructor.
     *
     * @param string $message
     * @param Exception|null $previous
     * @since 9.1.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Class OCSNotFoundException
 *
 * @since 9.1.0
 */
class OCSNotFoundException extends \OCP\AppFramework\OCS\OCSException
{
    /**
     * OCSNotFoundException constructor.
     *
     * @param string $message
     * @param Exception|null $previous
     * @since 9.1.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
namespace OCP\AppFramework;

/**
 * Class QueryException
 *
 * The class extends `ContainerExceptionInterface` since 20.0.0
 *
 * @since 8.1.0
 * @deprecated 20.0.0 catch \Psr\Container\ContainerExceptionInterface
 */
class QueryException extends \Exception implements \Psr\Container\ContainerExceptionInterface
{
}
namespace OCP\AppFramework\Services;

/**
 * Wrapper for AppConfig for the AppFramework
 *
 * @since 20.0.0
 */
interface IAppConfig
{
    /**
     * Get all keys stored for this app
     *
     * @return string[] the keys stored for the app
     * @since 20.0.0
     */
    public function getAppKeys() : array;
    /**
     * Writes a new app wide value
     *
     * @param string $key the key of the value, under which will be saved
     * @param string $value the value that should be stored
     * @return void
     * @since 20.0.0
     */
    public function setAppValue(string $key, string $value) : void;
    /**
     * Looks up an app wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @param string $default the default value to be returned if the value isn't set
     * @return string the saved value
     * @since 20.0.0
     */
    public function getAppValue(string $key, string $default = '') : string;
    /**
     * Delete an app wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @return void
     * @since 20.0.0
     */
    public function deleteAppValue(string $key) : void;
    /**
     * Removes all keys in appconfig belonging to the app
     *
     * @return void
     * @since 20.0.0
     */
    public function deleteAppValues() : void;
    /**
     * Set a user defined value
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $key the key under which the value is being stored
     * @param string $value the value that you want to store
     * @param string $preCondition only update if the config value was previously the value passed as $preCondition
     * @throws \OCP\PreConditionNotMetException if a precondition is specified and is not met
     * @throws \UnexpectedValueException when trying to store an unexpected value
     * @since 20.0.0
     */
    public function setUserValue(string $userId, string $key, string $value, ?string $preCondition = null) : void;
    /**
     * Shortcut for getting a user defined value
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $key the key under which the value is being stored
     * @param mixed $default the default value to be returned if the value isn't set
     * @return string
     * @since 20.0.0
     */
    public function getUserValue(string $userId, string $key, string $default = '') : string;
    /**
     * Delete a user value
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $key the key under which the value is being stored
     * @since 20.0.0
     */
    public function deleteUserValue(string $userId, string $key) : void;
}
/**
 * @since 20.0.0
 */
interface IInitialState
{
    /**
     * Allows an app to provide its initial state to the template system.
     * Use this if you know your initial state sill be used for example if
     * you are in the render function of you controller.
     *
     * @since 20.0.0
     *
     * @param string $key
     * @param bool|int|float|string|array|\JsonSerializable $data
     */
    public function provideInitialState(string $key, $data) : void;
    /**
     * Allows an app to provide its initial state via a lazy method.
     * This will call the closure when the template is being generated.
     * Use this if your app is injected into pages. Since then the render method
     * is not called explicitly. But we do not want to load the state on webdav
     * requests for example.
     *
     * @since 20.0.0
     *
     * @param string $key
     * @param Closure $closure returns a primitive or an object that implements JsonSerializable
     * @psalm-param Closure():bool|Closure():int|Closure():float|Closure():string|Closure():\JsonSerializable $closure
     */
    public function provideLazyInitialState(string $key, \Closure $closure) : void;
}
/**
 * @since 21.0.0
 */
abstract class InitialStateProvider implements \JsonSerializable
{
    /**
     * @since 21.0.0
     */
    public abstract function getKey() : string;
    /**
     * @since 21.0.0
     */
    public abstract function getData();
    /**
     * @since 21.0.0
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public final function jsonSerialize()
    {
    }
}
namespace OCP\AppFramework\Utility;

/**
 * Interface ControllerMethodReflector
 *
 * Reads and parses annotations from doc comments
 *
 * @since 8.0.0
 * @deprecated 22.0.0 will be obsolete with native attributes in PHP8
 * @see https://help.nextcloud.com/t/how-should-we-use-php8-attributes/104278
 */
interface IControllerMethodReflector
{
    /**
     * @param object $object an object or classname
     * @param string $method the method which we want to inspect
     * @return void
     * @since 8.0.0
     * @deprecated 17.0.0 Reflect should not be called multiple times and only be used internally. This will be removed in Nextcloud 18
     */
    public function reflect($object, string $method);
    /**
     * Inspects the PHPDoc parameters for types
     *
     * @param string $parameter the parameter whose type comments should be
     * parsed
     * @return string|null type in the type parameters (@param int $something)
     * would return int or null if not existing
     * @since 8.0.0
     * @deprecated 22.0.0 this method is only used internally
     */
    public function getType(string $parameter);
    /**
     * @return array the arguments of the method with key => default value
     * @since 8.0.0
     * @deprecated 22.0.0 this method is only used internally
     */
    public function getParameters() : array;
    /**
     * Check if a method contains an annotation
     *
     * @param string $name the name of the annotation
     * @return bool true if the annotation is found
     * @since 8.0.0
     * @deprecated 22.0.0 will be obsolete with native attributes in PHP8
     * @see https://help.nextcloud.com/t/how-should-we-use-php8-attributes/104278
     */
    public function hasAnnotation(string $name) : bool;
}
/**
 * Use this to get a timestamp or DateTime object in code to remain testable
 *
 * @since 8.0.0
 * @since 26.0.0 Extends the \Psr\Clock\ClockInterface interface
 * @ref https://www.php-fig.org/psr/psr-20/#21-clockinterface
 */
interface ITimeFactory extends \Psr\Clock\ClockInterface
{
    /**
     * @return int the result of a call to time()
     * @since 8.0.0
     * @deprecated 26.0.0 {@see ITimeFactory::now()}
     */
    public function getTime() : int;
    /**
     * @param string $time
     * @param \DateTimeZone|null $timezone
     * @return \DateTime
     * @since 15.0.0
     * @deprecated 26.0.0 {@see ITimeFactory::now()}
     */
    public function getDateTime(string $time = 'now', \DateTimeZone $timezone = null) : \DateTime;
    /**
     * @param \DateTimeZone $timezone
     * @return static
     * @since 26.0.0
     */
    public function withTimeZone(\DateTimeZone $timezone) : static;
}
namespace OCP\AppFramework;

/**
 * Class App
 *
 * Any application must inherit this call - all controller instances to be used are
 * to be registered using IContainer::registerService
 * @since 6.0.0
 */
class App
{
    /**
     * Turns an app id into a namespace by convention. The id is split at the
     * underscores, all parts are CamelCased and reassembled. e.g.:
     * some_app_id -> OCA\SomeAppId
     * @param string $appId the app id
     * @param string $topNamespace the namespace which should be prepended to
     * the transformed app id, defaults to OCA\
     * @return string the starting namespace for the app
     * @since 8.0.0
     */
    public static function buildAppNamespace(string $appId, string $topNamespace = 'OCA\\') : string
    {
    }
    /**
     * @param string $appName
     * @param array $urlParams an array with variables extracted from the routes
     * @since 6.0.0
     */
    public function __construct(string $appName, array $urlParams = [])
    {
    }
    /**
     * @return IAppContainer
     * @since 6.0.0
     */
    public function getContainer() : \OCP\AppFramework\IAppContainer
    {
    }
    /**
     * This function is to be called to create single routes and restful routes based on the given $routes array.
     *
     * Example code in routes.php of tasks app (it will register two restful resources):
     * $routes = array(
     *		'resources' => array(
     *		'lists' => array('url' => '/tasklists'),
     *		'tasks' => array('url' => '/tasklists/{listId}/tasks')
     *	)
     *	);
     *
     * $a = new TasksApp();
     * $a->registerRoutes($this, $routes);
     *
     * @param \OCP\Route\IRouter $router
     * @param array $routes
     * @since 6.0.0
     * @suppress PhanAccessMethodInternal
     * @deprecated 20.0.0 Just return an array from your routes.php
     */
    public function registerRoutes(\OCP\Route\IRouter $router, array $routes)
    {
    }
    /**
     * This function is called by the routing component to fire up the frameworks dispatch mechanism.
     *
     * Example code in routes.php of the task app:
     * $this->create('tasks_index', '/')->get()->action(
     *		function($params){
     *			$app = new TaskApp($params);
     *			$app->dispatch('PageController', 'index');
     *		}
     *	);
     *
     *
     * Example for for TaskApp implementation:
     * class TaskApp extends \OCP\AppFramework\App {
     *
     *		public function __construct($params){
     *			parent::__construct('tasks', $params);
     *
     *			$this->getContainer()->registerService('PageController', function(IAppContainer $c){
     *				$a = $c->query('API');
     *				$r = $c->query('Request');
     *				return new PageController($a, $r);
     *			});
     *		}
     *	}
     *
     * @param string $controllerName the name of the controller under which it is
     *                               stored in the DI container
     * @param string $methodName the method that you want to call
     * @since 6.0.0
     */
    public function dispatch(string $controllerName, string $methodName)
    {
    }
}
/**
 * Base class to inherit your controllers from
 * @since 6.0.0
 */
abstract class Controller
{
    /**
     * app name
     * @var string
     * @since 7.0.0
     */
    protected $appName;
    /**
     * current request
     * @var \OCP\IRequest
     * @since 6.0.0
     */
    protected $request;
    /**
     * constructor of the controller
     * @param string $appName the name of the app
     * @param IRequest $request an instance of the request
     * @since 6.0.0 - parameter $appName was added in 7.0.0 - parameter $app was removed in 7.0.0
     */
    public function __construct($appName, \OCP\IRequest $request)
    {
    }
    /**
     * Parses an HTTP accept header and returns the supported responder type
     * @param string $acceptHeader
     * @param string $default
     * @return string the responder type
     * @since 7.0.0
     * @since 9.1.0 Added default parameter
     */
    public function getResponderByHTTPHeader($acceptHeader, $default = 'json')
    {
    }
    /**
     * Registers a formatter for a type
     * @param string $format
     * @param \Closure $responder
     * @since 7.0.0
     */
    protected function registerResponder($format, \Closure $responder)
    {
    }
    /**
     * Serializes and formats a response
     * @param mixed $response the value that was returned from a controller and
     * is not a Response instance
     * @param string $format the format for which a formatter has been registered
     * @throws \DomainException if format does not match a registered formatter
     * @return Response
     * @since 7.0.0
     */
    public function buildResponse($response, $format = 'json')
    {
    }
}
namespace OCP;

/**
 * Class IContainer
 *
 * IContainer is the basic interface to be used for any internal dependency injection mechanism
 *
 * @since 6.0.0
 * @deprecated 20.0.0 use \Psr\Container\ContainerInterface
 */
interface IContainer extends \Psr\Container\ContainerInterface
{
    /**
     * @template T
     *
     * If a parameter is not registered in the container try to instantiate it
     * by using reflection to find out how to build the class
     * @param string $name the class name to resolve
     * @psalm-param string|class-string<T> $name
     * @return \stdClass
     * @psalm-return ($name is class-string ? T : mixed)
     * @since 8.2.0
     * @deprecated 20.0.0 use \Psr\Container\ContainerInterface::get
     * @throws ContainerExceptionInterface if the class could not be found or instantiated
     * @throws QueryException if the class could not be found or instantiated
     */
    public function resolve($name);
    /**
     * Look up a service for a given name in the container.
     *
     * @template T
     *
     * @param string $name
     * @psalm-param string|class-string<T> $name
     * @param bool $autoload Should we try to autoload the service. If we are trying to resolve built in types this makes no sense for example
     * @return mixed
     * @psalm-return ($name is class-string ? T : mixed)
     * @throws ContainerExceptionInterface if the query could not be resolved
     * @throws NotFoundExceptionInterface if the name could not be found within the container
     * @throws QueryException if the query could not be resolved
     * @since 6.0.0
     * @deprecated 20.0.0 use \Psr\Container\ContainerInterface::get
     */
    public function query(string $name, bool $autoload = true);
    /**
     * A value is stored in the container with it's corresponding name
     *
     * @param string $name
     * @param mixed $value
     * @return void
     * @since 6.0.0
     * @deprecated 20.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerParameter
     */
    public function registerParameter($name, $value);
    /**
     * A service is registered in the container where a closure is passed in which will actually
     * create the service on demand.
     * In case the parameter $shared is set to true (the default usage) the once created service will remain in
     * memory and be reused on subsequent calls.
     * In case the parameter is false the service will be recreated on every call.
     *
     * @param string $name
     * @param \Closure $closure
     * @param bool $shared
     * @return void
     * @since 6.0.0
     * @deprecated 20.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerService
     */
    public function registerService($name, \Closure $closure, $shared = true);
    /**
     * Shortcut for returning a service from a service under a different key,
     * e.g. to tell the container to return a class when queried for an
     * interface
     * @param string $alias the alias that should be registered
     * @param string $target the target that should be resolved instead
     * @since 8.2.0
     * @deprecated 20.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerServiceAlias
     */
    public function registerAlias($alias, $target);
}
namespace OCP\AppFramework;

/**
 * This is a tagging interface for a container that belongs to an app
 *
 * The interface currently extends IContainer, but this interface is deprecated as of Nextcloud 20,
 * thus this interface won't extend it anymore once that was removed. So migrate to the ContainerInterface
 * only.
 *
 * @deprecated 20.0.0
 * @since 6.0.0
 */
interface IAppContainer extends \Psr\Container\ContainerInterface, \OCP\IContainer
{
    /**
     * used to return the appname of the set application
     * @return string the name of your application
     * @since 6.0.0
     * @deprecated 20.0.0
     */
    public function getAppName();
    /**
     * @return \OCP\IServerContainer
     * @since 6.0.0
     * @deprecated 20.0.0
     */
    public function getServer();
    /**
     * @param string $middleWare
     * @return boolean
     * @since 6.0.0
     * @deprecated 20.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerMiddleware
     */
    public function registerMiddleWare($middleWare);
    /**
     * Register a capability
     *
     * @param string $serviceName e.g. 'OCA\Files\Capabilities'
     * @since 8.2.0
     * @deprecated 20.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerCapability
     */
    public function registerCapability($serviceName);
}
/**
 * Base class to inherit your controllers from that are used for RESTful APIs
 * @since 7.0.0
 */
abstract class ApiController extends \OCP\AppFramework\Controller
{
    /**
     * constructor of the controller
     * @param string $appName the name of the app
     * @param IRequest $request an instance of the request
     * @param string $corsMethods comma separated string of HTTP verbs which
     * should be allowed for websites or webapps when calling your API, defaults to
     * 'PUT, POST, GET, DELETE, PATCH'
     * @param string $corsAllowedHeaders comma separated string of HTTP headers
     * which should be allowed for websites or webapps when calling your API,
     * defaults to 'Authorization, Content-Type, Accept'
     * @param int $corsMaxAge number in seconds how long a preflighted OPTIONS
     * request should be cached, defaults to 1728000 seconds
     * @since 7.0.0
     */
    public function __construct($appName, \OCP\IRequest $request, $corsMethods = 'PUT, POST, GET, DELETE, PATCH', $corsAllowedHeaders = 'Authorization, Content-Type, Accept', $corsMaxAge = 1728000)
    {
    }
    /**
     * This method implements a preflighted cors response for you that you can
     * link to for the options request
     *
     * @NoAdminRequired
     * @NoCSRFRequired
     * @PublicPage
     * @since 7.0.0
     */
    #[\OCP\AppFramework\Http\Attribute\NoCSRFRequired]
    #[\OCP\AppFramework\Http\Attribute\PublicPage]
    public function preflightedCors()
    {
    }
}
/**
 * Base class to inherit your controllers from that are used for RESTful APIs
 * @since 8.1.0
 */
abstract class OCSController extends \OCP\AppFramework\ApiController
{
    public const RESPOND_UNAUTHORISED = 997;
    public const RESPOND_SERVER_ERROR = 996;
    public const RESPOND_NOT_FOUND = 998;
    public const RESPOND_UNKNOWN_ERROR = 999;
    /**
     * constructor of the controller
     * @param string $appName the name of the app
     * @param IRequest $request an instance of the request
     * @param string $corsMethods comma separated string of HTTP verbs which
     * should be allowed for websites or webapps when calling your API, defaults to
     * 'PUT, POST, GET, DELETE, PATCH'
     * @param string $corsAllowedHeaders comma separated string of HTTP headers
     * which should be allowed for websites or webapps when calling your API,
     * defaults to 'Authorization, Content-Type, Accept'
     * @param int $corsMaxAge number in seconds how long a preflighted OPTIONS
     * request should be cached, defaults to 1728000 seconds
     * @since 8.1.0
     */
    public function __construct($appName, \OCP\IRequest $request, $corsMethods = 'PUT, POST, GET, DELETE, PATCH', $corsAllowedHeaders = 'Authorization, Content-Type, Accept, OCS-APIRequest', $corsMaxAge = 1728000)
    {
    }
    /**
     * @param int $version
     * @since 11.0.0
     * @internal
     */
    public function setOCSVersion($version)
    {
    }
    /**
     * Since the OCS endpoints default to XML we need to find out the format
     * again
     * @param mixed $response the value that was returned from a controller and
     * is not a Response instance
     * @param string $format the format for which a formatter has been registered
     * @throws \DomainException if format does not match a registered formatter
     * @return Response
     * @since 9.1.0
     */
    public function buildResponse($response, $format = 'xml')
    {
    }
}
/**
 * Base controller for public shares
 *
 * It will verify if the user is properly authenticated to the share. If not a 404
 * is thrown by the PublicShareMiddleware.
 *
 * Use this for example for a controller that is not to be called via a webbrowser
 * directly. For example a PublicPreviewController. As this is not meant to be
 * called by a user directly.
 *
 * To show an auth page extend the AuthPublicShareController
 *
 * @since 14.0.0
 */
abstract class PublicShareController extends \OCP\AppFramework\Controller
{
    /** @var ISession */
    protected $session;
    /**
     * @since 14.0.0
     */
    public function __construct(string $appName, \OCP\IRequest $request, \OCP\ISession $session)
    {
    }
    /**
     * Middleware set the token for the request
     *
     * @since 14.0.0
     */
    public final function setToken(string $token)
    {
    }
    /**
     * Get the token for this request
     *
     * @since 14.0.0
     */
    public final function getToken() : string
    {
    }
    /**
     * Get a hash of the password for this share
     *
     * To ensure access is blocked when the password to a share is changed we store
     * a hash of the password for this token.
     *
     * @since 14.0.0
     */
    protected abstract function getPasswordHash() : string;
    /**
     * Is the provided token a valid token
     *
     * This function is already called from the middleware directly after setting the token.
     *
     * @since 14.0.0
     */
    public abstract function isValidToken() : bool;
    /**
     * Is a share with this token password protected
     *
     * @since 14.0.0
     */
    protected abstract function isPasswordProtected() : bool;
    /**
     * Check if a share is authenticated or not
     *
     * @since 14.0.0
     */
    public function isAuthenticated() : bool
    {
    }
    /**
     * Function called if the share is not found.
     *
     * You can use this to do some logging for example
     *
     * @since 14.0.0
     */
    public function shareNotFound()
    {
    }
}
/**
 * Base controller for interactive public shares
 *
 * It will verify if the user is properly authenticated to the share. If not the
 * user will be redirected to an authentication page.
 *
 * Use this for a controller that is to be called directly by a user. So the
 * normal public share page for files/calendars etc.
 *
 * @since 14.0.0
 */
abstract class AuthPublicShareController extends \OCP\AppFramework\PublicShareController
{
    /** @var IURLGenerator */
    protected $urlGenerator;
    /**
     * @since 14.0.0
     */
    public function __construct(string $appName, \OCP\IRequest $request, \OCP\ISession $session, \OCP\IURLGenerator $urlGenerator)
    {
    }
    /**
     * @PublicPage
     * @NoCSRFRequired
     *
     * Show the authentication page
     * The form has to submit to the authenticate method route
     *
     * @since 14.0.0
     */
    #[\OCP\AppFramework\Http\Attribute\NoCSRFRequired]
    #[\OCP\AppFramework\Http\Attribute\PublicPage]
    public function showAuthenticate() : \OCP\AppFramework\Http\TemplateResponse
    {
    }
    /**
     * The template to show when authentication failed
     *
     * @since 14.0.0
     */
    protected function showAuthFailed() : \OCP\AppFramework\Http\TemplateResponse
    {
    }
    /**
     * The template to show after user identification
     *
     * @since 24.0.0
     */
    protected function showIdentificationResult(bool $success) : \OCP\AppFramework\Http\TemplateResponse
    {
    }
    /**
     * Validates that the provided identity is allowed to receive a temporary password
     *
     * @since 24.0.0
     */
    protected function validateIdentity(?string $identityToken = null) : bool
    {
    }
    /**
     * Generates a password
     *
     * @since 24.0.0
     */
    protected function generatePassword() : void
    {
    }
    /**
     * Verify the password
     *
     * @since 24.0.0
     */
    protected function verifyPassword(string $password) : bool
    {
    }
    /**
     * Function called after failed authentication
     *
     * You can use this to do some logging for example
     *
     * @since 14.0.0
     */
    protected function authFailed()
    {
    }
    /**
     * Function called after successful authentication
     *
     * You can use this to do some logging for example
     *
     * @since 14.0.0
     */
    protected function authSucceeded()
    {
    }
    /**
     * @UseSession
     * @PublicPage
     * @BruteForceProtection(action=publicLinkAuth)
     *
     * Authenticate the share
     *
     * @since 14.0.0
     */
    #[\OCP\AppFramework\Http\Attribute\BruteForceProtection(action: 'publicLinkAuth')]
    #[\OCP\AppFramework\Http\Attribute\PublicPage]
    #[\OCP\AppFramework\Http\Attribute\UseSession]
    public final function authenticate(string $password = '', string $passwordRequest = 'no', string $identityToken = '')
    {
    }
    /**
     * Default landing page
     *
     * @since 14.0.0
     */
    public abstract function showShare() : \OCP\AppFramework\Http\TemplateResponse;
    /**
     * @since 14.0.0
     */
    public final function getAuthenticationRedirect(string $redirect) : \OCP\AppFramework\Http\RedirectResponse
    {
    }
}
/**
 * Middleware is used to provide hooks before or after controller methods and
 * deal with possible exceptions raised in the controller methods.
 * They're modeled after Django's middleware system:
 * https://docs.djangoproject.com/en/dev/topics/http/middleware/
 * @since 6.0.0
 */
abstract class Middleware
{
    /**
     * This is being run in normal order before the controller is being
     * called which allows several modifications and checks
     *
     * @param Controller $controller the controller that is being called
     * @param string $methodName the name of the method that will be called on
     *                           the controller
     * @return void
     * @since 6.0.0
     */
    public function beforeController(\OCP\AppFramework\Controller $controller, string $methodName)
    {
    }
    /**
     * This is being run when either the beforeController method or the
     * controller method itself is throwing an exception. The middleware is
     * asked in reverse order to handle the exception and to return a response.
     * If the response is null, it is assumed that the exception could not be
     * handled and the error will be thrown again
     *
     * @param Controller $controller the controller that is being called
     * @param string $methodName the name of the method that will be called on
     *                           the controller
     * @param Exception $exception the thrown exception
     * @throws Exception the passed in exception if it can't handle it
     * @return Response a Response object in case that the exception was handled
     * @since 6.0.0
     */
    public function afterException(\OCP\AppFramework\Controller $controller, string $methodName, \Exception $exception)
    {
    }
    /**
     * This is being run after a successful controllermethod call and allows
     * the manipulation of a Response object. The middleware is run in reverse order
     *
     * @param Controller $controller the controller that is being called
     * @param string $methodName the name of the method that will be called on
     *                           the controller
     * @param Response $response the generated response from the controller
     * @return Response a Response object
     * @since 6.0.0
     */
    public function afterController(\OCP\AppFramework\Controller $controller, string $methodName, \OCP\AppFramework\Http\Response $response)
    {
    }
    /**
     * This is being run after the response object has been rendered and
     * allows the manipulation of the output. The middleware is run in reverse order
     *
     * @param Controller $controller the controller that is being called
     * @param string $methodName the name of the method that will be called on
     *                           the controller
     * @param string $output the generated output from a response
     * @return string the output that should be printed
     * @since 6.0.0
     */
    public function beforeOutput(\OCP\AppFramework\Controller $controller, string $methodName, string $output)
    {
    }
}
namespace OCP\Authentication\Events;

/**
 * Emitted when the authentication fails
 *
 * @since 26.0.0
 */
class AnyLoginFailedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 26.0.0
     */
    public function __construct(string $loginName, ?string $password)
    {
    }
    /**
     * @since 26.0.0
     */
    public function geLoginName() : string
    {
    }
    /**
     * @since 26.0.0
     */
    public function getPassword() : ?string
    {
    }
}
/**
 * Emitted when the authentication fails, but only if the login name can be associated with an existing user.
 *
 * @since 19.0.0
 */
class LoginFailedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 19.0.0
     */
    public function __construct(string $uid)
    {
    }
    /**
     * returns the uid of the user that was tried to login against
     *
     * @since 19.0.0
     */
    public function getUid() : string
    {
    }
}
namespace OCP\Authentication\Exceptions;

/**
 * @since 12
 */
class CredentialsUnavailableException extends \Exception
{
}
/**
 * @since 12
 */
class PasswordUnavailableException extends \Exception
{
}
namespace OCP\Authentication\LoginCredentials;

/**
 * @since 12
 */
interface ICredentials
{
    /**
     * Get the user UID
     *
     * @since 12
     *
     * @return string
     */
    public function getUID();
    /**
     * Get the login name the users used to login
     *
     * @since 12
     *
     * @return string
     */
    public function getLoginName();
    /**
     * Get the password
     *
     * @since 12
     *
     * @return string|null
     * @throws PasswordUnavailableException
     */
    public function getPassword();
}
/**
 * @since 12
 */
interface IStore
{
    /**
     * Get login credentials of the currently logged in user
     *
     * @since 12
     *
     * @throws CredentialsUnavailableException
     * @return ICredentials the login credentials of the current user
     */
    public function getLoginCredentials() : \OCP\Authentication\LoginCredentials\ICredentials;
}
namespace OCP\Authentication\Token;

/**
 * @since 24.0.8
 */
interface IProvider
{
    /**
     * invalidates all tokens of a specific user
     * if a client name is given only tokens of that client will be invalidated
     *
     * @param string $uid
     * @param string|null $clientName
     * @since 24.0.8
     * @return void
     */
    public function invalidateTokensOfUser(string $uid, ?string $clientName);
}
namespace OCP\Authentication\TwoFactorAuth;

/**
 * @since 17.0.0
 */
abstract class ALoginSetupController extends \OCP\AppFramework\Controller
{
}
/**
 * Two Factor Authentication failed
 *
 * It defines an Exception a 2FA app can
 * throw in case of an error. The 2FA Controller will catch this exception and
 * display this error.
 *
 * @since 12
 */
class TwoFactorException extends \Exception
{
}
/**
 * @since 9.1.0
 */
interface IProvider
{
    /**
     * @since 14.0.0
     * @deprecated 22.0.0
     */
    public const EVENT_SUCCESS = self::class . '::success';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_FAILED = self::class . '::failed';
    /**
     * Get unique identifier of this 2FA provider
     *
     * @since 9.1.0
     *
     * @return string
     */
    public function getId() : string;
    /**
     * Get the display name for selecting the 2FA provider
     *
     * Example: "Email"
     *
     * @since 9.1.0
     *
     * @return string
     */
    public function getDisplayName() : string;
    /**
     * Get the description for selecting the 2FA provider
     *
     * Example: "Get a token via e-mail"
     *
     * @since 9.1.0
     *
     * @return string
     */
    public function getDescription() : string;
    /**
     * Get the template for rending the 2FA provider view
     *
     * @since 9.1.0
     *
     * @param IUser $user
     * @return Template
     */
    public function getTemplate(\OCP\IUser $user) : \OCP\Template;
    /**
     * Verify the given challenge
     *
     * @since 9.1.0
     *
     * @param IUser $user
     * @param string $challenge
     * @return bool
     */
    public function verifyChallenge(\OCP\IUser $user, string $challenge) : bool;
    /**
     * Decides whether 2FA is enabled for the given user
     *
     * @since 9.1.0
     *
     * @param IUser $user
     * @return bool
     */
    public function isTwoFactorAuthEnabledForUser(\OCP\IUser $user) : bool;
}
/**
 * @since 17.0.0
 */
interface IActivatableAtLogin extends \OCP\Authentication\TwoFactorAuth\IProvider
{
    /**
     * @param IUser $user
     *
     * @return ILoginSetupProvider
     *
     * @since 17.0.0
     */
    public function getLoginSetup(\OCP\IUser $user) : \OCP\Authentication\TwoFactorAuth\ILoginSetupProvider;
}
/**
 * Marks a 2FA provider as activatable by the administrator. This means that an
 * admin can activate this provider without user interaction. The provider,
 * therefore, must not require any user-provided configuration.
 *
 * @since 15.0.0
 */
interface IActivatableByAdmin extends \OCP\Authentication\TwoFactorAuth\IProvider
{
    /**
     * Enable this provider for the given user.
     *
     * @param IUser $user the user to activate this provider for
     *
     * @return void
     *
     * @since 15.0.0
     */
    public function enableFor(\OCP\IUser $user);
}
/**
 * Marks a 2FA provider as activale by the administrator. This means that an
 * admin can activate this provider without user interaction. The provider,
 * therefore, must not require any user-provided configuration.
 *
 * @since 15.0.0
 */
interface IDeactivatableByAdmin extends \OCP\Authentication\TwoFactorAuth\IProvider
{
    /**
     * Disable this provider for the given user.
     *
     * @param IUser $user the user to deactivate this provider for
     *
     * @return void
     *
     * @since 15.0.0
     */
    public function disableFor(\OCP\IUser $user);
}
/**
 * @since 17.0.0
 */
interface ILoginSetupProvider
{
    /**
     * @return Template
     *
     * @since 17.0.0
     */
    public function getBody() : \OCP\Template;
}
/**
 * Interface IPersonalProviderSettings
 *
 * @since 15.0.0
 */
interface IPersonalProviderSettings
{
    /**
     * @return Template
     *
     * @since 15.0.0
     */
    public function getBody() : \OCP\Template;
}
/**
 * @since 13.0.0
 */
interface IProvidesCustomCSP
{
    /**
     * @return ContentSecurityPolicy
     *
     * @since 13.0.0
     */
    public function getCSP() : \OCP\AppFramework\Http\ContentSecurityPolicy;
}
/**
 * Interface for two-factor providers that provide dark and light provider
 * icons
 *
 * @since 15.0.0
 */
interface IProvidesIcons extends \OCP\Authentication\TwoFactorAuth\IProvider
{
    /**
     * Get the path to the light (white) icon of this provider
     *
     * @return String
     *
     * @since 15.0.0
     */
    public function getLightIcon() : string;
    /**
     * Get the path to the dark (black) icon of this provider
     *
     * @return String
     *
     * @since 15.0.0
     */
    public function getDarkIcon() : string;
}
/**
 * Interface for admins that have personal settings. These settings will be shown in the
 * security sections. Some information like the display name of the provider is read
 * from the provider directly.
 *
 * @since 15.0.0
 */
interface IProvidesPersonalSettings extends \OCP\Authentication\TwoFactorAuth\IProvider
{
    /**
     * @param IUser $user
     *
     * @return IPersonalProviderSettings
     *
     * @since 15.0.0
     */
    public function getPersonalSettings(\OCP\IUser $user) : \OCP\Authentication\TwoFactorAuth\IPersonalProviderSettings;
}
/**
 * Nextcloud 2FA provider registry for stateful 2FA providers
 *
 * This service keeps track of which providers are currently active for a specific
 * user. Stateful 2FA providers (IStatefulProvider) must use this service to save
 * their enabled/disabled state.
 *
 * @since 14.0.0
 */
interface IRegistry
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_PROVIDER_ENABLED = self::class . '::enable';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_PROVIDER_DISABLED = self::class . '::disable';
    /**
     * Get a key-value map of providers and their enabled/disabled state for
     * the given user.
     *
     * @since 14.0.0
     * @return array<string, bool> where the array key is the provider ID (string) and the
     *                  value is the enabled state (bool)
     */
    public function getProviderStates(\OCP\IUser $user) : array;
    /**
     * Enable the given 2FA provider for the given user
     *
     * @since 14.0.0
     */
    public function enableProviderFor(\OCP\Authentication\TwoFactorAuth\IProvider $provider, \OCP\IUser $user);
    /**
     * Disable the given 2FA provider for the given user
     *
     * @since 14.0.0
     */
    public function disableProviderFor(\OCP\Authentication\TwoFactorAuth\IProvider $provider, \OCP\IUser $user);
    /**
     * Cleans up all entries of the provider with the given id. This is only
     * necessary in edge-cases where an admin disabled and/or uninstalled a
     * provider app. Invoking this method will make sure outdated provider
     * associations are removed so that users can log in.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     *
     * @return void
     */
    public function cleanUp(string $providerId);
}
/**
 * @since 15.0.0
 */
class RegistryEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 15.0.0
     */
    public function __construct(\OCP\Authentication\TwoFactorAuth\IProvider $provider, \OCP\IUser $user)
    {
    }
    /**
     * @since 15.0.0
     */
    public function getProvider() : \OCP\Authentication\TwoFactorAuth\IProvider
    {
    }
    /**
     * @since 15.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 20.0.0
 */
final class TwoFactorProviderDisabled extends \OCP\EventDispatcher\Event
{
    /**
     * @since 20.0.0
     */
    public function __construct(string $providerId)
    {
    }
    /**
     * @since 20.0.0
     */
    public function getProviderId() : string
    {
    }
}
/**
 * @since 22.0.0
 */
class TwoFactorProviderForUserDisabled extends \OCP\EventDispatcher\Event
{
    /**
     * @since 22.0.0
     */
    public function __construct(\OCP\IUser $user, \OCP\Authentication\TwoFactorAuth\IProvider $provider)
    {
    }
    /**
     * @return IUser
     * @since 22.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return IProvider
     * @since 22.0.0
     */
    public function getProvider() : \OCP\Authentication\TwoFactorAuth\IProvider
    {
    }
}
/**
 * @since 22.0.0
 */
class TwoFactorProviderForUserEnabled extends \OCP\EventDispatcher\Event
{
    /**
     * @since 22.0.0
     */
    public function __construct(\OCP\IUser $user, \OCP\Authentication\TwoFactorAuth\IProvider $provider)
    {
    }
    /**
     * @return IUser
     * @since 22.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return IProvider
     * @since 22.0.0
     */
    public function getProvider() : \OCP\Authentication\TwoFactorAuth\IProvider
    {
    }
}
namespace OCP\Authentication;

/**
 * @since 20.0.0
 */
interface IAlternativeLogin
{
    /**
     * Label shown on the login option
     * @return string
     * @since 20.0.0
     */
    public function getLabel() : string;
    /**
     * Relative link to the login option
     * @return string
     * @since 20.0.0
     */
    public function getLink() : string;
    /**
     * CSS classes added to the alternative login option on the login screen
     * @return string
     * @since 20.0.0
     */
    public function getClass() : string;
    /**
     * Load necessary resources to present the login option, e.g. style-file to style the getClass()
     * @since 20.0.0
     */
    public function load() : void;
}
/**
 * Interface IApacheBackend
 *
 * @since 6.0.0
 */
interface IApacheBackend
{
    /**
     * In case the user has been authenticated by a module true is returned.
     *
     * @return boolean whether the module reports a user as currently logged in.
     * @since 6.0.0
     */
    public function isSessionActive();
    /**
     * Gets the current logout URL
     *
     * @return string
     * @since 12.0.3
     */
    public function getLogoutUrl();
    /**
     * Return the id of the current user
     * @return string
     * @since 6.0.0
     */
    public function getCurrentUserId();
}
/**
 * Interface IProvideUserSecretBackend
 *
 * @since 23.0.0
 */
interface IProvideUserSecretBackend
{
    /**
     * Optionally returns a stable per-user secret. This secret is for
     * instance used to secure file encryption keys.
     * @return string
     * @since 23.0.0
     */
    public function getCurrentUserSecret() : string;
}
namespace OCP;

/**
 * Exception for when a not allowed path is attempted to be autoloaded
 * @since 8.2.0
 */
class AutoloadNotAllowedException extends \DomainException
{
    /**
     * @param string $path
     * @since 8.2.0
     */
    public function __construct($path)
    {
    }
}
namespace OCP\BackgroundJob;

/**
 * This interface represend a backgroud job run with cron
 *
 * To implement a background job, you must extend either \OCP\BackgroundJob\Job,
 * \OCP\BackgroundJob\TimedJob or \OCP\BackgroundJob\QueuedJob
 *
 * @since 7.0.0
 */
interface IJob
{
    /**
     * @since 24.0.0
     */
    public const TIME_INSENSITIVE = 0;
    /**
     * @since 24.0.0
     */
    public const TIME_SENSITIVE = 1;
    /**
     * Run the background job with the registered argument
     *
     * @param IJobList $jobList The job list that manages the state of this job
     * @param ILogger|null $logger
     * @since 7.0.0
     * @deprecated since 25.0.0 Use start() instead. This method will be removed
     * with the ILogger interface
     */
    public function execute(\OCP\BackgroundJob\IJobList $jobList, \OCP\ILogger $logger = null);
    /**
     * Start the background job with the registered argument
     *
     * This methods will take care of running the background job, of initializing
     * the state and cleaning up the job list after running the job.
     *
     * For common background job scenario, you will want to use TimedJob or QueuedJob
     * instead of overwritting this method.
     *
     * @param IJobList $jobList The job list that manages the state of this job
     * @since 25.0.0
     */
    public function start(\OCP\BackgroundJob\IJobList $jobList) : void;
    /**
     * @since 7.0.0
     */
    public function setId(int $id);
    /**
     * @since 7.0.0
     */
    public function setLastRun(int $lastRun);
    /**
     * @param mixed $argument
     * @since 7.0.0
     */
    public function setArgument($argument);
    /**
     * Get the id of the background job
     * This id is determined by the job list when a job is added to the list
     *
     * @return int
     * @since 7.0.0
     */
    public function getId();
    /**
     * Get the last time this job was run as unix timestamp
     *
     * @return int
     * @since 7.0.0
     */
    public function getLastRun();
    /**
     * Get the argument associated with the background job
     * This is the argument that will be passed to the background job
     *
     * @return mixed
     * @since 7.0.0
     */
    public function getArgument();
}
/**
 * @since 27.0.0
 */
interface IParallelAwareJob
{
    /**
     * Set this to false to prevent two Jobs from the same class from running in parallel
     *
     * @param bool $allow
     * @return void
     * @since 27.0.0
     */
    public function setAllowParallelRuns(bool $allow) : void;
    /**
     * @return bool
     * @since 27.0.0
     */
    public function getAllowParallelRuns() : bool;
}
/**
 * Base class for background jobs
 *
 * This is here if you want to do advanced stuff in your background jobs.
 * For the most common use cases have a look at QueuedJob and TimedJob
 *
 * @since 15.0.0
 */
abstract class Job implements \OCP\BackgroundJob\IJob, \OCP\BackgroundJob\IParallelAwareJob
{
    protected int $id = 0;
    protected int $lastRun = 0;
    protected $argument;
    protected \OCP\AppFramework\Utility\ITimeFactory $time;
    protected bool $allowParallelRuns = true;
    /**
     * @since 15.0.0
     */
    public function __construct(\OCP\AppFramework\Utility\ITimeFactory $time)
    {
    }
    /**
     * The function to prepare the execution of the job.
     *
     *
     * @param IJobList $jobList
     * @param ILogger|null $logger
     *
     * @since 15.0.0
     */
    public function execute(\OCP\BackgroundJob\IJobList $jobList, \OCP\ILogger $logger = null)
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function start(\OCP\BackgroundJob\IJobList $jobList) : void
    {
    }
    /**
     * @since 15.0.0
     */
    public final function setId(int $id)
    {
    }
    /**
     * @since 15.0.0
     */
    public final function setLastRun(int $lastRun)
    {
    }
    /**
     * @since 15.0.0
     */
    public function setArgument($argument)
    {
    }
    /**
     * @since 15.0.0
     */
    public final function getId() : int
    {
    }
    /**
     * @since 15.0.0
     */
    public final function getLastRun() : int
    {
    }
    /**
     * @since 15.0.0
     */
    public function getArgument()
    {
    }
    /**
     * Set this to false to prevent two Jobs from this class from running in parallel
     *
     * @param bool $allow
     * @return void
     * @since 27.0.0
     */
    public function setAllowParallelRuns(bool $allow) : void
    {
    }
    /**
     * @return bool
     * @since 27.0.0
     */
    public function getAllowParallelRuns() : bool
    {
    }
    /**
     * The actual function that is called to run the job
     *
     * @param $argument
     *
     * @since 15.0.0
     */
    protected abstract function run($argument);
}
/**
 * Simple base class for a one time background job
 *
 * @since 15.0.0
 */
abstract class QueuedJob extends \OCP\BackgroundJob\Job
{
    /**
     * Run the job, then remove it from the joblist
     *
     * @param IJobList $jobList
     * @param ILogger|null $logger
     *
     * @since 15.0.0
     * @deprecated since 25.0.0 Use start() instead. This method will be removed
     * with the ILogger interface
     */
    public final function execute($jobList, \OCP\ILogger $logger = null)
    {
    }
    /**
     * Run the job, then remove it from the joblist
     *
     * @since 25.0.0
     */
    public final function start(\OCP\BackgroundJob\IJobList $jobList) : void
    {
    }
}
/**
 * Interface IJobList
 *
 * This interface provides functions to register background jobs
 *
 * To create a new background job create a new class that inherits from either
 * \OC\BackgroundJob\Job, \OC\BackgroundJob\QueuedJob or
 * \OC\BackgroundJob\TimedJob and register it using ->add($job, $argument),
 * $argument will be passed to the run() function of the job when the job is
 * executed.
 *
 * A regular job will be executed every time cron.php is run, a QueuedJob will
 * only run once and a TimedJob will only run at a specific interval which is to
 * be specified in the constructor of the job by calling
 * $this->setInterval($interval) with $interval in seconds.
 *
 * This interface should be used directly and not implemented by an application.
 * The implementation is provided by the server.
 *
 * @since 7.0.0
 */
interface IJobList
{
    /**
     * Add a job to the list
     *
     * @param IJob|class-string<IJob> $job
     * @param mixed $argument The argument to be passed to $job->run() when the job is executed
     * @since 7.0.0
     */
    public function add($job, $argument = null) : void;
    /**
     * Remove a job from the list
     *
     * @param IJob|class-string<IJob> $job
     * @param mixed $argument
     * @since 7.0.0
     */
    public function remove($job, $argument = null) : void;
    /**
     * check if a job is in the list
     *
     * @param IJob|class-string<IJob> $job
     * @param mixed $argument
     * @since 7.0.0
     */
    public function has($job, $argument) : bool;
    /**
     * Get jobs matching the search
     *
     * @param IJob|class-string<IJob>|null $job
     * @return array<IJob>
     * @since 25.0.0
     * @deprecated 26.0.0 Use getJobsIterator instead to avoid duplicated job objects
     */
    public function getJobs($job, ?int $limit, int $offset) : array;
    /**
     * Get jobs matching the search
     *
     * @param IJob|class-string<IJob>|null $job
     * @return iterable<IJob>
     * @since 26.0.0
     */
    public function getJobsIterator($job, ?int $limit, int $offset) : iterable;
    /**
     * get the next job in the list
     *
     * @since 7.0.0 - In 24.0.0 parameter $onlyTimeSensitive got added
     */
    public function getNext(bool $onlyTimeSensitive = false) : ?\OCP\BackgroundJob\IJob;
    /**
     * @since 7.0.0
     */
    public function getById(int $id) : ?\OCP\BackgroundJob\IJob;
    /**
     * @since 23.0.0
     */
    public function getDetailsById(int $id) : ?array;
    /**
     * set the job that was last ran to the current time
     *
     * @since 7.0.0
     */
    public function setLastJob(\OCP\BackgroundJob\IJob $job) : void;
    /**
     * Remove the reservation for a job
     *
     * @since 9.1.0
     */
    public function unlockJob(\OCP\BackgroundJob\IJob $job) : void;
    /**
     * set the lastRun of $job to now
     *
     * @since 7.0.0
     */
    public function setLastRun(\OCP\BackgroundJob\IJob $job) : void;
    /**
     * set the run duration of $job
     *
     * @since 12.0.0
     */
    public function setExecutionTime(\OCP\BackgroundJob\IJob $job, int $timeTaken) : void;
    /**
     * Reset the $job so it executes on the next trigger
     *
     * @since 23.0.0
     */
    public function resetBackgroundJob(\OCP\BackgroundJob\IJob $job) : void;
    /**
     * Checks whether a job of the passed class is reserved to run
     *
     * @param string|null $className
     * @return bool
     * @since 27.0.0
     */
    public function hasReservedJob(?string $className) : bool;
}
/**
 * Simple base class to extend to run periodic background jobs.
 * Call setInterval with your desired interval in seconds from the constructor.
 *
 * @since 15.0.0
 */
abstract class TimedJob extends \OCP\BackgroundJob\Job
{
    protected int $interval = 0;
    protected int $timeSensitivity = \OCP\BackgroundJob\IJob::TIME_SENSITIVE;
    /**
     * Set the interval for the job
     *
     * @param int $seconds the time to pass between two runs of the same job in seconds
     *
     * @since 15.0.0
     */
    public function setInterval(int $seconds)
    {
    }
    /**
     * Whether the background job is time sensitive and needs to run soon after
     * the scheduled interval, of if it is okay to be delayed until a later time.
     *
     * @return bool
     * @since 24.0.0
     */
    public function isTimeSensitive() : bool
    {
    }
    /**
     * If your background job is not time sensitive (sending instant email
     * notifications, etc.) it would be nice to set it to IJob::TIME_INSENSITIVE
     * This way the execution can be delayed during high usage times.
     *
     * @param int $sensitivity
     * @psalm-param IJob::TIME_* $sensitivity
     * @return void
     * @since 24.0.0
     */
    public function setTimeSensitivity(int $sensitivity) : void
    {
    }
    /**
     * run the job if the last run is is more than the interval ago
     *
     * @param JobList $jobList
     * @param ILogger|null $logger
     *
     * @since 15.0.0
     * @deprecated since 25.0.0 Use start() instead
     */
    public final function execute($jobList, \OCP\ILogger $logger = null)
    {
    }
    /**
     * Run the job if the last run is is more than the interval ago
     *
     * @since 25.0.0
     */
    public final function start(\OCP\BackgroundJob\IJobList $jobList) : void
    {
    }
}
namespace OCP\Broadcast\Events;

/**
 * @since 18.0.0
 */
interface IBroadcastEvent
{
    /**
     * @return string the name of the event
     * @since 18.0.0
     */
    public function getName() : string;
    /**
     * @return string[]
     * @since 18.0.0
     */
    public function getUids() : array;
    /**
     * @return JsonSerializable the data to be sent to the client
     * @since 18.0.0
     */
    public function getPayload() : \JsonSerializable;
    /**
     * @since 18.0.0
     */
    public function setBroadcasted() : void;
}
namespace OCP;

/**
 * This interface defines method for accessing the file based user cache.
 * @since 6.0.0
 */
interface ICache
{
    /**
     * Get a value from the user cache
     * @param string $key
     * @return mixed
     * @since 6.0.0
     */
    public function get($key);
    /**
     * Set a value in the user cache
     * @param string $key
     * @param mixed $value
     * @param int $ttl Time To Live in seconds. Defaults to 60*60*24
     * @return bool
     * @since 6.0.0
     */
    public function set($key, $value, $ttl = 0);
    /**
     * Check if a value is set in the user cache
     * @param string $key
     * @return bool
     * @since 6.0.0
     * @deprecated 9.1.0 Directly read from GET to prevent race conditions
     */
    public function hasKey($key);
    /**
     * Remove an item from the user cache
     * @param string $key
     * @return bool
     * @since 6.0.0
     */
    public function remove($key);
    /**
     * Clear the user cache of all entries starting with a prefix
     * @param string $prefix (optional)
     * @return bool
     * @since 6.0.0
     */
    public function clear($prefix = '');
    /**
     * Check if the cache implementation is available
     * @since 24.0.0
     */
    public static function isAvailable() : bool;
}
namespace OCP\Cache;

/**
 * In-memory cache with a capacity limit to keep memory usage in check
 *
 * Uses a simple FIFO expiry mechanism
 *
 * @since 25.0.0
 * @template T
 */
class CappedMemoryCache implements \OCP\ICache, \ArrayAccess
{
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function __construct(int $capacity = 512)
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function hasKey($key) : bool
    {
    }
    /**
     * @return ?T
     * @since 25.0.0
     */
    public function get($key)
    {
    }
    /**
     * @inheritdoc
     * @param string $key
     * @param T $value
     * @param int $ttl
     * @since 25.0.0
     * @return bool
     */
    public function set($key, $value, $ttl = 0) : bool
    {
    }
    /**
     * @since 25.0.0
     */
    public function remove($key) : bool
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function clear($prefix = '') : bool
    {
    }
    /**
     * @since 25.0.0
     */
    public function offsetExists($offset) : bool
    {
    }
    /**
     * @inheritdoc
     * @return T
     * @since 25.0.0
     */
    #[\ReturnTypeWillChange]
    public function &offsetGet($offset)
    {
    }
    /**
     * @inheritdoc
     * @param string $offset
     * @param T $value
     * @since 25.0.0
     */
    public function offsetSet($offset, $value) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function offsetUnset($offset) : void
    {
    }
    /**
     * @return T[]
     * @since 25.0.0
     */
    public function getData() : array
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public static function isAvailable() : bool
    {
    }
}
namespace OCP\Calendar;

/**
 * Class BackendTemporarilyUnavailableException
 *
 * @since 14.0.0
 */
class BackendTemporarilyUnavailableException extends \Exception
{
}
namespace OCP\Calendar\Exceptions;

/**
 * @since 23.0.0
 */
class CalendarException extends \Exception
{
}
namespace OCP\Calendar\Resource;

/**
 * Interface IBackend
 *
 * @since 14.0.0
 */
interface IBackend
{
    /**
     * get a list of all resources in this backend
     *
     * @throws BackendTemporarilyUnavailableException
     * @return IResource[]
     * @since 14.0.0
     */
    public function getAllResources() : array;
    /**
     * get a list of all resource identifiers in this backend
     *
     * @throws BackendTemporarilyUnavailableException
     * @return string[]
     * @since 14.0.0
     */
    public function listAllResources() : array;
    /**
     * get a resource by it's id
     *
     * @param string $id
     * @throws BackendTemporarilyUnavailableException
     * @return IResource|null
     * @since 14.0.0
     */
    public function getResource($id);
    /**
     * Get unique identifier of the backend
     *
     * @return string
     * @since 14.0.0
     */
    public function getBackendIdentifier() : string;
}
/**
 * @since 14.0.0
 * @deprecated 24.0.0
 */
interface IManager
{
    /**
     * Registers a resource backend
     *
     * @param string $backendClass
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerCalendarResourceBackend
     */
    public function registerBackend(string $backendClass);
    /**
     * Unregisters a resource backend
     *
     * @param string $backendClass
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function unregisterBackend(string $backendClass);
    /**
     * @return IBackend[]
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function getBackends() : array;
    /**
     * @param string $backendId
     * @return IBackend|null
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function getBackend($backendId);
    /**
     * removes all registered backend instances
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function clear();
}
/**
 * Interface IResource
 *
 * @since 14.0.0
 */
interface IResource
{
    /**
     * get the resource id
     *
     * This id has to be unique within the backend
     *
     * @return string
     * @since 14.0.0
     */
    public function getId() : string;
    /**
     * get the display name for a resource
     *
     * @return string
     * @since 14.0.0
     */
    public function getDisplayName() : string;
    /**
     * Get a list of groupIds that are allowed to access this resource
     *
     * If an empty array is returned, no group restrictions are
     * applied.
     *
     * @return string[]
     * @since 14.0.0
     */
    public function getGroupRestrictions() : array;
    /**
     * get email-address for resource
     *
     * The email address has to be globally unique
     *
     * @return string
     * @since 14.0.0
     */
    public function getEMail() : string;
    /**
     * Get corresponding backend object
     *
     * @return IBackend
     * @since 14.0.0
     */
    public function getBackend() : \OCP\Calendar\Resource\IBackend;
}
/**
 * Interface IResourceMetadata
 *
 * This interface provides keys for common metadata.
 * Resource Backends are not limited to this list and can provide
 * any metadata they want.
 *
 * @since 17.0.0
 */
interface IResourceMetadata
{
    /**
     * Type of resource
     *
     * Allowed values for this key include:
     * - projector
     * - tv
     * - vehicle
     * - other
     *
     * @since 17.0.0
     */
    public const RESOURCE_TYPE = '{http://nextcloud.com/ns}resource-type';
    /**
     * If resource is of type vehicle, this describes the type of vehicle
     *
     * Allowed values:
     * - bicycle
     * - scooter
     * - motorbike
     * - car
     * - plane
     * - helicopter
     * - other
     *
     * @since 17.0.0
     */
    public const VEHICLE_TYPE = '{http://nextcloud.com/ns}resource-vehicle-type';
    /**
     * Make of the vehicle
     *
     * @since 17.0.0
     */
    public const VEHICLE_MAKE = '{http://nextcloud.com/ns}resource-vehicle-make';
    /**
     * Model of the vehicle
     *
     * @since 17.0.0
     */
    public const VEHICLE_MODEL = '{http://nextcloud.com/ns}resource-vehicle-model';
    /**
     * Whether or not the car is electric
     *
     * use '1' for electric, '0' for non-electric
     *
     * @since 17.0.0
     */
    public const VEHICLE_IS_ELECTRIC = '{http://nextcloud.com/ns}resource-vehicle-is-electric';
    /**
     * Range of vehicle with a full tank
     *
     * @since 17.0.0
     */
    public const VEHICLE_RANGE = '{http://nextcloud.com/ns}resource-vehicle-range';
    /**
     * Seating capacity of the vehicle
     *
     * @since 17.0.0
     */
    public const VEHICLE_SEATING_CAPACITY = '{http://nextcloud.com/ns}resource-vehicle-seating-capacity';
    /**
     * Contact information about the person who is responsible to administer / maintain this resource
     * This key stores a textual description of name and possible ways to contact the person
     *
     * @since 17.0.0
     */
    public const CONTACT_PERSON = '{http://nextcloud.com/ns}resource-contact-person';
    /**
     * Link to the vcard of the contact person
     *
     * @since 17.0.0
     */
    public const CONTACT_PERSON_VCARD = '{http://nextcloud.com/ns}resource-contact-person-vcard';
}
namespace OCP\Calendar\Room;

/**
 * Interface IBackend
 *
 * @since 14.0.0
 */
interface IBackend
{
    /**
     * get a list of all rooms in this backend
     *
     * @throws BackendTemporarilyUnavailableException
     * @return IRoom[]
     * @since 14.0.0
     */
    public function getAllRooms() : array;
    /**
     * get a list of all room identifiers in this backend
     *
     * @throws BackendTemporarilyUnavailableException
     * @return string[]
     * @since 14.0.0
     */
    public function listAllRooms() : array;
    /**
     * get a room by it's id
     *
     * @param string $id
     * @throws BackendTemporarilyUnavailableException
     * @return IRoom|null
     * @since 14.0.0
     */
    public function getRoom($id);
    /**
     * Get unique identifier of the backend
     *
     * @return string
     * @since 14.0.0
     */
    public function getBackendIdentifier() : string;
}
/**
 * @since 14.0.0
 * @deprecated 24.0.0
 */
interface IManager
{
    /**
     * Registers a room backend
     *
     * @param string $backendClass
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0 use \OC\AppFramework\Bootstrap\::registerCalendarRoomBackend
     */
    public function registerBackend(string $backendClass);
    /**
     * Unregisters a room backend
     *
     * @param string $backendClass
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function unregisterBackend(string $backendClass);
    /**
     * @return IBackend[]
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function getBackends() : array;
    /**
     * @param string $backendId
     * @return IBackend|null
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function getBackend($backendId);
    /**
     * removes all registered backend instances
     * @return void
     * @since 14.0.0
     * @deprecated 24.0.0
     */
    public function clear();
}
/**
 * Interface IRoom
 *
 * @since 14.0.0
 */
interface IRoom
{
    /**
     * Get a unique ID for the room
     *
     * This id has to be unique within the backend
     *
     * @return string
     * @since 14.0.0
     */
    public function getId() : string;
    /**
     * Get the display name for the room
     *
     * @return string
     * @since 14.0.0
     */
    public function getDisplayName() : string;
    /**
     * Get a list of groupIds that are allowed to access this room
     *
     * If an empty array is returned, no group restrictions are
     * applied.
     *
     * @return string[]
     * @since 14.0.0
     */
    public function getGroupRestrictions() : array;
    /**
     * Get the email-address for the room
     *
     * The email-address has to be globally unique
     *
     * @return string
     * @since 14.0.0
     */
    public function getEMail() : string;
    /**
     * Get corresponding backend object
     *
     * @return IBackend
     * @since 14.0.0
     */
    public function getBackend() : \OCP\Calendar\Room\IBackend;
}
/**
 * Interface IRoomMetadata
 *
 * This interface provides keys for common metadata.
 * Room Backends are not limited to this list and can provide
 * any metadata they want.
 *
 * @since 17.0.0
 */
interface IRoomMetadata
{
    /**
     * Type of room
     *
     * Allowed values for this key are:
     * - meeting-room
     * - lecture-hall
     * - seminar-room
     * - other
     *
     * @since 17.0.0
     */
    public const ROOM_TYPE = '{http://nextcloud.com/ns}room-type';
    /**
     * Seating capacity of the room
     *
     * @since 17.0.0
     */
    public const CAPACITY = '{http://nextcloud.com/ns}room-seating-capacity';
    /**
     * The physical address of the building this room is located in
     *
     * @since 17.0.0
     */
    public const BUILDING_ADDRESS = '{http://nextcloud.com/ns}room-building-address';
    /**
     * The story of the building this rooms is located in
     *
     * @since 17.0.0
     */
    public const BUILDING_STORY = '{http://nextcloud.com/ns}room-building-story';
    /**
     * The room-number
     *
     * @since 17.0.0
     */
    public const BUILDING_ROOM_NUMBER = '{http://nextcloud.com/ns}room-building-room-number';
    /**
     * Features provided by the room.
     * This is a stringified list of features.
     * Example: "PHONE,VIDEO-CONFERENCING"
     *
     * Standard features include:
     * - PHONE: This room is fitted with a phone
     * - VIDEO-CONFERENCING: This room is fitted with a video-conferencing system
     * - TV: This room is fitted with a TV
     * - PROJECTOR: This room is fitted with a projector
     * - WHITEBOARD: This room is fitted with a whiteboard
     * - WHEELCHAIR-ACCESSIBLE: This room is wheelchair-accessible
     *
     * @since 17.0.0
     */
    public const FEATURES = '{http://nextcloud.com/ns}room-features';
}
namespace OCP\Calendar;

/**
 * Interface ICalendar
 *
 * @since 13.0.0
 */
interface ICalendar
{
    /**
     * @return string defining the technical unique key
     * @since 13.0.0
     */
    public function getKey() : string;
    /**
     * In comparison to getKey() this function returns a unique uri within the scope of the principal
     * @since 24.0.0
     */
    public function getUri() : string;
    /**
     * In comparison to getKey() this function returns a human readable (maybe translated) name
     * @return null|string
     * @since 13.0.0
     */
    public function getDisplayName() : ?string;
    /**
     * Calendar color
     * @return null|string
     * @since 13.0.0
     */
    public function getDisplayColor() : ?string;
    /**
     * @param string $pattern which should match within the $searchProperties
     * @param array $searchProperties defines the properties within the query pattern should match
     * @param array $options - optional parameters:
     * 	['timerange' => ['start' => new DateTime(...), 'end' => new DateTime(...)]]
     * @param int|null $limit - limit number of search results
     * @param int|null $offset - offset for paging of search results
     * @return array an array of events/journals/todos which are arrays of key-value-pairs
     * @since 13.0.0
     */
    public function search(string $pattern, array $searchProperties = [], array $options = [], ?int $limit = null, ?int $offset = null) : array;
    /**
     * @return int build up using \OCP\Constants
     * @since 13.0.0
     */
    public function getPermissions() : int;
    /**
     * Whether the calendar is deleted
     * @since 26.0.0
     */
    public function isDeleted() : bool;
}
/**
 * This interface defines a lazy loading mechanism for
 * calendars for Public Consumption
 *
 * @since 23.0.0
 */
interface ICalendarProvider
{
    /**
     * @param string $principalUri URI of the principal
     * @param string[] $calendarUris optionally specify which calendars to load, or all if this array is empty
     * @return ICalendar[]
     * @since 23.0.0
     */
    public function getCalendars(string $principalUri, array $calendarUris = []) : array;
}
/**
 * Build a flexible, extendable query to the CalDAV backend
 *
 * @since 23.0.0
 */
interface ICalendarQuery
{
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_CATEGORIES = 'CATEGORIES';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_COMMENT = 'COMMENT';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_DESCRIPTION = 'DESCRIPTION';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_LOCATION = 'LOCATION';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_RESOURCES = 'RESOURCES';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_STATUS = 'STATUS';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_SUMMARY = 'SUMMARY';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_ATTENDEE = 'ATTENDEE';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_CONTACT = 'CONTACT';
    /**
     * @since 24.0.0
     */
    public const SEARCH_PROPERTY_ORGANIZER = 'ORGANIZER';
    /**
     * Limit the results to the calendar uri(s)
     *
     * @since 23.0.0
     */
    public function addSearchCalendar(string $calendarUri) : void;
    /**
     * Search the property values
     *
     * @since 23.0.0
     */
    public function setSearchPattern(string $pattern) : void;
    /**
     * Define the property name(s) to search for
     *
     * Note: Nextcloud only indexes *some* properties. You can not search for
     *       arbitrary properties.
     *
     * @param string $value any of the ICalendarQuery::SEARCH_PROPERTY_* values
     * @psalm-param ICalendarQuery::SEARCH_PROPERTY_* $value
     *
     * @since 23.0.0
     */
    public function addSearchProperty(string $value) : void;
    /**
     * @since 23.0.0
     */
    public function addType(string $value) : void;
    /**
     * @since 23.0.0
     */
    public function setTimerangeStart(\DateTimeImmutable $startTime) : void;
    /**
     * @since 23.0.0
     */
    public function setTimerangeEnd(\DateTimeImmutable $endTime) : void;
    /**
     * @since 23.0.0
     */
    public function setLimit(int $limit) : void;
    /**
     * @since 23.0.0
     */
    public function setOffset(int $offset) : void;
}
/**
 * Extends the current ICalendar interface
 * to add a public write method
 *
 * @since 23.0.0
 */
interface ICreateFromString extends \OCP\Calendar\ICalendar
{
    /**
     * @since 23.0.0
     *
     * @throws CalendarException
     */
    public function createFromString(string $name, string $calendarData) : void;
}
/**
 * Extends the current ICalendar interface
 * to add a public write method to handle
 * iMIP data
 *
 * @link https://www.rfc-editor.org/rfc/rfc6047
 *
 * @since 26.0.0
 */
interface IHandleImipMessage extends \OCP\Calendar\ICalendar
{
    /**
     * Handle an iMIP VEvent for validation and processing
     *
     * @since 26.0.0
     *
     * @throws CalendarException  on validation failure or calendar write error
     */
    public function handleIMipMessage(string $name, string $calendarData) : void;
}
/**
 * This class provides access to the Nextcloud CalDAV backend.
 * Use this class exclusively if you want to access calendars.
 *
 * Events/Journals/Todos in general will be expressed as an array of key-value-pairs.
 * The keys will match the property names defined in https://tools.ietf.org/html/rfc5545
 *
 * [
 *   'id' => 123,
 *   'type' => 'VEVENT',
 *   'calendar-key' => 42,
 *   'objects' => [
 *     [
 *       'SUMMARY' => ['FooBar', []],
 *       'DTSTART' => ['20171001T123456', ['TZID' => 'EUROPE/BERLIN']],
 *       'DURATION' => ['P1D', []],
 * 	     'ATTENDEE' => [
 *         ['mailto:bla@blub.com', ['CN' => 'Mr. Bla Blub']]
 *       ],
 *       'VALARM' => [
 * 	       [
 *           'TRIGGER' => ['19980101T050000Z', ['VALUE' => DATE-TIME]]
 *         ]
 *       ]
 *     ],
 *   ]
 * ]
 *
 * @since 13.0.0
 */
interface IManager
{
    /**
     * This function is used to search and find objects within the user's calendars.
     * In case $pattern is empty all events/journals/todos will be returned.
     *
     * @param string $pattern which should match within the $searchProperties
     * @param array $searchProperties defines the properties within the query pattern should match
     * @param array $options - optional parameters:
     * 	['timerange' => ['start' => new DateTime(...), 'end' => new DateTime(...)]]
     * @param integer|null $limit - limit number of search results
     * @param integer|null $offset - offset for paging of search results
     * @return array an array of events/journals/todos which are arrays of arrays of key-value-pairs
     * @since 13.0.0
     * @deprecated 23.0.0 use \OCP\Calendar\IManager::searchForPrincipal
     */
    public function search($pattern, array $searchProperties = [], array $options = [], $limit = null, $offset = null);
    /**
     * Check if calendars are available
     *
     * @return bool true if enabled, false if not
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function isEnabled();
    /**
     * Registers a calendar
     *
     * @param ICalendar $calendar
     * @return void
     * @since 13.0.0
     * @deprecated 23.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerCalendarProvider
     */
    public function registerCalendar(\OCP\Calendar\ICalendar $calendar);
    /**
     * Unregisters a calendar
     *
     * @param ICalendar $calendar
     * @return void
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function unregisterCalendar(\OCP\Calendar\ICalendar $calendar);
    /**
     * In order to improve lazy loading a closure can be registered which will be called in case
     * calendars are actually requested
     *
     * @param \Closure $callable
     * @return void
     * @since 13.0.0
     * @deprecated 23.0.0 use \OCP\AppFramework\Bootstrap\IRegistrationContext::registerCalendarProvider
     */
    public function register(\Closure $callable);
    /**
     * @return ICalendar[]
     * @since 13.0.0
     * @deprecated 23.0.0 use \OCP\Calendar\IManager::getCalendarsForPrincipal
     */
    public function getCalendars();
    /**
     * removes all registered calendar instances
     *
     * @return void
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function clear();
    /**
     * @param string $principalUri URI of the principal
     * @param string[] $calendarUris optionally specify which calendars to load, or all if this array is empty
     *
     * @return ICalendar[]
     * @since 23.0.0
     */
    public function getCalendarsForPrincipal(string $principalUri, array $calendarUris = []) : array;
    /**
     * Query a principals calendar(s)
     *
     * @param ICalendarQuery $query
     * @return array[]
     * @since 23.0.0
     */
    public function searchForPrincipal(\OCP\Calendar\ICalendarQuery $query) : array;
    /**
     * Build a new query for searchForPrincipal
     *
     * @return ICalendarQuery
     * @since 23.0.0
     */
    public function newQuery(string $principalUri) : \OCP\Calendar\ICalendarQuery;
    /**
     * Handle a iMip REPLY message
     *
     * @since 25.0.0
     */
    public function handleIMipReply(string $principalUri, string $sender, string $recipient, string $calendarData) : bool;
    /**
     * Handle a iMip CANCEL message
     *
     * @since 25.0.0
     */
    public function handleIMipCancel(string $principalUri, string $sender, ?string $replyTo, string $recipient, string $calendarData) : bool;
}
/**
 * Interface IMetadataProvider
 *
 * Provider for metadata of a resource or a room
 *
 * @since 17.0.0
 */
interface IMetadataProvider
{
    /**
     * Get a list of all metadata keys available for this room
     *
     * Room backends are allowed to return custom keys, beyond the ones
     * defined in this class. If they do, they should make sure to use their
     * own namespace.
     *
     * @return String[] - A list of available keys
     * @since 17.0.0
     */
    public function getAllAvailableMetadataKeys() : array;
    /**
     * Get whether or not a metadata key is set for this room
     *
     * @param string $key - The key to check for
     * @return bool - Whether or not key is available
     * @since 17.0.0
     */
    public function hasMetadataForKey(string $key) : bool;
    /**
     * Get the value for a metadata key
     *
     * @param string $key - The key to check for
     * @return string|null - The value stored for the key, null if no value stored
     * @since 17.0.0
     */
    public function getMetadataForKey(string $key) : ?string;
}
namespace OCP\Capabilities;

/**
 * Indicate that a capability should not be injected in the initial state
 * of the page as it might be expensive to query and not useful for the
 * webui.
 *
 * @since 24.0.0
 */
interface IInitialStateExcludedCapability
{
}
/**
 * Minimal interface that has to be implemented for a class to be considered
 * a capability.
 *
 * In an application use:
 *   $this->getContainer()->registerCapability('OCA\MY_APP\Capabilities');
 * To register capabilities.
 *
 * The class 'OCA\MY_APP\Capabilities' must then implement ICapability
 *
 * @since 8.2.0
 */
interface ICapability
{
    /**
     * Function an app uses to return the capabilities
     *
     * @return array Array containing the apps capabilities
     * @since 8.2.0
     */
    public function getCapabilities();
}
/**
 * @inheritdoc
 *
 * @since 13.0.0
 */
interface IPublicCapability extends \OCP\Capabilities\ICapability
{
}
namespace OCP\EventDispatcher;

/**
 * Class GenericEvent
 *
 * convenience reimplementation of \Symfony\Component\GenericEvent against
 * \OCP\EventDispatcher\Event
 *
 * @since 18.0.0
 * @deprecated 22.0.0 use \OCP\EventDispatcher\Event
 */
class GenericEvent extends \OCP\EventDispatcher\Event implements \ArrayAccess, \IteratorAggregate
{
    /** @deprecated 22.0.0 */
    protected $subject;
    /** @deprecated 22.0.0 */
    protected $arguments;
    /**
     * Encapsulate an event with $subject and $args.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function __construct($subject = null, array $arguments = [])
    {
    }
    /**
     * Getter for subject property.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function getSubject()
    {
    }
    /**
     * Get argument by key.
     *
     * @throws InvalidArgumentException if key is not found
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function getArgument(string $key)
    {
    }
    /**
     * Add argument to event.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function setArgument($key, $value) : \OCP\EventDispatcher\GenericEvent
    {
    }
    /**
     * Getter for all arguments.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function getArguments() : array
    {
    }
    /**
     * Set args property.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function setArguments(array $args = []) : \OCP\EventDispatcher\GenericEvent
    {
    }
    /**
     * Has argument.
     *
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function hasArgument($key) : bool
    {
    }
    /**
     * Retrieve an external iterator
     *
     * @link https://php.net/manual/en/iteratoraggregate.getiterator.php
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function getIterator() : \Traversable
    {
    }
    /**
     * Whether a offset exists
     *
     * @link https://php.net/manual/en/arrayaccess.offsetexists.php
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function offsetExists($offset) : bool
    {
    }
    /**
     * Offset to retrieve
     *
     * @link https://php.net/manual/en/arrayaccess.offsetget.php
     * @since 18.0.0
     * @deprecated 22.0.0
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
    }
    /**
     * Offset to set
     *
     * @link https://php.net/manual/en/arrayaccess.offsetset.php
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function offsetSet($offset, $value) : void
    {
    }
    /**
     * Offset to unset
     *
     * @link https://php.net/manual/en/arrayaccess.offsetunset.php
     * @since 18.0.0
     * @deprecated 22.0.0
     */
    public function offsetUnset($offset) : void
    {
    }
}
namespace OCP\Collaboration\AutoComplete;

/**
 * @since 16.0.0
 */
class AutoCompleteEvent extends \OCP\EventDispatcher\GenericEvent
{
    /**
     * @param array $arguments
     * @since 16.0.0
     */
    public function __construct(array $arguments)
    {
    }
    /**
     * @since 16.0.0
     */
    public function getResults() : array
    {
    }
    /**
     * @param array $results
     * @since 16.0.0
     */
    public function setResults(array $results) : void
    {
    }
    /**
     * @since 16.0.0
     */
    public function getSearchTerm() : string
    {
    }
    /**
     * @return int[]
     * @since 16.0.0
     */
    public function getShareTypes() : array
    {
    }
    /**
     * @since 16.0.0
     */
    public function getItemType() : string
    {
    }
    /**
     * @since 16.0.0
     */
    public function getItemId() : string
    {
    }
    /**
     * @since 16.0.0
     */
    public function getSorter() : string
    {
    }
    /**
     * @since 16.0.0
     */
    public function getLimit() : int
    {
    }
}
/**
 * Interface ISorter
 *
 * Sorts the list of .e.g users for auto completion
 *
 * @since 13.0.0
 */
interface ISorter
{
    /**
     * @return string The ID of the sorter, e.g. commenters
     * @since 13.0.0
     */
    public function getId();
    /**
     * executes the sort action
     *
     * @param array $sortArray the array to be sorted, provided as reference
     * @param array $context carries key 'itemType' and 'itemId' of the source object (e.g. a file)
     * @since 13.0.0
     */
    public function sort(array &$sortArray, array $context);
}
/**
 * Interface IManager
 *
 * @since 13.0.0
 */
interface IManager
{
    /**
     * @param string $className – class name of the ISorter implementation
     * @since 13.0.0
     */
    public function registerSorter($className);
    /**
     * @param array $sorters	list of sorter IDs, separated by "|"
     * @param array $sortArray	array representation of OCP\Collaboration\Collaborators\ISearchResult
     * @param array $context	context info of the search, keys: itemType, itemId
     * @since 13.0.0
     */
    public function runSorters(array $sorters, array &$sortArray, array $context);
}
namespace OCP\Collaboration\Collaborators;

/**
 * Interface ISearch
 *
 * @since 13.0.0
 */
interface ISearch
{
    /**
     * @param string $search
     * @param array $shareTypes
     * @param bool $lookup
     * @param int $limit
     * @param int $offset
     * @return array with two elements, 1st ISearchResult as array, 2nd a bool indicating whether more result are available
     * @since 13.0.0
     */
    public function search($search, array $shareTypes, $lookup, $limit, $offset);
    /**
     * @param array $pluginInfo with keys 'shareType' containing the name of a corresponding constant in \OCP\Share and
     * 	'class' with the class name of the plugin
     * @since 13.0.0
     */
    public function registerPlugin(array $pluginInfo);
}
/**
 * Interface ISearchPlugin
 *
 * @since 13.0.0
 */
interface ISearchPlugin
{
    /**
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @param ISearchResult $searchResult
     * @return bool whether the plugin has more results
     * @since 13.0.0
     */
    public function search($search, $limit, $offset, \OCP\Collaboration\Collaborators\ISearchResult $searchResult);
}
/**
 * Interface ISearchResult
 *
 * @since 13.0.0
 */
interface ISearchResult
{
    /**
     * @param SearchResultType $type
     * @param array $matches
     * @param array|null $exactMatches
     * @since 13.0.0
     */
    public function addResultSet(\OCP\Collaboration\Collaborators\SearchResultType $type, array $matches, array $exactMatches = null);
    /**
     * @param SearchResultType $type
     * @param string $collaboratorId
     * @return bool
     * @since 13.0.0
     */
    public function hasResult(\OCP\Collaboration\Collaborators\SearchResultType $type, $collaboratorId);
    /**
     * Removes all result where $collaborationId exactly matches shareWith of
     * any of wide and exact result matches of the given type.
     *
     * @since 22.0.0
     */
    public function removeCollaboratorResult(\OCP\Collaboration\Collaborators\SearchResultType $type, string $collaboratorId) : bool;
    /**
     * @param SearchResultType $type
     * @since 13.0.0
     */
    public function unsetResult(\OCP\Collaboration\Collaborators\SearchResultType $type);
    /**
     * @param SearchResultType $type
     * @since 13.0.0
     */
    public function markExactIdMatch(\OCP\Collaboration\Collaborators\SearchResultType $type);
    /**
     * @param SearchResultType $type
     * @return bool
     * @since 13.0.0
     */
    public function hasExactIdMatch(\OCP\Collaboration\Collaborators\SearchResultType $type);
    /**
     * @return array
     * @since 13.0.0
     */
    public function asArray();
}
/**
 * Class SearchResultType
 *
 * @since 13.0.0
 */
class SearchResultType
{
    /** @var string  */
    protected $label;
    /**
     * SearchResultType constructor.
     *
     * @param string $label
     * @since 13.0.0
     */
    public function __construct($label)
    {
    }
    /**
     * @return string
     * @since 13.0.0
     */
    public function getLabel()
    {
    }
    /**
     * @param $type
     * @return string
     * @throws \InvalidArgumentException
     * @since 13.0.0
     */
    protected function getValidatedType($type)
    {
    }
}
namespace OCP\Collaboration\Reference;

/**
 * @since 25.0.0
 */
interface IReferenceProvider
{
    /**
     * Validate that a given reference identifier matches the current provider
     *
     * @since 25.0.0
     */
    public function matchReference(string $referenceText) : bool;
    /**
     * Return a reference with its metadata for a given reference identifier
     *
     * @since 25.0.0
     */
    public function resolveReference(string $referenceText) : ?\OCP\Collaboration\Reference\IReference;
    /**
     * Return true if the reference metadata can be globally cached
     *
     * @since 25.0.0
     */
    public function getCachePrefix(string $referenceId) : string;
    /**
     * Return a custom cache key to be used for caching the metadata
     * This could be for example the current user id if the reference
     * access permissions are different for each user
     *
     * Should return null, if the cache is only related to the
     * reference id and has no further dependency
     *
     * @since 25.0.0
     */
    public function getCacheKey(string $referenceId) : ?string;
}
/**
 * Event that apps can emit on their page rendering to trigger loading of aditional
 * scripts for reference widget rendering
 *
 * @since 25.0.0
 */
class RenderReferenceEvent extends \OCP\EventDispatcher\Event
{
}
/**
 * @since 26.0.0
 */
interface IDiscoverableReferenceProvider extends \OCP\Collaboration\Reference\IReferenceProvider
{
    /**
     * @return string Unique id that identifies the reference provider
     * @since 26.0.0
     */
    public function getId() : string;
    /**
     * @return string User facing title of the widget
     * @since 26.0.0
     */
    public function getTitle() : string;
    /**
     * @return int Initial order for reference provider sorting
     * @since 26.0.0
     */
    public function getOrder() : int;
    /**
     * @return string url to an icon that can be displayed next to the reference provider title
     * @since 26.0.0
     */
    public function getIconUrl() : string;
    /**
     * @return array representation of the provider
     * @since 26.0.0
     */
    public function jsonSerialize() : array;
}
/**
 * @since 26.0.0
 */
abstract class ADiscoverableReferenceProvider implements \OCP\Collaboration\Reference\IDiscoverableReferenceProvider, \JsonSerializable
{
    /**
     * @since 26.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * @since 25.0.0
 */
interface IReference extends \JsonSerializable
{
    /**
     * @since 25.0.0
     */
    public function getId() : string;
    /**
     * Accessible flag indicates if the user has access to the provided reference
     *
     * @since 25.0.0
     */
    public function setAccessible(bool $accessible) : void;
    /**
     * Accessible flag indicates if the user has access to the provided reference
     *
     * @since 25.0.0
     */
    public function getAccessible() : bool;
    /**
     * @since 25.0.0
     */
    public function setTitle(string $title) : void;
    /**
     * @since 25.0.0
     */
    public function getTitle() : string;
    /**
     * @since 25.0.0
     */
    public function setDescription(?string $description) : void;
    /**
     * @since 25.0.0
     */
    public function getDescription() : ?string;
    /**
     * @since 25.0.0
     */
    public function setImageUrl(?string $imageUrl) : void;
    /**
     * @since 25.0.0
     */
    public function getImageUrl() : ?string;
    /**
     * @since 25.0.0
     */
    public function setImageContentType(?string $contentType) : void;
    /**
     * @since 25.0.0
     */
    public function getImageContentType() : ?string;
    /**
     * @since 25.0.0
     */
    public function setUrl(?string $url) : void;
    /**
     * @since 25.0.0
     */
    public function getUrl() : string;
    /**
     * Set the reference specific rich object representation
     *
     * @since 25.0.0
     */
    public function setRichObject(string $type, ?array $richObject) : void;
    /**
     * Returns the type of the reference specific rich object
     *
     * @since 25.0.0
     */
    public function getRichObjectType() : string;
    /**
     * Returns the reference specific rich object representation
     *
     * @since 25.0.0
     */
    public function getRichObject() : array;
    /**
     * Returns the opengraph rich object representation
     *
     * @since 25.0.0
     */
    public function getOpenGraphObject() : array;
}
/**
 * @since 25.0.0
 */
interface IReferenceManager
{
    /**
     * Return all reference identifiers within a string as an array
     *
     * @return string[] Array of found references (urls)
     * @since 25.0.0
     */
    public function extractReferences(string $text) : array;
    /**
     * Resolve a given reference id to its metadata with all available providers
     *
     * This method has a fallback to always provide the open graph metadata,
     * but may still return null in case this is disabled or the fetching fails
     *
     * @since 25.0.0
     */
    public function resolveReference(string $referenceId) : ?\OCP\Collaboration\Reference\IReference;
    /**
     * Get a reference by its cache key
     *
     * @since 25.0.0
     */
    public function getReferenceByCacheKey(string $cacheKey) : ?\OCP\Collaboration\Reference\IReference;
    /**
     * Explicitly get a reference from the cache to avoid heavy fetches for cases
     * the cache can then be filled with a separate request from the frontend
     *
     * @since 25.0.0
     */
    public function getReferenceFromCache(string $referenceId) : ?\OCP\Collaboration\Reference\IReference;
    /**
     * Invalidate all cache entries with a prefix or just one if the cache key is provided
     *
     * @since 25.0.0
     */
    public function invalidateCache(string $cachePrefix, ?string $cacheKey = null) : void;
    /**
     * Get information on discoverable reference providers (id, title, icon and order)
     * If the provider is searchable, also get the list of supported unified search providers
     *
     * @return IDiscoverableReferenceProvider[]
     * @since 26.0.0
     */
    public function getDiscoverableProviders() : array;
    /**
     * Update or set the last used timestamp for a provider
     *
     * @param string $userId
     * @param string $providerId
     * @param int|null $timestamp use current timestamp if null
     * @return bool
     * @since 26.0.0
     */
    public function touchProvider(string $userId, string $providerId, ?int $timestamp = null) : bool;
    /**
     * Get all known last used timestamps for reference providers
     *
     * @return int[]
     * @since 26.0.0
     */
    public function getUserProviderTimestamps() : array;
}
/**
 * @since 26.0.0
 */
interface ISearchableReferenceProvider extends \OCP\Collaboration\Reference\IDiscoverableReferenceProvider
{
    /**
     * @return string[] list of search provider IDs that can be used by the vue-richtext picker
     * @since 26.0.0
     */
    public function getSupportedSearchProviderIds() : array;
}
/**
 * @since 25.0.0
 */
class Reference implements \OCP\Collaboration\Reference\IReference
{
    protected string $reference;
    protected bool $accessible = true;
    protected ?string $title = null;
    protected ?string $description = null;
    protected ?string $imageUrl = null;
    protected ?string $contentType = null;
    protected ?string $url = null;
    protected ?string $richObjectType = null;
    protected ?array $richObject = null;
    /**
     * @since 25.0.0
     */
    public function __construct(string $reference)
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getId() : string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setAccessible(bool $accessible) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getAccessible() : bool
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setTitle(string $title) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getTitle() : string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setDescription(?string $description) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getDescription() : ?string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setImageUrl(?string $imageUrl) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getImageUrl() : ?string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setImageContentType(?string $contentType) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getImageContentType() : ?string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setUrl(?string $url) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getUrl() : string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function setRichObject(string $type, ?array $richObject) : void
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getRichObjectType() : string
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getRichObject() : array
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function getOpenGraphObject() : array
    {
    }
    /**
     * @param IReference $reference
     * @return array
     * @since 25.0.0
     */
    public static function toCache(\OCP\Collaboration\Reference\IReference $reference) : array
    {
    }
    /**
     * @param array $cache
     * @return IReference
     * @since 25.0.0
     */
    public static function fromCache(array $cache) : \OCP\Collaboration\Reference\IReference
    {
    }
    /**
     * @inheritdoc
     * @since 25.0.0
     */
    public function jsonSerialize()
    {
    }
}
namespace OCP\Collaboration\Resources;

/**
 * @since 16.0.0
 */
class CollectionException extends \RuntimeException
{
}
/**
 * This event is used by apps to register their own frontend scripts for integrating
 * projects in their app. Apps also need to dispatch the event in order to load
 * scripts during page load
 *
 * @see https://docs.nextcloud.com/server/latest/developer_manual/digging_deeper/projects.html
 * @since 25.0.0
 */
class LoadAdditionalScriptsEvent extends \OCP\EventDispatcher\Event
{
}
/**
 * @since 16.0.0
 */
class ResourceException extends \RuntimeException
{
}
/**
 * @since 16.0.0
 */
interface ICollection
{
    /**
     * @return int
     * @since 16.0.0
     */
    public function getId() : int;
    /**
     * @return string
     * @since 16.0.0
     */
    public function getName() : string;
    /**
     * @param string $name
     * @since 16.0.0
     */
    public function setName(string $name) : void;
    /**
     * @return IResource[]
     * @since 16.0.0
     */
    public function getResources() : array;
    /**
     * Adds a resource to a collection
     *
     * @param IResource $resource
     * @throws ResourceException when the resource is already part of the collection
     * @since 16.0.0
     */
    public function addResource(\OCP\Collaboration\Resources\IResource $resource) : void;
    /**
     * Removes a resource from a collection
     *
     * @param IResource $resource
     * @since 16.0.0
     */
    public function removeResource(\OCP\Collaboration\Resources\IResource $resource) : void;
    /**
     * Can a user/guest access the collection
     *
     * @param IUser|null $user
     * @return bool
     * @since 16.0.0
     */
    public function canAccess(?\OCP\IUser $user) : bool;
}
/**
 * @since 16.0.0
 */
interface IProvider
{
    /**
     * Get the resource type of the provider
     *
     * @return string
     * @since 16.0.0
     */
    public function getType() : string;
    /**
     * Get the rich object data of a resource
     *
     * @param IResource $resource
     * @return array
     * @since 16.0.0
     */
    public function getResourceRichObject(\OCP\Collaboration\Resources\IResource $resource) : array;
    /**
     * Can a user/guest access the collection
     *
     * @param IResource $resource
     * @param IUser|null $user
     * @return bool
     * @since 16.0.0
     */
    public function canAccessResource(\OCP\Collaboration\Resources\IResource $resource, ?\OCP\IUser $user) : bool;
}
/**
 * @since 16.0.0
 */
interface IManager extends \OCP\Collaboration\Resources\IProvider
{
    /**
     * @param int $id
     * @return ICollection
     * @throws CollectionException when the collection could not be found
     * @since 16.0.0
     */
    public function getCollection(int $id) : \OCP\Collaboration\Resources\ICollection;
    /**
     * @param int $id
     * @param IUser|null $user
     * @return ICollection
     * @throws CollectionException when the collection could not be found
     * @since 16.0.0
     */
    public function getCollectionForUser(int $id, ?\OCP\IUser $user) : \OCP\Collaboration\Resources\ICollection;
    /**
     * @param string $name
     * @return ICollection
     * @since 16.0.0
     */
    public function newCollection(string $name) : \OCP\Collaboration\Resources\ICollection;
    /**
     * Can a user/guest access the collection
     *
     * @param ICollection $collection
     * @param IUser|null $user
     * @return bool
     * @since 16.0.0
     */
    public function canAccessCollection(\OCP\Collaboration\Resources\ICollection $collection, ?\OCP\IUser $user) : bool;
    /**
     * @param IUser|null $user
     * @since 16.0.0
     */
    public function invalidateAccessCacheForUser(?\OCP\IUser $user) : void;
    /**
     * @param IResource $resource
     * @since 16.0.0
     */
    public function invalidateAccessCacheForResource(\OCP\Collaboration\Resources\IResource $resource) : void;
    /**
     * @param IResource $resource
     * @param IUser|null $user
     * @since 16.0.0
     */
    public function invalidateAccessCacheForResourceByUser(\OCP\Collaboration\Resources\IResource $resource, ?\OCP\IUser $user) : void;
    /**
     * @param IProvider $provider
     * @since 16.0.0
     */
    public function invalidateAccessCacheForProvider(\OCP\Collaboration\Resources\IProvider $provider) : void;
    /**
     * @param IProvider $provider
     * @param IUser|null $user
     * @since 16.0.0
     */
    public function invalidateAccessCacheForProviderByUser(\OCP\Collaboration\Resources\IProvider $provider, ?\OCP\IUser $user) : void;
    /**
     * @param string $type
     * @param string $id
     * @return IResource
     * @since 16.0.0
     */
    public function createResource(string $type, string $id) : \OCP\Collaboration\Resources\IResource;
    /**
     * @param string $type
     * @param string $id
     * @param IUser|null $user
     * @return IResource
     * @throws ResourceException
     * @since 16.0.0
     */
    public function getResourceForUser(string $type, string $id, ?\OCP\IUser $user) : \OCP\Collaboration\Resources\IResource;
    /**
     * @param string $provider
     * @since 16.0.0
     * @deprecated 18.0.0 Use IProviderManager::registerResourceProvider instead
     */
    public function registerResourceProvider(string $provider) : void;
}
/**
 * @since 18.0.0
 */
interface IProviderManager
{
    /**
     * @return IProvider[] list of resource providers
     * @since 18.0.0
     */
    public function getResourceProviders() : array;
    /**
     * @param string $provider provider's class name
     * @since 18.0.0
     */
    public function registerResourceProvider(string $provider) : void;
}
/**
 * @since 16.0.0
 */
interface IResource
{
    /**
     * @return string
     * @since 16.0.0
     */
    public function getType() : string;
    /**
     * @return string
     * @since 16.0.0
     */
    public function getId() : string;
    /**
     * @return array
     * @since 16.0.0
     */
    public function getRichObject() : array;
    /**
     * Can a user/guest access the resource
     *
     * @param IUser|null $user
     * @return bool
     * @since 16.0.0
     */
    public function canAccess(?\OCP\IUser $user) : bool;
    /**
     * @return ICollection[]
     * @since 16.0.0
     */
    public function getCollections() : array;
}
namespace OCP;

/**
 * Simple RGB color container
 * @since 25.0.0
 */
class Color
{
    /**
     * @since 25.0.0
     */
    public function __construct($r, $g, $b)
    {
    }
    /**
     * Returns the red color component of this color as an int from 0 to 255
     *
     * @since 25.0.0
     */
    public function red() : int
    {
    }
    /**
     * Returns the red color component of this color as a float from 0 to 1
     *
     * @since 25.0.0
     */
    public function redF() : float
    {
    }
    /**
     * Returns the green color component of this color as an int from 0 to 255
     *
     * @since 25.0.0
     */
    public function green() : int
    {
    }
    /**
     * Returns the green color component of this color as a float from 0 to 1
     *
     * @since 25.0.0
     */
    public function greenF() : float
    {
    }
    /**
     * Returns the green blue component of this color as an int from 0 to 255
     *
     * @since 25.0.0
     */
    public function blue() : int
    {
    }
    /**
     * Returns the blue color component of this color as a float from 0 to 1
     *
     * @since 25.0.0
     */
    public function blueF() : float
    {
    }
    /**
     * Returns the name of the color in the format "#RRGGBB"; i.e. a "#" character followed by three two-digit hexadecimal numbers.
     *
     * @since 25.0.0
     */
    public function name() : string
    {
    }
    /**
     * Mix two colors
     *
     * @param int $steps the number of intermediate colors that should be generated for the palette
     * @param Color $color1 the first color
     * @param Color $color2 the second color
     * @return list<Color>
     * @since 25.0.0
     */
    public static function mixPalette(int $steps, \OCP\Color $color1, \OCP\Color $color2) : array
    {
    }
    /**
     * Alpha blend another color with a given opacity to this color
     *
     * @return Color The new color
     * @since 25.0.0
     */
    public function alphaBlending(float $opacity, \OCP\Color $source) : \OCP\Color
    {
    }
}
namespace OCP\Command;

/**
 * Interface IBus
 *
 * @since 8.1.0
 */
interface IBus
{
    /**
     * Schedule a command to be fired
     *
     * @param \OCP\Command\ICommand | callable $command
     * @since 8.1.0
     */
    public function push($command);
    /**
     * Require all commands using a trait to be run synchronous
     *
     * @param string $trait
     * @since 8.1.0
     */
    public function requireSync($trait);
}
/**
 * Interface ICommand
 *
 * @since 8.1.0
 */
interface ICommand
{
    /**
     * Run the command
     * @since 8.1.0
     */
    public function handle();
}
namespace OCP\Comments;

/**
 * Interface IComment
 *
 * This class represents a comment
 *
 * @since 9.0.0
 */
interface IComment
{
    public const MAX_MESSAGE_LENGTH = 1000;
    /**
     * returns the ID of the comment
     *
     * It may return an empty string, if the comment was not stored.
     * It is expected that the concrete Comment implementation gives an ID
     * by itself (e.g. after saving).
     *
     * @return string
     * @since 9.0.0
     */
    public function getId();
    /**
     * sets the ID of the comment and returns itself
     *
     * It is only allowed to set the ID only, if the current id is an empty
     * string (which means it is not stored in a database, storage or whatever
     * the concrete implementation does), or vice versa. Changing a given ID is
     * not permitted and must result in an IllegalIDChangeException.
     *
     * @param string $id
     * @return IComment
     * @throws IllegalIDChangeException
     * @since 9.0.0
     */
    public function setId($id);
    /**
     * returns the parent ID of the comment
     *
     * @return string
     * @since 9.0.0
     */
    public function getParentId();
    /**
     * sets the parent ID and returns itself
     * @param string $parentId
     * @return IComment
     * @since 9.0.0
     */
    public function setParentId($parentId);
    /**
     * returns the topmost parent ID of the comment
     *
     * @return string
     * @since 9.0.0
     */
    public function getTopmostParentId();
    /**
     * sets the topmost parent ID and returns itself
     *
     * @param string $id
     * @return IComment
     * @since 9.0.0
     */
    public function setTopmostParentId($id);
    /**
     * returns the number of children
     *
     * @return int
     * @since 9.0.0
     */
    public function getChildrenCount();
    /**
     * sets the number of children
     *
     * @param int $count
     * @return IComment
     * @since 9.0.0
     */
    public function setChildrenCount($count);
    /**
     * returns the message of the comment
     *
     * @return string
     * @since 9.0.0
     */
    public function getMessage();
    /**
     * sets the message of the comment and returns itself
     *
     * When the given message length exceeds MAX_MESSAGE_LENGTH an
     * MessageTooLongException shall be thrown.
     *
     * @param string $message
     * @param int $maxLength
     * @return IComment
     * @throws MessageTooLongException
     * @since 9.0.0 - $maxLength added in 16.0.2
     */
    public function setMessage($message, $maxLength = self::MAX_MESSAGE_LENGTH);
    /**
     * returns an array containing mentions that are included in the comment
     *
     * @return array each mention provides a 'type' and an 'id', see example below
     * @since 11.0.0
     *
     * The return array looks like:
     * [
     *   [
     *     'type' => 'user',
     *     'id' => 'citizen4'
     *   ],
     *   [
     *     'type' => 'group',
     *     'id' => 'media'
     *   ],
     *   …
     * ]
     *
     */
    public function getMentions();
    /**
     * returns the verb of the comment
     *
     * @return string
     * @since 9.0.0
     */
    public function getVerb();
    /**
     * sets the verb of the comment, e.g. 'comment' or 'like'
     *
     * @param string $verb
     * @return IComment
     * @since 9.0.0
     */
    public function setVerb($verb);
    /**
     * returns the actor type
     *
     * @return string
     * @since 9.0.0
     */
    public function getActorType();
    /**
     * returns the actor ID
     *
     * @return string
     * @since 9.0.0
     */
    public function getActorId();
    /**
     * sets (overwrites) the actor type and id
     *
     * @param string $actorType e.g. 'users'
     * @param string $actorId e.g. 'zombie234'
     * @return IComment
     * @since 9.0.0
     */
    public function setActor($actorType, $actorId);
    /**
     * returns the creation date of the comment.
     *
     * If not explicitly set, it shall default to the time of initialization.
     *
     * @return \DateTime
     * @since 9.0.0
     */
    public function getCreationDateTime();
    /**
     * sets the creation date of the comment and returns itself
     *
     * @param \DateTime $dateTime
     * @return IComment
     * @since 9.0.0
     */
    public function setCreationDateTime(\DateTime $dateTime);
    /**
     * returns the date of the most recent child
     *
     * @return \DateTime
     * @since 9.0.0
     */
    public function getLatestChildDateTime();
    /**
     * sets the date of the most recent child
     *
     * @param \DateTime|null $dateTime
     * @return IComment
     * @since 9.0.0
     */
    public function setLatestChildDateTime(?\DateTime $dateTime = null);
    /**
     * returns the object type the comment is attached to
     *
     * @return string
     * @since 9.0.0
     */
    public function getObjectType();
    /**
     * returns the object id the comment is attached to
     *
     * @return string
     * @since 9.0.0
     */
    public function getObjectId();
    /**
     * sets (overwrites) the object of the comment
     *
     * @param string $objectType e.g. 'files'
     * @param string $objectId e.g. '16435'
     * @return IComment
     * @since 9.0.0
     */
    public function setObject($objectType, $objectId);
    /**
     * returns the reference id of the comment
     *
     * @return string|null
     * @since 19.0.0
     */
    public function getReferenceId() : ?string;
    /**
     * sets (overwrites) the reference id of the comment
     *
     * @param string|null $referenceId e.g. sha256 hash sum
     * @return IComment
     * @since 19.0.0
     */
    public function setReferenceId(?string $referenceId) : \OCP\Comments\IComment;
    /**
     * Returns the reactions array if exists
     *
     * The keys is the emoji of reaction and the value is the total.
     *
     * @return array<string, integer> e.g. ["👍":1]
     * @since 24.0.0
     */
    public function getReactions() : array;
    /**
     * Set summarized array of reactions by reaction type
     *
     * The keys is the emoji of reaction and the value is the total.
     *
     * @param array<string, integer>|null $reactions e.g. ["👍":1]
     * @return IComment
     * @since 24.0.0
     */
    public function setReactions(?array $reactions) : \OCP\Comments\IComment;
    /**
     * Set message expire date
     *
     * @param \DateTime|null $dateTime
     * @return IComment
     * @since 25.0.0
     */
    public function setExpireDate(?\DateTime $dateTime) : \OCP\Comments\IComment;
    /**
     * Get message expire date
     *
     * @return ?\DateTime
     * @since 25.0.0
     */
    public function getExpireDate() : ?\DateTime;
}
/**
 * Exception for illegal attempts to modify a comment ID
 * @since 9.0.0
 */
class IllegalIDChangeException extends \Exception
{
}
/**
 * Exception thrown when a comment message exceeds the allowed character limit
 * @since 9.0.0
 */
class MessageTooLongException extends \OverflowException
{
}
/**
 * Exception for not found entity
 * @since 9.0.0
 */
class NotFoundException extends \Exception
{
}
/**
 * Class CommentsEvent
 *
 * @since 9.0.0
 */
class CommentsEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_ADD = 'OCP\\Comments\\ICommentsManager::addComment';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_PRE_UPDATE = 'OCP\\Comments\\ICommentsManager::preUpdateComment';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_UPDATE = 'OCP\\Comments\\ICommentsManager::updateComment';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_DELETE = 'OCP\\Comments\\ICommentsManager::deleteComment';
    /** @var string */
    protected $event;
    /** @var IComment */
    protected $comment;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @param IComment $comment
     * @since 9.0.0
     */
    public function __construct($event, \OCP\Comments\IComment $comment)
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getEvent()
    {
    }
    /**
     * @return IComment
     * @since 9.0.0
     */
    public function getComment()
    {
    }
}
/**
 * Interface ICommentsEventHandler
 *
 * @since 11.0.0
 */
interface ICommentsEventHandler
{
    /**
     * @param CommentsEvent $event
     * @since 11.0.0
     */
    public function handle(\OCP\Comments\CommentsEvent $event);
}
/**
 * Interface ICommentsManagerFactory
 *
 * This class is responsible for instantiating and returning an ICommentsManager
 * instance.
 *
 * @since 9.0.0
 */
interface ICommentsManagerFactory
{
    /**
     * Constructor for the comments manager factory
     *
     * @param IServerContainer $serverContainer server container
     * @since 9.0.0
     */
    public function __construct(\OCP\IServerContainer $serverContainer);
    /**
     * creates and returns an instance of the ICommentsManager
     *
     * @return ICommentsManager
     * @since 9.0.0
     */
    public function getManager();
}
/**
 * Class CommentsEntityEvent
 *
 * @since 9.1.0
 */
class CommentsEntityEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_ENTITY = 'OCP\\Comments\\ICommentsManager::registerEntity';
    /** @var string */
    protected $event;
    /** @var \Closure[] */
    protected $collections;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @since 9.1.0
     */
    public function __construct($event)
    {
    }
    /**
     * @param string $name
     * @param \Closure $entityExistsFunction The closure should take one
     *                 argument, which is the id of the entity, that comments
     *                 should be handled for. The return should then be bool,
     *                 depending on whether comments are allowed (true) or not.
     * @throws \OutOfBoundsException when the entity name is already taken
     * @since 9.1.0
     */
    public function addEntityCollection($name, \Closure $entityExistsFunction)
    {
    }
    /**
     * @return \Closure[]
     * @since 9.1.0
     */
    public function getEntityCollections()
    {
    }
}
/**
 * Interface ICommentsManager
 *
 * This class manages the access to comments
 *
 * @since 9.0.0
 */
interface ICommentsManager
{
    /**
     * @const DELETED_USER type and id for a user that has been deleted
     * @see deleteReferencesOfActor
     * @since 9.0.0
     *
     * To be used as replacement for user type actors in deleteReferencesOfActor().
     *
     * User interfaces shall show "Deleted user" as display name, if needed.
     */
    public const DELETED_USER = 'deleted_users';
    /**
     * returns a comment instance
     *
     * @param string $id the ID of the comment
     * @return IComment
     * @throws NotFoundException
     * @since 9.0.0
     */
    public function get($id);
    /**
     * returns the comment specified by the id and all it's child comments
     *
     * @param string $id
     * @param int $limit max number of entries to return, 0 returns all
     * @param int $offset the start entry
     * @return array
     * @since 9.0.0
     *
     * The return array looks like this
     * [
     * 	 'comment' => IComment, // root comment
     *   'replies' =>
     *   [
     *     0 =>
     *     [
     *       'comment' => IComment,
     *       'replies' =>
     *       [
     *         0 =>
     *         [
     *           'comment' => IComment,
     *           'replies' => [ … ]
     *         ],
     *         …
     *       ]
     *     ]
     *     1 =>
     *     [
     *       'comment' => IComment,
     *       'replies'=> [ … ]
     *     ],
     *     …
     *   ]
     * ]
     */
    public function getTree($id, $limit = 0, $offset = 0);
    /**
     * returns comments for a specific object (e.g. a file).
     *
     * The sort order is always newest to oldest.
     *
     * @param string $objectType the object type, e.g. 'files'
     * @param string $objectId the id of the object
     * @param int $limit optional, number of maximum comments to be returned. if
     * not specified, all comments are returned.
     * @param int $offset optional, starting point
     * @param \DateTime|null $notOlderThan optional, timestamp of the oldest comments
     * that may be returned
     * @return IComment[]
     * @since 9.0.0
     */
    public function getForObject($objectType, $objectId, $limit = 0, $offset = 0, \DateTime $notOlderThan = null);
    /**
     * @param string $objectType the object type, e.g. 'files'
     * @param string $objectId the id of the object
     * @param int $lastKnownCommentId the last known comment (will be used as offset)
     * @param string $sortDirection direction of the comments (`asc` or `desc`)
     * @param int $limit optional, number of maximum comments to be returned. if
     * set to 0, all comments are returned.
     * @param bool $includeLastKnown
     * @return IComment[]
     * @since 14.0.0
     * @deprecated 24.0.0 - Use getCommentsWithVerbForObjectSinceComment instead
     */
    public function getForObjectSince(string $objectType, string $objectId, int $lastKnownCommentId, string $sortDirection = 'asc', int $limit = 30, bool $includeLastKnown = false) : array;
    /**
     * @param string $objectType the object type, e.g. 'files'
     * @param string $objectId the id of the object
     * @param string[] $verbs List of verbs to filter by
     * @param int $lastKnownCommentId the last known comment (will be used as offset)
     * @param string $sortDirection direction of the comments (`asc` or `desc`)
     * @param int $limit optional, number of maximum comments to be returned. if
     * set to 0, all comments are returned.
     * @param bool $includeLastKnown
     * @return IComment[]
     * @since 24.0.0
     */
    public function getCommentsWithVerbForObjectSinceComment(string $objectType, string $objectId, array $verbs, int $lastKnownCommentId, string $sortDirection = 'asc', int $limit = 30, bool $includeLastKnown = false) : array;
    /**
     * Search for comments with a given content
     *
     * @param string $search content to search for
     * @param string $objectType Limit the search by object type
     * @param string $objectId Limit the search by object id
     * @param string $verb Limit the verb of the comment
     * @param int $offset
     * @param int $limit
     * @return IComment[]
     * @since 14.0.0
     */
    public function search(string $search, string $objectType, string $objectId, string $verb, int $offset, int $limit = 50) : array;
    /**
     * Search for comments on one or more objects with a given content
     *
     * @param string $search content to search for
     * @param string $objectType Limit the search by object type
     * @param array $objectIds Limit the search by object ids
     * @param string $verb Limit the verb of the comment
     * @param int $offset
     * @param int $limit
     * @return IComment[]
     * @since 21.0.0
     */
    public function searchForObjects(string $search, string $objectType, array $objectIds, string $verb, int $offset, int $limit = 50) : array;
    /**
     * @param $objectType string the object type, e.g. 'files'
     * @param $objectId string the id of the object
     * @param \DateTime|null $notOlderThan optional, timestamp of the oldest comments
     * that may be returned
     * @param string $verb Limit the verb of the comment - Added in 14.0.0
     * @return Int
     * @since 9.0.0
     */
    public function getNumberOfCommentsForObject($objectType, $objectId, \DateTime $notOlderThan = null, $verb = '');
    /**
     * @param string $objectType the object type, e.g. 'files'
     * @param string[] $objectIds the id of the object
     * @param IUser $user
     * @param string $verb Limit the verb of the comment - Added in 14.0.0
     * @return array Map with object id => # of unread comments
     * @psalm-return array<string, int>
     * @since 21.0.0
     */
    public function getNumberOfUnreadCommentsForObjects(string $objectType, array $objectIds, \OCP\IUser $user, $verb = '') : array;
    /**
     * @param string $objectType
     * @param string $objectId
     * @param int $lastRead
     * @param string $verb
     * @return int
     * @since 21.0.0
     * @deprecated 24.0.0 - Use getNumberOfCommentsWithVerbsForObjectSinceComment instead
     */
    public function getNumberOfCommentsForObjectSinceComment(string $objectType, string $objectId, int $lastRead, string $verb = '') : int;
    /**
     * @param string $objectType
     * @param string $objectId
     * @param int $lastRead
     * @param string[] $verbs
     * @return int
     * @since 24.0.0
     */
    public function getNumberOfCommentsWithVerbsForObjectSinceComment(string $objectType, string $objectId, int $lastRead, array $verbs) : int;
    /**
     * @param string $objectType
     * @param string $objectId
     * @param \DateTime $beforeDate
     * @param string $verb
     * @return int
     * @since 21.0.0
     */
    public function getLastCommentBeforeDate(string $objectType, string $objectId, \DateTime $beforeDate, string $verb = '') : int;
    /**
     * @param string $objectType
     * @param string $objectId
     * @param string $verb
     * @param string $actorType
     * @param string[] $actors
     * @return \DateTime[] Map of "string actor" => "\DateTime most recent comment date"
     * @psalm-return array<string, \DateTime>
     * @since 21.0.0
     */
    public function getLastCommentDateByActor(string $objectType, string $objectId, string $verb, string $actorType, array $actors) : array;
    /**
     * Get the number of unread comments for all files in a folder
     *
     * @param int $folderId
     * @param IUser $user
     * @return array [$fileId => $unreadCount]
     * @since 12.0.0
     */
    public function getNumberOfUnreadCommentsForFolder($folderId, \OCP\IUser $user);
    /**
     * creates a new comment and returns it. At this point of time, it is not
     * saved in the used data storage. Use save() after setting other fields
     * of the comment (e.g. message or verb).
     *
     * @param string $actorType the actor type (e.g. 'users')
     * @param string $actorId a user id
     * @param string $objectType the object type the comment is attached to
     * @param string $objectId the object id the comment is attached to
     * @return IComment
     * @since 9.0.0
     */
    public function create($actorType, $actorId, $objectType, $objectId);
    /**
     * permanently deletes the comment specified by the ID
     *
     * When the comment has child comments, their parent ID will be changed to
     * the parent ID of the item that is to be deleted.
     *
     * @param string $id
     * @return bool
     * @since 9.0.0
     */
    public function delete($id);
    /**
     * Get comment related with user reaction
     *
     * Throws PreConditionNotMetException when the system haven't the minimum requirements to
     * use reactions
     *
     * @param int $parentId
     * @param string $actorType
     * @param string $actorId
     * @param string $reaction
     * @return IComment
     * @throws NotFoundException
     * @throws PreConditionNotMetException
     * @since 24.0.0
     */
    public function getReactionComment(int $parentId, string $actorType, string $actorId, string $reaction) : \OCP\Comments\IComment;
    /**
     * Retrieve all reactions of a message
     *
     * Throws PreConditionNotMetException when the system haven't the minimum requirements to
     * use reactions
     *
     * @param int $parentId
     * @return IComment[]
     * @throws PreConditionNotMetException
     * @since 24.0.0
     */
    public function retrieveAllReactions(int $parentId) : array;
    /**
     * Retrieve all reactions with specific reaction of a message
     *
     * Throws PreConditionNotMetException when the system haven't the minimum requirements to
     * use reactions
     *
     * @param int $parentId
     * @param string $reaction
     * @return IComment[]
     * @throws PreConditionNotMetException
     * @since 24.0.0
     */
    public function retrieveAllReactionsWithSpecificReaction(int $parentId, string $reaction) : array;
    /**
     * Support reactions
     *
     * @return bool
     * @since 24.0.0
     */
    public function supportReactions() : bool;
    /**
     * saves the comment permanently
     *
     * if the supplied comment has an empty ID, a new entry comment will be
     * saved and the instance updated with the new ID.
     *
     * Otherwise, an existing comment will be updated.
     *
     * Throws NotFoundException when a comment that is to be updated does not
     * exist anymore at this point of time.
     *
     * @param IComment $comment
     * @return bool
     * @throws NotFoundException
     * @since 9.0.0
     */
    public function save(\OCP\Comments\IComment $comment);
    /**
     * removes references to specific actor (e.g. on user delete) of a comment.
     * The comment itself must not get lost/deleted.
     *
     * A 'users' type actor (type and id) should get replaced by the
     * value of the DELETED_USER constant of this interface.
     *
     * @param string $actorType the actor type (e.g. 'users')
     * @param string $actorId a user id
     * @return boolean
     * @since 9.0.0
     */
    public function deleteReferencesOfActor($actorType, $actorId);
    /**
     * deletes all comments made of a specific object (e.g. on file delete)
     *
     * @param string $objectType the object type (e.g. 'files')
     * @param string $objectId e.g. the file id
     * @return boolean
     * @since 9.0.0
     */
    public function deleteCommentsAtObject($objectType, $objectId);
    /**
     * sets the read marker for a given file to the specified date for the
     * provided user
     *
     * @param string $objectType
     * @param string $objectId
     * @param \DateTime $dateTime
     * @param \OCP\IUser $user
     * @since 9.0.0
     */
    public function setReadMark($objectType, $objectId, \DateTime $dateTime, \OCP\IUser $user);
    /**
     * returns the read marker for a given file to the specified date for the
     * provided user. It returns null, when the marker is not present, i.e.
     * no comments were marked as read.
     *
     * @param string $objectType
     * @param string $objectId
     * @param \OCP\IUser $user
     * @return \DateTime|null
     * @since 9.0.0
     */
    public function getReadMark($objectType, $objectId, \OCP\IUser $user);
    /**
     * deletes the read markers for the specified user
     *
     * @param \OCP\IUser $user
     * @return bool
     * @since 9.0.0
     */
    public function deleteReadMarksFromUser(\OCP\IUser $user);
    /**
     * deletes the read markers on the specified object
     *
     * @param string $objectType
     * @param string $objectId
     * @return bool
     * @since 9.0.0
     */
    public function deleteReadMarksOnObject($objectType, $objectId);
    /**
     * registers an Entity to the manager, so event notifications can be send
     * to consumers of the comments infrastructure
     *
     * @param \Closure $closure
     * @since 11.0.0
     */
    public function registerEventHandler(\Closure $closure);
    /**
     * registers a method that resolves an ID to a display name for a given type
     *
     * @param string $type
     * @param \Closure $closure
     * @throws \OutOfBoundsException
     * @since 11.0.0
     *
     * Only one resolver shall be registered per type. Otherwise a
     * \OutOfBoundsException has to thrown.
     */
    public function registerDisplayNameResolver($type, \Closure $closure);
    /**
     * resolves a given ID of a given Type to a display name.
     *
     * @param string $type
     * @param string $id
     * @return string
     * @throws \OutOfBoundsException
     * @since 11.0.0
     *
     * If a provided type was not registered, an \OutOfBoundsException shall
     * be thrown. It is upon the resolver discretion what to return of the
     * provided ID is unknown. It must be ensured that a string is returned.
     */
    public function resolveDisplayName($type, $id);
    /**
     * Load the Comments app into the page
     *
     * @since 21.0.0
     */
    public function load() : void;
    /**
     * Delete comments with field expire_date less than current date
     * Only will delete the message related with the object.
     *
     * @param string $objectType the object type (e.g. 'files')
     * @param string $objectId e.g. the file id, leave empty to expire on all objects of this type
     * @return boolean true if at least one row was deleted
     * @since 25.0.0
     */
    public function deleteCommentsExpiredAtObject(string $objectType, string $objectId = '') : bool;
}
namespace OCP\Config;

/**
 * @since 25.0.0
 */
class BeforePreferenceDeletedEvent extends \OCP\EventDispatcher\Event
{
    protected string $userId;
    protected string $appId;
    protected string $configKey;
    protected bool $valid = false;
    /**
     * @since 25.0.0
     */
    public function __construct(string $userId, string $appId, string $configKey)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getUserId() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getAppId() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getConfigKey() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function isValid() : bool
    {
    }
    /**
     * @since 25.0.0
     */
    public function setValid(bool $valid) : void
    {
    }
}
/**
 * @since 25.0.0
 */
class BeforePreferenceSetEvent extends \OCP\EventDispatcher\Event
{
    protected string $userId;
    protected string $appId;
    protected string $configKey;
    protected string $configValue;
    protected bool $valid = false;
    /**
     * @since 25.0.0
     */
    public function __construct(string $userId, string $appId, string $configKey, string $configValue)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getUserId() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getAppId() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getConfigKey() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getConfigValue() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function isValid() : bool
    {
    }
    /**
     * @since 25.0.0
     */
    public function setValid(bool $valid) : void
    {
    }
}
namespace OCP\Console;

/**
 * Class ConsoleEvent
 *
 * @since 9.0.0
 */
class ConsoleEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_RUN = 'OC\\Console\\Application::run';
    /** @var string */
    protected $event;
    /** @var string[] */
    protected $arguments;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @param string[] $arguments
     * @since 9.0.0
     */
    public function __construct($event, array $arguments)
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getEvent()
    {
    }
    /**
     * @return string[]
     * @since 9.0.0
     */
    public function getArguments()
    {
    }
}
namespace OCP;

/**
 * Class Constants
 *
 * @since 8.0.0
 */
class Constants
{
    /**
     * CRUDS permissions.
     * @since 8.0.0
     */
    public const PERMISSION_CREATE = 4;
    public const PERMISSION_READ = 1;
    public const PERMISSION_UPDATE = 2;
    public const PERMISSION_DELETE = 8;
    public const PERMISSION_SHARE = 16;
    public const PERMISSION_ALL = 31;
    /**
     * @since 8.0.0 - Updated in 9.0.0 to allow all POSIX chars since we no
     * longer support windows as server platform.
     */
    public const FILENAME_INVALID_CHARS = "\\/";
    /**
     * @since 21.0.0 – default value for autocomplete/search results limit,
     * cf. sharing.maxAutocompleteResults in config.sample.php.
     */
    public const SHARING_MAX_AUTOCOMPLETE_RESULTS_DEFAULT = 25;
}
namespace OCP\Contacts\ContactsMenu;

/**
 * Apps should use the IActionFactory to create new action objects
 *
 * @since 12.0
 */
interface IAction extends \JsonSerializable
{
    /**
     * @param string $icon absolute URI to an icon
     * @since 12.0
     */
    public function setIcon(string $icon);
    /**
     * @return string localized action name, e.g. 'Call'
     * @since 12.0
     */
    public function getName() : string;
    /**
     * @param string $name localized action name, e.g. 'Call'
     * @since 12.0
     */
    public function setName(string $name);
    /**
     * @param int $priority priorize actions, high order ones are shown on top
     * @since 12.0
     */
    public function setPriority(int $priority);
    /**
     * @return int priority to priorize actions, high order ones are shown on top
     * @since 12.0
     */
    public function getPriority() : int;
    /**
     * @param string $appId
     * @since 23.0.0
     */
    public function setAppId(string $appId);
    /**
     * @return string
     * @since 23.0.0
     */
    public function getAppId() : string;
}
/**
 * @since 12.0
 */
interface IActionFactory
{
    /**
     * Construct and return a new link action for the contacts menu
     *
     * @since 12.0
     *
     * @param string $icon full path to the action's icon
     * @param string $name localized name of the action
     * @param string $href target URL
     * @param string $appId the app ID registering the action
     * @return ILinkAction
     */
    public function newLinkAction(string $icon, string $name, string $href, string $appId = '') : \OCP\Contacts\ContactsMenu\ILinkAction;
    /**
     * Construct and return a new email action for the contacts menu
     *
     * @since 12.0
     *
     * @param string $icon full path to the action's icon
     * @param string $name localized name of the action
     * @param string $email target e-mail address
     * @param string $appId the appName registering the action
     * @return ILinkAction
     */
    public function newEMailAction(string $icon, string $name, string $email, string $appId = '') : \OCP\Contacts\ContactsMenu\ILinkAction;
}
/**
 * @since 13.0.0
 */
interface IContactsStore
{
    /**
     * @param IUser $user
     * @param string|null $filter
     * @param int|null $limit added 19.0.2
     * @param int|null $offset added 19.0.2
     * @return IEntry[]
     * @since 13.0.0
     */
    public function getContacts(\OCP\IUser $user, ?string $filter, ?int $limit = null, ?int $offset = null) : array;
    /**
     * @brief finds a contact by specifying the property to search on ($shareType) and the value ($shareWith)
     * @since 13.0.0
     */
    public function findOne(\OCP\IUser $user, int $shareType, string $shareWith) : ?\OCP\Contacts\ContactsMenu\IEntry;
}
/**
 * @since 12.0
 */
interface IEntry extends \JsonSerializable
{
    /**
     * @since 12.0
     * @return string
     */
    public function getFullName() : string;
    /**
     * @since 12.0
     * @return string[]
     */
    public function getEMailAddresses() : array;
    /**
     * @since 12.0
     * @return string|null image URI
     */
    public function getAvatar() : ?string;
    /**
     * @since 12.0
     * @param IAction $action an action to show in the contacts menu
     */
    public function addAction(\OCP\Contacts\ContactsMenu\IAction $action) : void;
    /**
     * Get an arbitrary property from the contact
     *
     * @since 12.0
     * @param string $key
     * @return mixed the value of the property or null
     */
    public function getProperty(string $key);
}
/**
 * @since 12.0
 */
interface ILinkAction extends \OCP\Contacts\ContactsMenu\IAction
{
    /**
     * @param string $href the target URL of the action
     * @since 12.0
     */
    public function setHref(string $href);
    /**
     * @since 12.0
     * @return string
     */
    public function getHref() : string;
}
/**
 * @since 12.0
 */
interface IProvider
{
    /**
     * @since 12.0
     * @param IEntry $entry
     * @return void
     */
    public function process(\OCP\Contacts\ContactsMenu\IEntry $entry);
}
namespace OCP\Contacts\Events;

/**
 * An event that allows apps to notify other components about an interaction
 * between two users. This can be used to build better recommendations and
 * suggestions in user interfaces.
 *
 * Emitters should add at least one identifier (uid, email, federated cloud ID)
 * of the recipient of the interaction.
 *
 * @since 19.0.0
 */
class ContactInteractedWithEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser $actor the user who started the interaction
     *
     * @since 19.0.0
     */
    public function __construct(\OCP\IUser $actor)
    {
    }
    /**
     * @return IUser
     * @since 19.0.0
     */
    public function getActor() : \OCP\IUser
    {
    }
    /**
     * @return string|null
     * @since 19.0.0
     */
    public function getUid() : ?string
    {
    }
    /**
     * Set the uid of the person interacted with, if known
     *
     * @param string $uid
     *
     * @return self
     * @since 19.0.0
     */
    public function setUid(string $uid) : self
    {
    }
    /**
     * @return string|null
     * @since 19.0.0
     */
    public function getEmail() : ?string
    {
    }
    /**
     * Set the email of the person interacted with, if known
     *
     * @param string $email
     *
     * @return self
     * @since 19.0.0
     */
    public function setEmail(string $email) : self
    {
    }
    /**
     * @return string|null
     * @since 19.0.0
     */
    public function getFederatedCloudId() : ?string
    {
    }
    /**
     * Set the federated cloud of the person interacted with, if known
     *
     * @param string $federatedCloudId
     *
     * @return self
     * @since 19.0.0
     */
    public function setFederatedCloudId(string $federatedCloudId) : self
    {
    }
}
namespace OCP\Contacts;

/**
 * This class provides access to the contacts app. Use this class exclusively if you want to access contacts.
 *
 * Contacts in general will be expressed as an array of key-value-pairs.
 * The keys will match the property names defined in https://tools.ietf.org/html/rfc2426#section-1
 *
 * Proposed workflow for working with contacts:
 *  - search for the contacts
 *  - manipulate the results array
 *  - createOrUpdate will save the given contacts overwriting the existing data
 *
 * For updating it is mandatory to keep the id.
 * Without an id a new contact will be created.
 *
 * @since 6.0.0
 */
interface IManager
{
    /**
     * This function is used to search and find contacts within the users address books.
     * In case $pattern is empty all contacts will be returned.
     *
     * Example:
     *  Following function shows how to search for contacts for the name and the email address.
     *
     *		public static function getMatchingRecipient($term) {
     *			$cm = \OC::$server->getContactsManager();
     *			// The API is not active -> nothing to do
     *			if (!$cm->isEnabled()) {
     *				return array();
     *			}
     *
     *			$result = $cm->search($term, array('FN', 'EMAIL'));
     *			$receivers = array();
     *			foreach ($result as $r) {
     *				$id = $r['id'];
     *				$fn = $r['FN'];
     *				$email = $r['EMAIL'];
     *				if (!is_array($email)) {
     *					$email = array($email);
     *				}
     *
     *				// loop through all email addresses of this contact
     *				foreach ($email as $e) {
     *				$displayName = $fn . " <$e>";
     *				$receivers[] = array(
     *					'id'    => $id,
     *					'label' => $displayName,
     *					'value' => $displayName);
     *				}
     *			}
     *
     *			return $receivers;
     *		}
     *
     *
     * @param string $pattern which should match within the $searchProperties
     * @param array $searchProperties defines the properties within the query pattern should match
     * @param array $options = array() to define the search behavior
     *  - 'types' boolean (since 15.0.0) If set to true, fields that come with a TYPE property will be an array
     *    example: ['id' => 5, 'FN' => 'Thomas Tanghus', 'EMAIL' => ['type => 'HOME', 'value' => 'g@h.i']]
     * 	- 'escape_like_param' - If set to false wildcards _ and % are not escaped
     * 	- 'limit' - Set a numeric limit for the search results
     * 	- 'offset' - Set the offset for the limited search results
     * 	- 'enumeration' - (since 23.0.0) Whether user enumeration on system address book is allowed
     * 	- 'fullmatch' - (since 23.0.0) Whether matching on full detail in system address book is allowed
     * 	- 'strict_search' - (since 23.0.0) Whether the search pattern is full string or partial search
     * @psalm-param array{types?: bool, escape_like_param?: bool, limit?: int, offset?: int, enumeration?: bool, fullmatch?: bool, strict_search?: bool} $options
     * @return array an array of contacts which are arrays of key-value-pairs
     * @since 6.0.0
     */
    public function search($pattern, $searchProperties = [], $options = []);
    /**
     * This function can be used to delete the contact identified by the given id
     *
     * @param int $id the unique identifier to a contact
     * @param string $address_book_key identifier of the address book in which the contact shall be deleted
     * @return bool successful or not
     * @since 6.0.0
     */
    public function delete($id, $address_book_key);
    /**
     * This function is used to create a new contact if 'id' is not given or not present.
     * Otherwise the contact will be updated by replacing the entire data set.
     *
     * @param array $properties this array if key-value-pairs defines a contact
     * @param string $address_book_key identifier of the address book in which the contact shall be created or updated
     * @return array an array representing the contact just created or updated
     * @since 6.0.0
     */
    public function createOrUpdate($properties, $address_book_key);
    /**
     * Check if contacts are available (e.g. contacts app enabled)
     *
     * @return bool true if enabled, false if not
     * @since 6.0.0
     */
    public function isEnabled();
    /**
     * Registers an address book
     *
     * @param \OCP\IAddressBook $address_book
     * @return void
     * @since 6.0.0
     */
    public function registerAddressBook(\OCP\IAddressBook $address_book);
    /**
     * Unregisters an address book
     *
     * @param \OCP\IAddressBook $address_book
     * @return void
     * @since 6.0.0
     */
    public function unregisterAddressBook(\OCP\IAddressBook $address_book);
    /**
     * In order to improve lazy loading a closure can be registered which will be called in case
     * address books are actually requested
     *
     * @param \Closure $callable
     * @return void
     * @since 6.0.0
     */
    public function register(\Closure $callable);
    /**
     * Return a list of the user's addressbooks
     *
     * @return \OCP\IAddressBook[]
     * @since 16.0.0
     */
    public function getUserAddressBooks();
    /**
     * removes all registered address book instances
     *
     * @return void
     * @since 6.0.0
     */
    public function clear();
}
namespace OCP\DB\QueryBuilder;

/**
 * This class provides a wrapper around Doctrine's CompositeExpression
 * @since 8.2.0
 */
interface ICompositeExpression
{
    /**
     * Adds multiple parts to composite expression.
     *
     * @param array $parts
     *
     * @return ICompositeExpression
     * @since 8.2.0
     */
    public function addMultiple(array $parts = []) : \OCP\DB\QueryBuilder\ICompositeExpression;
    /**
     * Adds an expression to composite expression.
     *
     * @param mixed $part
     *
     * @return ICompositeExpression
     * @since 8.2.0
     */
    public function add($part) : \OCP\DB\QueryBuilder\ICompositeExpression;
    /**
     * Retrieves the amount of expressions on composite expression.
     *
     * @return integer
     * @since 8.2.0
     */
    public function count() : int;
    /**
     * Returns the type of this composite expression (AND/OR).
     *
     * @return string
     * @since 8.2.0
     */
    public function getType() : string;
}
/**
 * This class provides a wrapper around Doctrine's ExpressionBuilder
 * @since 8.2.0
 *
 * @psalm-taint-specialize
 */
interface IExpressionBuilder
{
    /**
     * @since 9.0.0
     */
    public const EQ = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::EQ;
    /**
     * @since 9.0.0
     */
    public const NEQ = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::NEQ;
    /**
     * @since 9.0.0
     */
    public const LT = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::LT;
    /**
     * @since 9.0.0
     */
    public const LTE = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::LTE;
    /**
     * @since 9.0.0
     */
    public const GT = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::GT;
    /**
     * @since 9.0.0
     */
    public const GTE = \Doctrine\DBAL\Query\Expression\ExpressionBuilder::GTE;
    /**
     * Creates a conjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) AND (u.role = ?)
     *     $expr->andX('u.type = ?', 'u.role = ?'));
     *
     * @param mixed ...$x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     *
     * @return \OCP\DB\QueryBuilder\ICompositeExpression
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $x
     */
    public function andX(...$x) : \OCP\DB\QueryBuilder\ICompositeExpression;
    /**
     * Creates a disjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) OR (u.role = ?)
     *     $qb->where($qb->expr()->orX('u.type = ?', 'u.role = ?'));
     *
     * @param mixed ...$x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     *
     * @return \OCP\DB\QueryBuilder\ICompositeExpression
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $x
     */
    public function orX(...$x) : \OCP\DB\QueryBuilder\ICompositeExpression;
    /**
     * Creates a comparison expression.
     *
     * @param mixed $x The left expression.
     * @param string $operator One of the IExpressionBuilder::* constants.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $operator
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function comparison($x, string $operator, $y, $type = null) : string;
    /**
     * Creates an equality comparison expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> = <right expr>. Example:
     *
     *     [php]
     *     // u.id = ?
     *     $expr->eq('u.id', '?');
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function eq($x, $y, $type = null) : string;
    /**
     * Creates a non equality comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <> <right expr>. Example:
     *
     *     [php]
     *     // u.id <> 1
     *     $q->where($q->expr()->neq('u.id', '1'));
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function neq($x, $y, $type = null) : string;
    /**
     * Creates a lower-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> < <right expr>. Example:
     *
     *     [php]
     *     // u.id < ?
     *     $q->where($q->expr()->lt('u.id', '?'));
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function lt($x, $y, $type = null) : string;
    /**
     * Creates a lower-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <= <right expr>. Example:
     *
     *     [php]
     *     // u.id <= ?
     *     $q->where($q->expr()->lte('u.id', '?'));
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function lte($x, $y, $type = null) : string;
    /**
     * Creates a greater-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> > <right expr>. Example:
     *
     *     [php]
     *     // u.id > ?
     *     $q->where($q->expr()->gt('u.id', '?'));
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function gt($x, $y, $type = null) : string;
    /**
     * Creates a greater-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> >= <right expr>. Example:
     *
     *     [php]
     *     // u.id >= ?
     *     $q->where($q->expr()->gte('u.id', '?'));
     *
     * @param mixed $x The left expression.
     * @param mixed $y The right expression.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function gte($x, $y, $type = null) : string;
    /**
     * Creates an IS NULL expression with the given arguments.
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x The field in string format to be restricted by IS NULL.
     *
     * @return string
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $x
     */
    public function isNull($x) : string;
    /**
     * Creates an IS NOT NULL expression with the given arguments.
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x The field in string format to be restricted by IS NOT NULL.
     *
     * @return string
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $x
     */
    public function isNotNull($x) : string;
    /**
     * Creates a LIKE() comparison expression with the given arguments.
     *
     * @param ILiteral|IParameter|IQueryFunction|string $x Field in string format to be inspected by LIKE() comparison.
     * @param mixed $y Argument to be used in LIKE() comparison.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function like($x, $y, $type = null) : string;
    /**
     * Creates a NOT LIKE() comparison expression with the given arguments.
     *
     * @param ILiteral|IParameter|IQueryFunction|string $x Field in string format to be inspected by NOT LIKE() comparison.
     * @param mixed $y Argument to be used in NOT LIKE() comparison.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function notLike($x, $y, $type = null) : string;
    /**
     * Creates a ILIKE() comparison expression with the given arguments.
     *
     * @param string $x Field in string format to be inspected by ILIKE() comparison.
     * @param mixed $y Argument to be used in ILIKE() comparison.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function iLike($x, $y, $type = null) : string;
    /**
     * Creates a IN () comparison expression with the given arguments.
     *
     * @param ILiteral|IParameter|IQueryFunction|string $x The field in string format to be inspected by IN() comparison.
     * @param ILiteral|IParameter|IQueryFunction|string|array $y The placeholder or the array of values to be used by IN() comparison.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function in($x, $y, $type = null) : string;
    /**
     * Creates a NOT IN () comparison expression with the given arguments.
     *
     * @param ILiteral|IParameter|IQueryFunction|string $x The field in string format to be inspected by NOT IN() comparison.
     * @param ILiteral|IParameter|IQueryFunction|string|array $y The placeholder or the array of values to be used by NOT IN() comparison.
     * @param mixed|null $type one of the IQueryBuilder::PARAM_* constants
     *                  required when comparing text fields for oci compatibility
     *
     * @return string
     * @since 8.2.0 - Parameter $type was added in 9.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     * @psalm-taint-sink sql $type
     */
    public function notIn($x, $y, $type = null) : string;
    /**
     * Creates a $x = '' statement, because Oracle needs a different check
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x The field in string format to be inspected by the comparison.
     * @return string
     * @since 13.0.0
     *
     * @psalm-taint-sink sql $x
     */
    public function emptyString($x) : string;
    /**
     * Creates a `$x <> ''` statement, because Oracle needs a different check
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x The field in string format to be inspected by the comparison.
     * @return string
     * @since 13.0.0
     *
     * @psalm-taint-sink sql $x
     */
    public function nonEmptyString($x) : string;
    /**
     * Creates a bitwise AND comparison
     *
     * @param string|ILiteral $x The field or value to check
     * @param int $y Bitmap that must be set
     * @return IQueryFunction
     * @since 12.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     */
    public function bitwiseAnd($x, int $y) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Creates a bitwise OR comparison
     *
     * @param string|ILiteral $x The field or value to check
     * @param int $y Bitmap that must be set
     * @return IQueryFunction
     * @since 12.0.0
     *
     * @psalm-taint-sink sql $x
     * @psalm-taint-sink sql $y
     */
    public function bitwiseOr($x, int $y) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Quotes a given input parameter.
     *
     * @param mixed $input The parameter to be quoted.
     * @param int $type One of the IQueryBuilder::PARAM_* constants
     *
     * @return ILiteral
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $input
     * @psalm-taint-sink sql $type
     */
    public function literal($input, $type = \OCP\DB\QueryBuilder\IQueryBuilder::PARAM_STR) : \OCP\DB\QueryBuilder\ILiteral;
    /**
     * Returns a IQueryFunction that casts the column to the given type
     *
     * @param string|IQueryFunction $column
     * @param mixed $type One of IQueryBuilder::PARAM_*
     * @psalm-param IQueryBuilder::PARAM_* $type
     * @return IQueryFunction
     * @since 9.0.0
     *
     * @psalm-taint-sink sql $column
     * @psalm-taint-sink sql $type
     */
    public function castColumn($column, $type) : \OCP\DB\QueryBuilder\IQueryFunction;
}
/**
 * This class provides a builder for sql some functions
 *
 * @since 12.0.0
 */
interface IFunctionBuilder
{
    /**
     * Calculates the MD5 hash of a given input
     *
     * @param string|ILiteral|IParameter|IQueryFunction $input The input to be hashed
     *
     * @return IQueryFunction
     * @since 12.0.0
     */
    public function md5($input) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Combines two input strings
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x Expressions or literal strings
     * @param string|ILiteral|IParameter|IQueryFunction ...$exprs Expressions or literal strings
     *
     * @return IQueryFunction
     * @since 12.0.0
     */
    public function concat($x, ...$expr) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Returns a string which is the concatenation of all non-NULL values of X
     *
     * Usage examples:
     *
     * groupConcat('column') -- with comma as separator (default separator)
     *
     * groupConcat('column', ';') -- with different separator
     *
     * @param string|IQueryFunction $expr The expression to group
     * @param string|null $separator The separator
     * @return IQueryFunction
     * @since 24.0.0
     */
    public function groupConcat($expr, ?string $separator = ',') : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes a substring from the input string
     *
     * @param string|ILiteral|IParameter|IQueryFunction $input The input string
     * @param string|ILiteral|IParameter|IQueryFunction $start The start of the substring, note that counting starts at 1
     * @param null|ILiteral|IParameter|IQueryFunction $length The length of the substring
     *
     * @return IQueryFunction
     * @since 12.0.0
     */
    public function substring($input, $start, $length = null) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes the sum of all rows in a column
     *
     * @param string|ILiteral|IParameter|IQueryFunction $field the column to sum
     *
     * @return IQueryFunction
     * @since 12.0.0
     */
    public function sum($field) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Transforms a string field or value to lower case
     *
     * @param string|ILiteral|IParameter|IQueryFunction $field
     * @return IQueryFunction
     * @since 14.0.0
     */
    public function lower($field) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * @param string|ILiteral|IParameter|IQueryFunction $x The first input field or number
     * @param string|ILiteral|IParameter|IQueryFunction $y The second input field or number
     * @return IQueryFunction
     * @since 14.0.0
     */
    public function add($x, $y) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * @param string|ILiteral|IParameter|IQueryFunction $x The first input field or number
     * @param string|ILiteral|IParameter|IQueryFunction $y The second input field or number
     * @return IQueryFunction
     * @since 14.0.0
     */
    public function subtract($x, $y) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * @param string|ILiteral|IParameter|IQueryFunction $count The input to be counted
     * @param string $alias Alias for the counter
     *
     * @return IQueryFunction
     * @since 14.0.0
     */
    public function count($count = '', $alias = '') : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * @param string|ILiteral|IParameter|IQueryFunction $field The input to be measured
     * @param string $alias Alias for the length
     *
     * @return IQueryFunction
     * @since 24.0.0
     */
    public function octetLength($field, $alias = '') : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * @param string|ILiteral|IParameter|IQueryFunction $field The input to be measured
     * @param string $alias Alias for the length
     *
     * @return IQueryFunction
     * @since 24.0.0
     */
    public function charLength($field, $alias = '') : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes the maximum of all rows in a column
     *
     * If you want to get the maximum value of multiple columns in the same row, use `greatest` instead
     *
     * @param string|ILiteral|IParameter|IQueryFunction $field the column to maximum
     *
     * @return IQueryFunction
     * @since 18.0.0
     */
    public function max($field) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes the minimum of all rows in a column
     *
     * If you want to get the minimum value of multiple columns in the same row, use `least` instead
     *
     * @param string|ILiteral|IParameter|IQueryFunction $field the column to minimum
     *
     * @return IQueryFunction
     * @since 18.0.0
     */
    public function min($field) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes the maximum of multiple values
     *
     * If you want to get the maximum value of all rows in a column, use `max` instead
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x
     * @param string|ILiteral|IParameter|IQueryFunction $y
     * @return IQueryFunction
     * @since 18.0.0
     */
    public function greatest($x, $y) : \OCP\DB\QueryBuilder\IQueryFunction;
    /**
     * Takes the minimum of multiple values
     *
     * If you want to get the minimum value of all rows in a column, use `min` instead
     *
     * @param string|ILiteral|IParameter|IQueryFunction $x
     * @param string|ILiteral|IParameter|IQueryFunction $y
     * @return IQueryFunction
     * @since 18.0.0
     */
    public function least($x, $y) : \OCP\DB\QueryBuilder\IQueryFunction;
}
/**
 * @since 8.2.0
 */
interface ILiteral
{
    /**
     * @return string
     * @since 8.2.0
     */
    public function __toString();
}
/**
 * @since 8.2.0
 */
interface IParameter
{
    /**
     * @return string
     * @since 8.2.0
     */
    public function __toString();
}
/**
 * @since 8.2.0
 */
interface IQueryFunction
{
    /**
     * @return string
     * @since 8.2.0
     */
    public function __toString();
}
/**
 * This class provides a wrapper around Doctrine's QueryBuilder
 * @since 8.2.0
 *
 * @psalm-taint-specialize
 */
interface IQueryBuilder
{
    /**
     * @since 9.0.0
     */
    public const PARAM_NULL = \PDO::PARAM_NULL;
    /**
     * @since 9.0.0
     */
    public const PARAM_BOOL = \PDO::PARAM_BOOL;
    /**
     * @since 9.0.0
     */
    public const PARAM_INT = \PDO::PARAM_INT;
    /**
     * @since 9.0.0
     */
    public const PARAM_STR = \PDO::PARAM_STR;
    /**
     * @since 9.0.0
     */
    public const PARAM_LOB = \PDO::PARAM_LOB;
    /**
     * @since 9.0.0
     */
    public const PARAM_DATE = 'datetime';
    /**
     * @since 24.0.0
     */
    public const PARAM_JSON = 'json';
    /**
     * @since 9.0.0
     */
    public const PARAM_INT_ARRAY = \Doctrine\DBAL\Connection::PARAM_INT_ARRAY;
    /**
     * @since 9.0.0
     */
    public const PARAM_STR_ARRAY = \Doctrine\DBAL\Connection::PARAM_STR_ARRAY;
    /**
     * @since 24.0.0 Indicates how many rows can be deleted at once with MySQL
     * database server.
     */
    public const MAX_ROW_DELETION = 100000;
    /**
     * Enable/disable automatic prefixing of table names with the oc_ prefix
     *
     * @param bool $enabled If set to true table names will be prefixed with the
     * owncloud database prefix automatically.
     * @since 8.2.0
     */
    public function automaticTablePrefix($enabled);
    /**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where($qb->expr()->eq('u.id', 1));
     * </code>
     *
     * For more complex expression construction, consider storing the expression
     * builder object in a local variable.
     *
     * @return \OCP\DB\QueryBuilder\IExpressionBuilder
     * @since 8.2.0
     */
    public function expr();
    /**
     * Gets an FunctionBuilder used for object-oriented construction of query functions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where($qb->fun()->md5('u.id'));
     * </code>
     *
     * For more complex function construction, consider storing the function
     * builder object in a local variable.
     *
     * @return \OCP\DB\QueryBuilder\IFunctionBuilder
     * @since 12.0.0
     */
    public function func();
    /**
     * Gets the type of the currently built query.
     *
     * @return integer
     * @since 8.2.0
     */
    public function getType();
    /**
     * Gets the associated DBAL Connection for this query builder.
     *
     * @return \OCP\IDBConnection
     * @since 8.2.0
     */
    public function getConnection();
    /**
     * Gets the state of this query builder instance.
     *
     * @return integer Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
     * @since 8.2.0
     */
    public function getState();
    /**
     * Executes this query using the bound parameters and their types.
     *
     * Uses {@see Connection::executeQuery} for select statements and {@see Connection::executeStatement}
     * for insert, update and delete statements.
     *
     * Warning: until Nextcloud 20, this method could return a \Doctrine\DBAL\Driver\Statement but since
     *          that interface changed in a breaking way the adapter \OCP\DB\QueryBuilder\IStatement is returned
     *          to bridge old code to the new API
     *
     * @return IResult|int
     * @throws Exception since 21.0.0
     * @since 8.2.0
     * @deprecated 22.0.0 Use executeQuery or executeStatement
     */
    public function execute();
    /**
     * Execute for select statements
     *
     * @return IResult
     * @since 22.0.0
     *
     * @throws Exception
     * @throws \RuntimeException in case of usage with non select query
     */
    public function executeQuery() : \OCP\DB\IResult;
    /**
     * Execute insert, update and delete statements
     *
     * @return int the number of affected rows
     * @since 22.0.0
     *
     * @throws Exception
     * @throws \RuntimeException in case of usage with select query
     */
    public function executeStatement() : int;
    /**
     * Gets the complete SQL string formed by the current specifications of this QueryBuilder.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *     echo $qb->getSQL(); // SELECT u FROM User u
     * </code>
     *
     * @return string The SQL query string.
     * @since 8.2.0
     */
    public function getSQL();
    /**
     * Sets a query parameter for the query being constructed.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.id = :user_id')
     *         ->setParameter(':user_id', 1);
     * </code>
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string|null|int $type One of the IQueryBuilder::PARAM_* constants.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function setParameter($key, $value, $type = null);
    /**
     * Sets a collection of query parameters for the query being constructed.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.id = :user_id1 OR u.id = :user_id2')
     *         ->setParameters(array(
     *             ':user_id1' => 1,
     *             ':user_id2' => 2
     *         ));
     * </code>
     *
     * @param array $params The query parameters to set.
     * @param array $types The query parameters types to set.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function setParameters(array $params, array $types = []);
    /**
     * Gets all defined query parameters for the query being constructed indexed by parameter index or name.
     *
     * @return array The currently defined query parameters indexed by parameter index or name.
     * @since 8.2.0
     */
    public function getParameters();
    /**
     * Gets a (previously set) query parameter of the query being constructed.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     *
     * @return mixed The value of the bound parameter.
     * @since 8.2.0
     */
    public function getParameter($key);
    /**
     * Gets all defined query parameter types for the query being constructed indexed by parameter index or name.
     *
     * @return array The currently defined query parameter types indexed by parameter index or name.
     * @since 8.2.0
     */
    public function getParameterTypes();
    /**
     * Gets a (previously set) query parameter type of the query being constructed.
     *
     * @param mixed $key The key (index or name) of the bound parameter type.
     *
     * @return mixed The value of the bound parameter type.
     * @since 8.2.0
     */
    public function getParameterType($key);
    /**
     * Sets the position of the first result to retrieve (the "offset").
     *
     * @param int $firstResult The first result to return.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function setFirstResult($firstResult);
    /**
     * Gets the position of the first result the query object was set to retrieve (the "offset").
     * Returns 0 if {@link setFirstResult} was not applied to this QueryBuilder.
     *
     * @return int The position of the first result.
     * @since 8.2.0
     */
    public function getFirstResult();
    /**
     * Sets the maximum number of results to retrieve (the "limit").
     *
     * @param int|null $maxResults The maximum number of results to retrieve.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function setMaxResults($maxResults);
    /**
     * Gets the maximum number of results the query object was set to retrieve (the "limit").
     * Returns NULL if {@link setMaxResults} was not applied to this query builder.
     *
     * @return int|null The maximum number of results.
     * @since 8.2.0
     */
    public function getMaxResults();
    /**
     * Specifies an item that is to be returned in the query result.
     * Replaces any previously specified selections, if any.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.id', 'p.id')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'p', 'u.id = p.user_id');
     * </code>
     *
     * @param mixed ...$selects The selection expressions.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $selects
     */
    public function select(...$selects);
    /**
     * Specifies an item that is to be returned with a different name in the query result.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->selectAlias('u.id', 'user_id')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'p', 'u.id = p.user_id');
     * </code>
     *
     * @param mixed $select The selection expressions.
     * @param string $alias The column alias used in the constructed query.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.1
     *
     * @psalm-taint-sink sql $select
     * @psalm-taint-sink sql $alias
     */
    public function selectAlias($select, $alias);
    /**
     * Specifies an item that is to be returned uniquely in the query result.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->selectDistinct('type')
     *         ->from('users');
     * </code>
     *
     * @param mixed $select The selection expressions.
     *
     * @return $this This QueryBuilder instance.
     * @since 9.0.0
     *
     * @psalm-taint-sink sql $select
     */
    public function selectDistinct($select);
    /**
     * Adds an item that is to be returned in the query result.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.id')
     *         ->addSelect('p.id')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'u.id = p.user_id');
     * </code>
     *
     * @param mixed ...$select The selection expression.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $select
     */
    public function addSelect(...$select);
    /**
     * Turns the query being built into a bulk delete query that ranges over
     * a certain table.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->delete('users', 'u')
     *         ->where('u.id = :user_id');
     *         ->setParameter(':user_id', 1);
     * </code>
     *
     * @param string $delete The table whose rows are subject to the deletion.
     * @param string $alias The table alias used in the constructed query.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $delete
     */
    public function delete($delete = null, $alias = null);
    /**
     * Turns the query being built into a bulk update query that ranges over
     * a certain table
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $update The table whose rows are subject to the update.
     * @param string $alias The table alias used in the constructed query.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $update
     */
    public function update($update = null, $alias = null);
    /**
     * Turns the query being built into an insert query that inserts into
     * a certain table
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->insert('users')
     *         ->values(
     *             array(
     *                 'name' => '?',
     *                 'password' => '?'
     *             )
     *         );
     * </code>
     *
     * @param string $insert The table into which the rows should be inserted.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $insert
     */
    public function insert($insert = null);
    /**
     * Creates and adds a query root corresponding to the table identified by the
     * given alias, forming a cartesian product with any existing query roots.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.id')
     *         ->from('users', 'u')
     * </code>
     *
     * @param string|IQueryFunction $from The table.
     * @param string|null $alias The alias of the table.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $from
     */
    public function from($from, $alias = null);
    /**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->join('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause.
     * @param string $join The table name to join.
     * @param string $alias The alias of the join table.
     * @param string|ICompositeExpression|null $condition The condition for the join.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $fromAlias
     * @psalm-taint-sink sql $join
     * @psalm-taint-sink sql $alias
     * @psalm-taint-sink sql $condition
     */
    public function join($fromAlias, $join, $alias, $condition = null);
    /**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->innerJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause.
     * @param string $join The table name to join.
     * @param string $alias The alias of the join table.
     * @param string|ICompositeExpression|null $condition The condition for the join.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $fromAlias
     * @psalm-taint-sink sql $join
     * @psalm-taint-sink sql $alias
     * @psalm-taint-sink sql $condition
     */
    public function innerJoin($fromAlias, $join, $alias, $condition = null);
    /**
     * Creates and adds a left join to the query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause.
     * @param string $join The table name to join.
     * @param string $alias The alias of the join table.
     * @param string|ICompositeExpression|null $condition The condition for the join.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $fromAlias
     * @psalm-taint-sink sql $join
     * @psalm-taint-sink sql $alias
     * @psalm-taint-sink sql $condition
     */
    public function leftJoin($fromAlias, $join, $alias, $condition = null);
    /**
     * Creates and adds a right join to the query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->rightJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause.
     * @param string $join The table name to join.
     * @param string $alias The alias of the join table.
     * @param string|ICompositeExpression|null $condition The condition for the join.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $fromAlias
     * @psalm-taint-sink sql $join
     * @psalm-taint-sink sql $alias
     * @psalm-taint-sink sql $condition
     */
    public function rightJoin($fromAlias, $join, $alias, $condition = null);
    /**
     * Sets a new value for a column in a bulk update query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $key The column to set.
     * @param ILiteral|IParameter|IQueryFunction|string $value The value, expression, placeholder, etc.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $key
     * @psalm-taint-sink sql $value
     */
    public function set($key, $value);
    /**
     * Specifies one or more restrictions to the query result.
     * Replaces any previously specified restrictions, if any.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->where('u.id = ?');
     *
     *     // You can optionally programmatically build and/or expressions
     *     $qb = $conn->getQueryBuilder();
     *
     *     $or = $qb->expr()->orx();
     *     $or->add($qb->expr()->eq('u.id', 1));
     *     $or->add($qb->expr()->eq('u.id', 2));
     *
     *     $qb->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where($or);
     * </code>
     *
     * @param mixed $predicates The restriction predicates.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $predicates
     */
    public function where(...$predicates);
    /**
     * Adds one or more restrictions to the query results, forming a logical
     * conjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.username LIKE ?')
     *         ->andWhere('u.is_active = 1');
     * </code>
     *
     * @param mixed ...$where The query restrictions.
     *
     * @return $this This QueryBuilder instance.
     *
     * @see where()
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $where
     */
    public function andWhere(...$where);
    /**
     * Adds one or more restrictions to the query results, forming a logical
     * disjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->where('u.id = 1')
     *         ->orWhere('u.id = 2');
     * </code>
     *
     * @param mixed ...$where The WHERE statement.
     *
     * @return $this This QueryBuilder instance.
     *
     * @see where()
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $where
     */
    public function orWhere(...$where);
    /**
     * Specifies a grouping over the results of the query.
     * Replaces any previously specified groupings, if any.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->groupBy('u.id');
     * </code>
     *
     * @param mixed ...$groupBys The grouping expression.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $groupBys
     */
    public function groupBy(...$groupBys);
    /**
     * Adds a grouping expression to the query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->groupBy('u.lastLogin');
     *         ->addGroupBy('u.createdAt')
     * </code>
     *
     * @param mixed ...$groupBy The grouping expression.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $groupby
     */
    public function addGroupBy(...$groupBy);
    /**
     * Sets a value for a column in an insert query.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->insert('users')
     *         ->values(
     *             array(
     *                 'name' => '?'
     *             )
     *         )
     *         ->setValue('password', '?');
     * </code>
     *
     * @param string $column The column into which the value should be inserted.
     * @param IParameter|string $value The value that should be inserted into the column.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $column
     * @psalm-taint-sink sql $value
     */
    public function setValue($column, $value);
    /**
     * Specifies values for an insert query indexed by column names.
     * Replaces any previous values, if any.
     *
     * <code>
     *     $qb = $conn->getQueryBuilder()
     *         ->insert('users')
     *         ->values(
     *             array(
     *                 'name' => '?',
     *                 'password' => '?'
     *             )
     *         );
     * </code>
     *
     * @param array $values The values to specify for the insert query indexed by column names.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $values
     */
    public function values(array $values);
    /**
     * Specifies a restriction over the groups of the query.
     * Replaces any previous having restrictions, if any.
     *
     * @param mixed ...$having The restriction over the groups.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $having
     */
    public function having(...$having);
    /**
     * Adds a restriction over the groups of the query, forming a logical
     * conjunction with any existing having restrictions.
     *
     * @param mixed ...$having The restriction to append.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $andHaving
     */
    public function andHaving(...$having);
    /**
     * Adds a restriction over the groups of the query, forming a logical
     * disjunction with any existing having restrictions.
     *
     * @param mixed ...$having The restriction to add.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $having
     */
    public function orHaving(...$having);
    /**
     * Specifies an ordering for the query results.
     * Replaces any previously specified orderings, if any.
     *
     * @param string|IQueryFunction|ILiteral|IParameter $sort The ordering expression.
     * @param string $order The ordering direction.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $sort
     * @psalm-taint-sink sql $order
     */
    public function orderBy($sort, $order = null);
    /**
     * Adds an ordering to the query results.
     *
     * @param string|ILiteral|IParameter|IQueryFunction $sort The ordering expression.
     * @param string $order The ordering direction.
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     *
     * @psalm-taint-sink sql $sort
     * @psalm-taint-sink sql $order
     */
    public function addOrderBy($sort, $order = null);
    /**
     * Gets a query part by its name.
     *
     * @param string $queryPartName
     *
     * @return mixed
     * @since 8.2.0
     */
    public function getQueryPart($queryPartName);
    /**
     * Gets all query parts.
     *
     * @return array
     * @since 8.2.0
     */
    public function getQueryParts();
    /**
     * Resets SQL parts.
     *
     * @param array|null $queryPartNames
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function resetQueryParts($queryPartNames = null);
    /**
     * Resets a single SQL part.
     *
     * @param string $queryPartName
     *
     * @return $this This QueryBuilder instance.
     * @since 8.2.0
     */
    public function resetQueryPart($queryPartName);
    /**
     * Creates a new named parameter and bind the value $value to it.
     *
     * This method provides a shortcut for PDOStatement::bindValue
     * when using prepared statements.
     *
     * The parameter $value specifies the value that you want to bind. If
     * $placeholder is not provided bindValue() will automatically create a
     * placeholder for you. An automatic placeholder will be of the name
     * ':dcValue1', ':dcValue2' etc.
     *
     * For more information see {@link https://www.php.net/pdostatement-bindparam}
     *
     * Example:
     * <code>
     * $value = 2;
     * $q->eq( 'id', $q->bindValue( $value ) );
     * $stmt = $q->executeQuery(); // executed with 'id = 2'
     * </code>
     *
     * @license New BSD License
     * @link http://www.zetacomponents.org
     *
     * @param mixed $value
     * @param mixed $type
     * @param string $placeHolder The name to bind with. The string must start with a colon ':'.
     *
     * @return IParameter
     * @since 8.2.0
     *
     * @psalm-taint-escape sql
     */
    public function createNamedParameter($value, $type = self::PARAM_STR, $placeHolder = null);
    /**
     * Creates a new positional parameter and bind the given value to it.
     *
     * Attention: If you are using positional parameters with the query builder you have
     * to be very careful to bind all parameters in the order they appear in the SQL
     * statement , otherwise they get bound in the wrong order which can lead to serious
     * bugs in your code.
     *
     * Example:
     * <code>
     *  $qb = $conn->getQueryBuilder();
     *  $qb->select('u.*')
     *     ->from('users', 'u')
     *     ->where('u.username = ' . $qb->createPositionalParameter('Foo', IQueryBuilder::PARAM_STR))
     *     ->orWhere('u.username = ' . $qb->createPositionalParameter('Bar', IQueryBuilder::PARAM_STR))
     * </code>
     *
     * @param mixed $value
     * @param integer $type
     *
     * @return IParameter
     * @since 8.2.0
     *
     * @psalm-taint-escape sql
     */
    public function createPositionalParameter($value, $type = self::PARAM_STR);
    /**
     * Creates a new parameter
     *
     * Example:
     * <code>
     *  $qb = $conn->getQueryBuilder();
     *  $qb->select('u.*')
     *     ->from('users', 'u')
     *     ->where('u.username = ' . $qb->createParameter('name'))
     *     ->setParameter('name', 'Bar', IQueryBuilder::PARAM_STR))
     * </code>
     *
     * @param string $name
     *
     * @return IParameter
     * @since 8.2.0
     *
     * @psalm-taint-escape sql
     */
    public function createParameter($name);
    /**
     * Creates a new function
     *
     * Attention: Column names inside the call have to be quoted before hand
     *
     * Example:
     * <code>
     *  $qb = $conn->getQueryBuilder();
     *  $qb->select($qb->createFunction('COUNT(*)'))
     *     ->from('users', 'u')
     *  echo $qb->getSQL(); // SELECT COUNT(*) FROM `users` u
     * </code>
     * <code>
     *  $qb = $conn->getQueryBuilder();
     *  $qb->select($qb->createFunction('COUNT(`column`)'))
     *     ->from('users', 'u')
     *  echo $qb->getSQL(); // SELECT COUNT(`column`) FROM `users` u
     * </code>
     *
     * @param string $call
     *
     * @return IQueryFunction
     * @since 8.2.0
     *
     * @psalm-taint-sink sql
     */
    public function createFunction($call);
    /**
     * Used to get the id of the last inserted element
     * @return int
     * @throws \BadMethodCallException When being called before an insert query has been run.
     * @since 9.0.0
     */
    public function getLastInsertId() : int;
    /**
     * Returns the table name quoted and with database prefix as needed by the implementation
     *
     * @param string|IQueryFunction $table
     * @return string
     * @since 9.0.0
     */
    public function getTableName($table);
    /**
     * Returns the column name quoted and with table alias prefix as needed by the implementation
     *
     * @param string $column
     * @param string $tableAlias
     * @return string
     * @since 9.0.0
     */
    public function getColumnName($column, $tableAlias = '');
}
namespace OCP\DB;

/**
 * Database types supported by Nextcloud's DBs
 *
 * Use these constants instead of \Doctrine\DBAL\Types\Type or \Doctrine\DBAL\Types\Types
 *
 * @since 21.0.0
 */
final class Types
{
    /**
     * @var string
     * @since 21.0.0
     */
    public const BIGINT = 'bigint';
    /**
     * @var string
     * @since 21.0.0
     */
    public const BINARY = 'binary';
    /**
     * @var string
     * @since 21.0.0
     */
    public const BLOB = 'blob';
    /**
     * @var string
     * @since 21.0.0
     */
    public const BOOLEAN = 'boolean';
    /**
     * @var string
     * @since 21.0.0
     */
    public const DATE = 'date';
    /**
     * @var string
     * @since 21.0.0
     */
    public const DATETIME = 'datetime';
    /**
     * @var string
     * @since 21.0.0
     */
    public const DECIMAL = 'decimal';
    /**
     * @var string
     * @since 21.0.0
     */
    public const FLOAT = 'float';
    /**
     * @var string
     * @since 21.0.0
     */
    public const INTEGER = 'integer';
    /**
     * @var string
     * @since 21.0.0
     */
    public const SMALLINT = 'smallint';
    /**
     * @var string
     * @since 21.0.0
     */
    public const STRING = 'string';
    /**
     * @var string
     * @since 21.0.0
     */
    public const TEXT = 'text';
    /**
     * @var string
     * @since 21.0.0
     */
    public const TIME = 'time';
    /**
     * @var string
     * @since 24.0.0
     */
    public const JSON = 'json';
}
/**
 * This interface allows you to prepare a database query.
 *
 * This interface must not be implemented in your application but
 * instead obtained from IDBConnection::prepare.
 *
 * ```php
 * $prepare = $this->db->prepare($query->getSql());
 * ```
 *
 * @since 21.0.0
 */
interface IPreparedStatement
{
    /**
     * @return true
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::closeCursor on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function closeCursor() : bool;
    /**
     * @param int $fetchMode
     *
     * @return mixed
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::fetch on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function fetch(int $fetchMode = \PDO::FETCH_ASSOC);
    /**
     * @param int $fetchMode
     *
     * @return mixed[]
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::fetchAll on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function fetchAll(int $fetchMode = \PDO::FETCH_ASSOC);
    /**
     * @return mixed
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::fetchColumn on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function fetchColumn();
    /**
     * @return mixed
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::fetchOne on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function fetchOne();
    /**
     * @param int|string $param
     * @param mixed $value
     * @param int $type
     *
     * @return bool
     *
     * @throws Exception
     *
     * @since 21.0.0
     */
    public function bindValue($param, $value, $type = \Doctrine\DBAL\ParameterType::STRING) : bool;
    /**
     * @param int|string $param
     * @param mixed $variable
     * @param int $type
     * @param int|null $length
     *
     * @return bool
     *
     * @throws Exception
     *
     * @since 21.0.0
     */
    public function bindParam($param, &$variable, $type = \Doctrine\DBAL\ParameterType::STRING, $length = null) : bool;
    /**
     * @param mixed[]|null $params
     *
     * @return IResult
     *
     * @since 21.0.0
     * @throws Exception
     */
    public function execute($params = null) : \OCP\DB\IResult;
    /**
     * @return int
     *
     * @since 21.0.0
     *
     * @throws Exception
     * @deprecated 21.0.0 use \OCP\DB\IResult::rowCount on the \OCP\DB\IResult returned by \OCP\IDBConnection::prepare
     */
    public function rowCount() : int;
}
/**
 * This interface represents the result of a database query.
 *
 * Usage:
 *
 * ```php
 * $qb = $this->db->getQueryBuilder();
 * $qb->select(...);
 * $result = $query->executeQuery();
 * ```
 *
 * This interface must not be implemented in your application.
 *
 * @since 21.0.0
 */
interface IResult
{
    /**
     * @return true
     *
     * @since 21.0.0
     */
    public function closeCursor() : bool;
    /**
     * @param int $fetchMode
     *
     * @return mixed
     *
     * @since 21.0.0
     */
    public function fetch(int $fetchMode = \PDO::FETCH_ASSOC);
    /**
     * @param int $fetchMode (one of PDO::FETCH_ASSOC, PDO::FETCH_NUM or PDO::FETCH_COLUMN (2, 3 or 7)
     *
     * @return mixed[]
     *
     * @since 21.0.0
     */
    public function fetchAll(int $fetchMode = \PDO::FETCH_ASSOC) : array;
    /**
     * @return mixed
     *
     * @since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\IResult::fetchOne
     */
    public function fetchColumn();
    /**
     * Returns the first value of the next row of the result or FALSE if there are no more rows.
     *
     * @return false|mixed
     *
     * @since 21.0.0
     */
    public function fetchOne();
    /**
     * @return int
     *
     * @since 21.0.0
     */
    public function rowCount() : int;
}
/**
 * This interface allows to get information about the database schema.
 * This is particularly helpful for database migration scripts.
 *
 * This interface must not be implemented in your application but
 * instead can be obtained in your migration scripts with the
 * `$schemaClosure` Closure.
 *
 * @since 13.0.0
 */
interface ISchemaWrapper
{
    /**
     * @param string $tableName
     *
     * @return \Doctrine\DBAL\Schema\Table
     * @throws \Doctrine\DBAL\Schema\SchemaException
     * @since 13.0.0
     */
    public function getTable($tableName);
    /**
     * Does this schema have a table with the given name?
     *
     * @param string $tableName Prefix is automatically prepended
     *
     * @return boolean
     * @since 13.0.0
     */
    public function hasTable($tableName);
    /**
     * Creates a new table.
     *
     * @param string $tableName Prefix is automatically prepended
     * @return \Doctrine\DBAL\Schema\Table
     * @since 13.0.0
     */
    public function createTable($tableName);
    /**
     * Drops a table from the schema.
     *
     * @param string $tableName Prefix is automatically prepended
     * @return \Doctrine\DBAL\Schema\Schema
     * @since 13.0.0
     */
    public function dropTable($tableName);
    /**
     * Gets all tables of this schema.
     *
     * @return \Doctrine\DBAL\Schema\Table[]
     * @since 13.0.0
     */
    public function getTables();
    /**
     * Gets all table names, prefixed with table prefix
     *
     * @return array
     * @since 13.0.0
     */
    public function getTableNames();
    /**
     * Gets all table names
     *
     * @return array
     * @since 13.0.0
     */
    public function getTableNamesWithoutPrefix();
    /**
     * Gets the DatabasePlatform for the database.
     *
     * @return AbstractPlatform
     *
     * @throws Exception
     * @since 23.0.0
     */
    public function getDatabasePlatform();
}
namespace OCP\DB\Events;

/**
 * Event to allow apps to register information about missing database indices
 *
 * This event will be dispatched for checking on the admin settings and when running
 * occ db:add-missing-indices which will then create those indices
 *
 * @since 28.0.0
 */
class AddMissingIndicesEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string[] $columns
     * @since 28.0.0
     */
    public function addMissingIndex(string $tableName, string $indexName, array $columns) : void
    {
    }
    /**
     * @since 28.0.0
     * @return array<array-key, array{tableName: string, indexName: string, columns: string[]}>
     */
    public function getMissingIndices() : array
    {
    }
}
namespace OCP\DB;

/**
 * Database exception
 *
 * Thrown by Nextcloud's database abstraction layer. This is the base class that
 * any specific exception will extend. Use this class in your try-catch to catch
 * *any* error related to the database. Use any of the subclasses in the same
 * namespace if you are only interested in specific errors.
 *
 * @psalm-immutable
 * @since 21.0.0
 */
class Exception extends \Exception
{
    /**
     * Nextcloud lost connection to the database
     *
     * @since 21.0.0
     */
    public const REASON_CONNECTION_LOST = 1;
    /**
     * A database constraint was violated
     *
     * @since 21.0.0
     */
    public const REASON_CONSTRAINT_VIOLATION = 2;
    /**
     * A database object (table, column, index) already exists
     *
     * @since 21.0.0
     */
    public const REASON_DATABASE_OBJECT_EXISTS = 3;
    /**
     * A database object (table, column, index) can't be found
     *
     * @since 21.0.0
     */
    public const REASON_DATABASE_OBJECT_NOT_FOUND = 4;
    /**
     * The database ran into a deadlock
     *
     * @since 21.0.0
     */
    public const REASON_DEADLOCK = 5;
    /**
     * The database driver encountered an issue
     *
     * @since 21.0.0
     */
    public const REASON_DRIVER = 6;
    /**
     * A foreign key constraint was violated
     *
     * @since 21.0.0
     */
    public const REASON_FOREIGN_KEY_VIOLATION = 7;
    /**
     * An invalid argument was passed to the database abstraction
     *
     * @since 21.0.0
     */
    public const REASON_INVALID_ARGUMENT = 8;
    /**
     * A field name was invalid
     *
     * @since 21.0.0
     */
    public const REASON_INVALID_FIELD_NAME = 9;
    /**
     * A name in the query was ambiguous
     *
     * @since 21.0.0
     */
    public const REASON_NON_UNIQUE_FIELD_NAME = 10;
    /**
     * A not null constraint was violated
     *
     * @since 21.0.0
     */
    public const REASON_NOT_NULL_CONSTRAINT_VIOLATION = 11;
    /**
     * A generic server error was encountered
     *
     * @since 21.0.0
     */
    public const REASON_SERVER = 12;
    /**
     * A syntax error was reported by the server
     *
     * @since 21.0.0
     */
    public const REASON_SYNTAX_ERROR = 13;
    /**
     * A unique constraint was violated
     *
     * @since 21.0.0
     */
    public const REASON_UNIQUE_CONSTRAINT_VIOLATION = 14;
    /**
     * @return int|null
     * @psalm-return Exception::REASON_*
     * @since 21.0.0
     */
    public function getReason() : ?int
    {
    }
}
namespace OCP\Dashboard;

/**
 * Interface IWidget
 *
 * @since 20.0.0
 */
interface IWidget
{
    /**
     * @return string Unique id that identifies the widget, e.g. the app id
     * @since 20.0.0
     */
    public function getId() : string;
    /**
     * @return string User facing title of the widget
     * @since 20.0.0
     */
    public function getTitle() : string;
    /**
     * @return int Initial order for widget sorting
     * @since 20.0.0
     */
    public function getOrder() : int;
    /**
     * @return string css class that displays an icon next to the widget title
     * @since 20.0.0
     */
    public function getIconClass() : string;
    /**
     * @return string|null The absolute url to the apps own view
     * @since 20.0.0
     */
    public function getUrl() : ?string;
    /**
     * Execute widget bootstrap code like loading scripts and providing initial state
     * @since 20.0.0
     */
    public function load() : void;
}
/**
 * Adds a button to the dashboard api representation
 *
 * @since 25.0.0
 */
interface IButtonWidget extends \OCP\Dashboard\IWidget
{
    /**
     * Get the buttons to show on the widget
     *
     * @param string $userId
     * @return WidgetButton[]
     * @since 25.0.0
     */
    public function getWidgetButtons(string $userId) : array;
}
/**
 * Allow getting the absolute icon url for a widget
 *
 * @since 25.0.0
 */
interface IIconWidget extends \OCP\Dashboard\IWidget
{
    /**
     * Get the absolute url for the widget icon
     *
     * @return string
     * @since 25.0.0
     */
    public function getIconUrl() : string;
}
/**
 * Allow getting widget options
 *
 * @since 25.0.0
 */
interface IOptionWidget extends \OCP\Dashboard\IWidget
{
    /**
     * Get additional options for the widget
     * @since 25.0.0
     */
    public function getWidgetOptions() : \OCP\Dashboard\Model\WidgetOptions;
}
namespace OCP\Dashboard\Model;

/**
 * Button for a dashboard widget
 *
 * @since 25.0.0
 */
class WidgetButton
{
    public const TYPE_NEW = 'new';
    public const TYPE_MORE = 'more';
    public const TYPE_SETUP = 'setup';
    /**
     * @param string $type
     * @param string $link
     * @param string $text
     * @since 25.0.0
     */
    public function __construct(string $type, string $link, string $text)
    {
    }
    /**
     * Get the button type, either "new", "more" or "setup"
     *
     * @return string
     * @since 25.0.0
     */
    public function getType() : string
    {
    }
    /**
     * Get the absolute url the buttons links to
     *
     * @return string
     * @since 25.0.0
     */
    public function getLink() : string
    {
    }
    /**
     * Get the translated text for the button
     *
     * @return string
     * @since 25.0.0
     */
    public function getText() : string
    {
    }
}
/**
 * Option for displaying a widget
 *
 * @since 25.0.0
 */
class WidgetOptions
{
    /**
     * @param bool $roundItemIcons
     * @since 25.0.0
     */
    public function __construct(bool $roundItemIcons)
    {
    }
    /**
     * Get the default set of options
     *
     * @return WidgetOptions
     * @since 25.0.0
     */
    public static function getDefault() : \OCP\Dashboard\Model\WidgetOptions
    {
    }
    /**
     * Whether the clients should render icons for widget items as round icons
     *
     * @return bool
     * @since 25.0.0
     */
    public function withRoundItemIcons() : bool
    {
    }
}
/**
 * Interface WidgetItem
 *
 * This class is used by IAPIWidget interface.
 * It represents an widget item data that can be provided to clients via the Dashboard API
 * @see IAPIWidget::getItems
 *
 * @since 22.0.0
 *
 */
final class WidgetItem implements \JsonSerializable
{
    /**
     * WidgetItem constructor
     *
     * @since 22.0.0
     *
     * @param string $type
     */
    public function __construct(string $title = '', string $subtitle = '', string $link = '', string $iconUrl = '', string $sinceId = '')
    {
    }
    /**
     * Get the item title
     *
     * @since 22.0.0
     *
     * @return string
     */
    public function getTitle() : string
    {
    }
    /**
     * Get the item subtitle
     *
     * @since 22.0.0
     *
     * @return string
     */
    public function getSubtitle() : string
    {
    }
    /**
     * Get the item link
     *
     * @since 22.0.0
     *
     * @return string
     */
    public function getLink() : string
    {
    }
    /**
     * Get the item icon URL
     * The icon should be a square svg or a jpg/png of at least 44x44px
     *
     * @since 22.0.0
     *
     * @return string
     */
    public function getIconUrl() : string
    {
    }
    /**
     * Get the item since ID
     *
     * @since 22.0.0
     *
     * @return string
     */
    public function getSinceId() : string
    {
    }
    /**
     * @since 22.0.0
     *
     * @return array
     */
    public function jsonSerialize() : array
    {
    }
}
namespace OCP\Dashboard;

/**
 * interface IAPIWidget
 *
 * @since 22.0.0
 */
interface IAPIWidget extends \OCP\Dashboard\IWidget
{
    /**
     * @return \OCP\Dashboard\Model\WidgetItem[] The widget items
     * @since 22.0.0
     */
    public function getItems(string $userId, ?string $since = null, int $limit = 7) : array;
}
/**
 * interface IConditionalWidget
 *
 * Allows an app to lazy-register a widget and in the lazy part of the code
 * it can decide if the widget should really be registered.
 *
 * @since 26.0.0
 */
interface IConditionalWidget extends \OCP\Dashboard\IWidget
{
    /**
     * @return bool Whether the widget is enabled and should be registered
     * @since 26.0.0
     */
    public function isEnabled() : bool;
}
/**
 * Interface IManager
 *
 * @since 20.0.0
 */
interface IManager
{
    /**
     * @param string $widgetClass
     * @since 20.0.0
     */
    public function lazyRegisterWidget(string $widgetClass, string $appId) : void;
    /**
     * @since 20.0.0
     *
     * @return IWidget[]
     */
    public function getWidgets() : array;
}
/**
 * Class RegisterPanelEvent
 *
 * This event is dispatched to allow apps supporting older Nextcloud versions to
 * still register their dashboard panels so that they are only constructed when
 * they are needed. Deprecated right away so we can drop it again after 19 is EOL
 * and backward compatible apps can use OCP\AppFramework\Bootstrap\IBootstrap
 *
 * @since 20.0.0
 * @deprecated 20.0.0
 */
class RegisterWidgetEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IManager $manager
     * @since 20.0.0
     */
    public function __construct(\OCP\Dashboard\IManager $manager)
    {
    }
    /**
     * @param string $panelClass
     * @since 20.0.0
     */
    public function registerWidget(string $panelClass)
    {
    }
}
namespace OCP\DataCollector;

/**
 * DataCollectorInterface.
 *
 * @since 24.0.0
 */
interface IDataCollector
{
    /**
     * Collects data for the given Request and Response.
     * @since 24.0.0
     */
    public function collect(\OC\AppFramework\Http\Request $request, \OCP\AppFramework\Http\Response $response, \Throwable $exception = null) : void;
    /**
     * Reset the state of the profiler.
     * @since 24.0.0
     */
    public function reset() : void;
    /**
     * Returns the name of the collector.
     * @since 24.0.0
     */
    public function getName() : string;
}
/**
 * Children of this class must store the collected data in
 * the data property.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bschussek@symfony.com>
 * @author Carl Schwan <carl@carlschwan.eu>
 * @since 24.0.0
 */
abstract class AbstractDataCollector implements \OCP\DataCollector\IDataCollector, \JsonSerializable
{
    /** @var array */
    protected $data = [];
    /**
     * @since 24.0.0
     */
    public function getName() : string
    {
    }
    /**
     * Reset the state of the profiler. By default it only empties the
     * $this->data contents, but you can override this method to do
     * additional cleaning.
     * @since 24.0.0
     */
    public function reset() : void
    {
    }
    /**
     * @since 24.0.0
     */
    public function __sleep() : array
    {
    }
    /**
     * @internal to prevent implementing \Serializable
     * @since 24.0.0
     */
    protected final function serialize()
    {
    }
    /**
     * @internal to prevent implementing \Serializable
     * @since 24.0.0
     */
    protected final function unserialize(string $data)
    {
    }
    /**
     * @since 24.0.0
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
    }
}
namespace OCP\Diagnostics;

/**
 * Interface IEvent
 *
 * @since 8.0.0
 */
interface IEvent
{
    /**
     * @return string
     * @since 8.0.0
     */
    public function getId();
    /**
     * @return string
     * @since 8.0.0
     */
    public function getDescription();
    /**
     * @return float
     * @since 8.0.0
     */
    public function getStart();
    /**
     * @return float
     * @since 8.0.0
     */
    public function getEnd();
    /**
     * @return float
     * @since 8.0.0
     */
    public function getDuration();
}
/**
 * Interface IEventLogger
 *
 * @since 8.0.0
 */
interface IEventLogger
{
    /**
     * Mark the start of an event setting its ID $id and providing event description $description.
     *
     * @param string $id
     * @param string $description
     * @since 8.0.0
     */
    public function start($id, $description);
    /**
     * Mark the end of an event with specific ID $id, marked by start() method.
     * Ending event should store \OCP\Diagnostics\IEvent to
     * be returned with getEvents() method.
     *
     * @param string $id
     * @since 8.0.0
     */
    public function end($id);
    /**
     * Mark the start and the end of an event with specific ID $id and description $description,
     * explicitly marking start and end of the event, represented by $start and $end timestamps.
     * Logging event should store \OCP\Diagnostics\IEvent to
     * be returned with getEvents() method.
     *
     * @param string $id
     * @param string $description
     * @param float $start
     * @param float $end
     * @since 8.0.0
     */
    public function log($id, $description, $start, $end);
    /**
     * This method should return all \OCP\Diagnostics\IEvent objects stored using
     * start()/end() or log() methods
     *
     * @return \OCP\Diagnostics\IEvent[]
     * @since 8.0.0
     */
    public function getEvents();
    /**
     * Activate the module for the duration of the request. Deactivated module
     * does not create and store \OCP\Diagnostics\IEvent objects.
     * Only activated module should create and store objects to be
     * returned with getEvents() call.
     *
     * @since 12.0.0
     */
    public function activate();
}
/**
 * Interface IQuery
 *
 * @since 8.0.0
 */
interface IQuery
{
    /**
     * @return string
     * @since 8.0.0
     */
    public function getSql();
    /**
     * @return array
     * @since 8.0.0
     */
    public function getParams();
    /**
     * @return float
     * @since 8.0.0
     */
    public function getDuration();
    /**
     * @return float
     * @since 11.0.0
     */
    public function getStartTime();
    /**
     * @return array
     * @since 11.0.0
     */
    public function getStacktrace();
    /**
     * @return array
     * @since 12.0.0
     */
    public function getStart();
}
/**
 * Interface IQueryLogger
 *
 * @since 8.0.0
 */
interface IQueryLogger extends \Doctrine\DBAL\Logging\SQLLogger
{
    /**
     * Mark the start of a query providing query SQL statement, its parameters and types.
     * This method should be called as close to the DB as possible and after
     * query is finished finalized with stopQuery() method.
     *
     * @param string $sql
     * @param array|null $params
     * @param array|null $types
     * @since 8.0.0
     */
    public function startQuery($sql, array $params = null, array $types = null);
    /**
     * Mark the end of the current active query. Ending query should store \OCP\Diagnostics\IQuery to
     * be returned with getQueries() method.
     *
     * @return mixed
     * @since 8.0.0
     */
    public function stopQuery();
    /**
     * This method should return all \OCP\Diagnostics\IQuery objects stored using
     * startQuery()/stopQuery() methods.
     *
     * @return \OCP\Diagnostics\IQuery[]
     * @since 8.0.0
     */
    public function getQueries();
    /**
     * Activate the module for the duration of the request. Deactivated module
     * does not create and store \OCP\Diagnostics\IQuery objects.
     * Only activated module should create and store objects to be
     * returned with getQueries() call.
     *
     * @since 12.0.0
     */
    public function activate();
}
namespace OCP\DirectEditing;

/**
 * @since 18.0.0
 */
abstract class ACreateEmpty
{
    /**
     * Unique id for the creator to filter templates
     *
     * e.g. document/spreadsheet/presentation
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getId() : string;
    /**
     * Descriptive name for the create action
     *
     * e.g Create a new document
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getName() : string;
    /**
     * Default file extension for the new file
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getExtension() : string;
    /**
     * Mimetype of the resulting created file
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getMimetype() : string;
    /**
     * Add content when creating empty files
     *
     * @since 18.0.0
     * @param File $file
     */
    public function create(\OCP\Files\File $file, string $creatorId = null, string $templateId = null) : void
    {
    }
}
/**
 * @since 18.0.0
 */
abstract class ACreateFromTemplate extends \OCP\DirectEditing\ACreateEmpty
{
    /**
     * List of available templates for the create from template action
     *
     * @since 18.0.0
     * @return ATemplate[]
     */
    public abstract function getTemplates() : array;
}
/**
 * Class ATemplate
 *
 * @since 18.0.0
 */
abstract class ATemplate implements \JsonSerializable
{
    /**
     * Return a unique id so the app can identify the template
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getId() : string;
    /**
     * Return a title that is displayed to the user
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getTitle() : string;
    /**
     * Return a link to the template preview image
     *
     * @since 18.0.0
     * @return string
     */
    public abstract function getPreview() : string;
    /**
     * @since 18.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * Interface IManager
 *
 * @since 18.0.0
 */
interface IManager
{
    /**
     * Register a new editor
     *
     * @since 18.0.0
     * @param IEditor $directEditor
     */
    public function registerDirectEditor(\OCP\DirectEditing\IEditor $directEditor) : void;
    /**
     * Open the editing page for a provided token
     *
     * @since 18.0.0
     * @param string $token
     * @return Response
     */
    public function edit(string $token) : \OCP\AppFramework\Http\Response;
    /**
     * Create a new token based on the file path and editor details
     *
     * @since 18.0.0
     * @param string $path
     * @param string $editorId
     * @param string $creatorId
     * @param null $templateId
     * @return string
     * @throws NotPermittedException
     * @throws RuntimeException
     */
    public function create(string $path, string $editorId, string $creatorId, $templateId = null) : string;
    /**
     * Get the token details for a given token
     *
     * @since 18.0.0
     * @param string $token
     * @return IToken
     */
    public function getToken(string $token) : \OCP\DirectEditing\IToken;
    /**
     * Cleanup expired tokens
     *
     * @since 18.0.0
     * @return int number of deleted tokens
     */
    public function cleanup() : int;
    /**
     * Check if direct editing is enabled
     *
     * @since 20.0.0
     * @return bool
     */
    public function isEnabled() : bool;
    /**
     * @since 24.0.0
     * @return IEditor[]
     */
    public function getEditors() : array;
}
/**
 * @since 18.0.0
 */
interface IToken
{
    /**
     * Extend the token validity time
     *
     * @since 18.0.0
     */
    public function extend() : void;
    /**
     * Invalidate the token
     *
     * @since 18.0.0
     */
    public function invalidate() : void;
    /**
     * Check if the token has already been used
     *
     * @since 18.0.0
     * @return bool
     */
    public function hasBeenAccessed() : bool;
    /**
     * Change to the user scope of the token
     *
     * @since 18.0.0
     */
    public function useTokenScope() : void;
    /**
     * Get the file that is related to the token
     *
     * @since 18.0.0
     * @return File
     * @throws NotFoundException
     */
    public function getFile() : \OCP\Files\File;
    /**
     * @since 18.0.0
     * @return string
     */
    public function getEditor() : string;
    /**
     * @since 18.0.0
     * @return string
     */
    public function getUser() : string;
}
/**
 * Event to allow to register the direct editor.
 *
 * @since 18.0.0
 */
class RegisterDirectEditorEvent extends \OCP\EventDispatcher\Event
{
    /**
     * RegisterDirectEditorEvent constructor.
     *
     * @param IManager $manager
     * @since 18.0.0
     */
    public function __construct(\OCP\DirectEditing\IManager $manager)
    {
    }
    /**
     * @since 18.0.0
     * @param IEditor $editor
     */
    public function register(\OCP\DirectEditing\IEditor $editor) : void
    {
    }
}
/**
 * @since 18.0.0
 */
interface IEditor
{
    /**
     * Return a unique identifier for the editor
     *
     * e.g. richdocuments
     *
     * @since 18.0.0
     * @return string
     */
    public function getId() : string;
    /**
     * Return a readable name for the editor
     *
     * e.g. Collabora Online
     *
     * @since 18.0.0
     * @return string
     */
    public function getName() : string;
    /**
     * A list of mimetypes that should open the editor by default
     *
     * @since 18.0.0
     * @return string[]
     */
    public function getMimetypes() : array;
    /**
     * A list of mimetypes that can be opened in the editor optionally
     *
     * @since 18.0.0
     * @return string[]
     */
    public function getMimetypesOptional() : array;
    /**
     * Return a list of file creation options to be presented to the user
     *
     * @since 18.0.0
     * @return ACreateFromTemplate[]|ACreateEmpty[]
     */
    public function getCreators() : array;
    /**
     * Return if the view is able to securely view a file without downloading it to the browser
     *
     * @since 18.0.0
     * @return bool
     */
    public function isSecure() : bool;
    /**
     * Return a template response for displaying the editor
     *
     * open can only be called once when the client requests the editor with a one-time-use token
     * For handling editing and later requests, editors need to implement their own token handling and take care of invalidation
     *
     * This behavior is similar to the current direct editing implementation in collabora where we generate a one-time token and switch over to the regular wopi token for the actual editing/saving process
     *
     * @since 18.0.0
     * @return Response
     */
    public function open(\OCP\DirectEditing\IToken $token) : \OCP\AppFramework\Http\Response;
}
namespace OCP;

/**
 * Class HintException
 *
 * An Exception class with the intention to be presented to the end user
 *
 * @package OCP
 * @since 23.0.0
 */
class HintException extends \Exception
{
    /**
     * HintException constructor.
     *
     * @since 23.0.0
     * @param string $message  The error message. It will be not revealed to the
     *                         the user (unless the hint is empty) and thus
     *                         should be not translated.
     * @param string $hint     A useful message that is presented to the end
     *                         user. It should be translated, but must not
     *                         contain sensitive data.
     * @param int $code
     * @param \Exception|null $previous
     */
    public function __construct($message, $hint = '', $code = 0, \Exception $previous = null)
    {
    }
    /**
     * Returns a string representation of this Exception that includes the error
     * code, the message and the hint.
     *
     * @since 23.0.0
     * @return string
     */
    public function __toString() : string
    {
    }
    /**
     * Returns the hint with the intention to be presented to the end user. If
     * an empty hint was specified upon instantiation, the message is returned
     * instead.
     *
     * @since 23.0.0
     * @return string
     */
    public function getHint() : string
    {
    }
}
namespace OCP\Encryption\Exceptions;

/**
 * Class GenericEncryptionException
 *
 * @since 8.1.0
 */
class GenericEncryptionException extends \OCP\HintException
{
    /**
     * @param string $message
     * @param string $hint
     * @param int $code
     * @param \Exception|null $previous
     * @since 8.1.0
     */
    public function __construct($message = '', $hint = '', $code = 0, \Exception $previous = null)
    {
    }
}
namespace OCP\Encryption\Keys;

/**
 * Interface IStorage
 *
 * @since 8.1.0
 */
interface IStorage
{
    /**
     * get user specific key
     *
     * @param string $uid ID if the user for whom we want the key
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return mixed key
     * @since 8.1.0
     */
    public function getUserKey($uid, $keyId, $encryptionModuleId);
    /**
     * get file specific key
     *
     * @param string $path path to file
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return mixed key
     * @since 8.1.0
     */
    public function getFileKey($path, $keyId, $encryptionModuleId);
    /**
     * get system-wide encryption keys not related to a specific user,
     * e.g something like a key for public link shares
     *
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return mixed key
     * @since 8.1.0
     */
    public function getSystemUserKey($keyId, $encryptionModuleId);
    /**
     * set user specific key
     *
     * @param string $uid ID if the user for whom we want the key
     * @param string $keyId id of the key
     * @param mixed $key
     * @param string $encryptionModuleId
     * @since 8.1.0
     */
    public function setUserKey($uid, $keyId, $key, $encryptionModuleId);
    /**
     * set file specific key
     *
     * @param string $path path to file
     * @param string $keyId id of the key
     * @param mixed $key
     * @param string $encryptionModuleId
     * @since 8.1.0
     */
    public function setFileKey($path, $keyId, $key, $encryptionModuleId);
    /**
     * set system-wide encryption keys not related to a specific user,
     * e.g something like a key for public link shares
     *
     * @param string $keyId id of the key
     * @param mixed $key
     * @param string $encryptionModuleId
     *
     * @return mixed key
     * @since 8.1.0
     */
    public function setSystemUserKey($keyId, $key, $encryptionModuleId);
    /**
     * delete user specific key
     *
     * @param string $uid ID if the user for whom we want to delete the key
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return boolean False when the key could not be deleted
     * @since 8.1.0
     */
    public function deleteUserKey($uid, $keyId, $encryptionModuleId);
    /**
     * delete file specific key
     *
     * @param string $path path to file
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return boolean False when the key could not be deleted
     * @since 8.1.0
     */
    public function deleteFileKey($path, $keyId, $encryptionModuleId);
    /**
     * delete all file keys for a given file
     *
     * @param string $path to the file
     *
     * @return boolean False when the keys could not be deleted
     * @since 8.1.0
     */
    public function deleteAllFileKeys($path);
    /**
     * delete system-wide encryption keys not related to a specific user,
     * e.g something like a key for public link shares
     *
     * @param string $keyId id of the key
     * @param string $encryptionModuleId
     *
     * @return boolean False when the key could not be deleted
     * @since 8.1.0
     */
    public function deleteSystemUserKey($keyId, $encryptionModuleId);
    /**
     * copy keys if a file was renamed
     *
     * @param string $source
     * @param string $target
     * @return boolean
     * @since 8.1.0
     */
    public function renameKeys($source, $target);
    /**
     * move keys if a file was renamed
     *
     * @param string $source
     * @param string $target
     * @return boolean
     * @since 8.1.0
     */
    public function copyKeys($source, $target);
    /**
     * backup keys of a given encryption module
     *
     * @param string $encryptionModuleId
     * @param string $purpose
     * @param string $uid
     * @return bool
     * @since 12.0.0
     */
    public function backupUserKeys($encryptionModuleId, $purpose, $uid);
}
namespace OCP\Encryption;

/**
 * Interface IFile
 *
 * @since 8.1.0
 */
interface IFile
{
    /**
     * get list of users with access to the file
     *
     * @param string $path to the file
     * @return array
     * @since 8.1.0
     */
    public function getAccessList($path);
}
/**
 * This class provides access to files encryption apps.
 *
 * @since 8.1.0
 */
interface IManager
{
    /**
     * Check if encryption is available (at least one encryption module needs to be enabled)
     *
     * @return bool true if enabled, false if not
     * @since 8.1.0
     */
    public function isEnabled();
    /**
     * Registers an callback function which must return an encryption module instance
     *
     * @param string $id
     * @param string $displayName
     * @param callable $callback
     * @throws ModuleAlreadyExistsException
     * @since 8.1.0
     */
    public function registerEncryptionModule($id, $displayName, callable $callback);
    /**
     * Unregisters an encryption module
     *
     * @param string $moduleId
     * @since 8.1.0
     */
    public function unregisterEncryptionModule($moduleId);
    /**
     * get a list of all encryption modules
     *
     * @return array [id => ['id' => $id, 'displayName' => $displayName, 'callback' => callback]]
     * @since 8.1.0
     */
    public function getEncryptionModules();
    /**
     * get a specific encryption module
     *
     * @param string $moduleId Empty to get the default module
     * @return IEncryptionModule
     * @throws ModuleDoesNotExistsException
     * @since 8.1.0
     */
    public function getEncryptionModule($moduleId = '');
    /**
     * get default encryption module Id
     *
     * @return string
     * @since 8.1.0
     */
    public function getDefaultEncryptionModuleId();
    /**
     * set default encryption module Id
     *
     * @param string $moduleId
     * @return string
     * @since 8.1.0
     */
    public function setDefaultEncryptionModule($moduleId);
}
/**
 * Interface IEncryptionModule
 *
 * @since 8.1.0
 */
interface IEncryptionModule
{
    /**
     * @return string defining the technical unique id
     * @since 8.1.0
     */
    public function getId();
    /**
     * In comparison to getKey() this function returns a human readable (maybe translated) name
     *
     * @return string
     * @since 8.1.0
     */
    public function getDisplayName();
    /**
     * start receiving chunks from a file. This is the place where you can
     * perform some initial step before starting encrypting/decrypting the
     * chunks
     *
     * @param string $path to the file
     * @param string $user who read/write the file (null for public access)
     * @param string $mode php stream open mode
     * @param array $header contains the header data read from the file
     * @param array $accessList who has access to the file contains the key 'users' and 'public'
     *
     * @return array $header contain data as key-value pairs which should be
     *                       written to the header, in case of a write operation
     *                       or if no additional data is needed return a empty array
     * @since 8.1.0
     */
    public function begin($path, $user, $mode, array $header, array $accessList);
    /**
     * last chunk received. This is the place where you can perform some final
     * operation and return some remaining data if something is left in your
     * buffer.
     *
     * @param string $path to the file
     * @param string $position id of the last block (looks like "<Number>end")
     *
     * @return string remained data which should be written to the file in case
     *                of a write operation
     *
     * @since 8.1.0
     * @since 9.0.0 parameter $position added
     */
    public function end($path, $position);
    /**
     * encrypt data
     *
     * @param string $data you want to encrypt
     * @param string $position position of the block we want to encrypt (starts with '0')
     *
     * @return mixed encrypted data
     *
     * @since 8.1.0
     * @since 9.0.0 parameter $position added
     */
    public function encrypt($data, $position);
    /**
     * decrypt data
     *
     * @param string $data you want to decrypt
     * @param int|string $position position of the block we want to decrypt
     *
     * @return mixed decrypted data
     *
     * @since 8.1.0
     * @since 9.0.0 parameter $position added
     */
    public function decrypt($data, $position);
    /**
     * update encrypted file, e.g. give additional users access to the file
     *
     * @param string $path path to the file which should be updated
     * @param string $uid of the user who performs the operation
     * @param array $accessList who has access to the file contains the key 'users' and 'public'
     * @return boolean
     * @since 8.1.0
     */
    public function update($path, $uid, array $accessList);
    /**
     * should the file be encrypted or not
     *
     * @param string $path
     * @return boolean
     * @since 8.1.0
     */
    public function shouldEncrypt($path);
    /**
     * get size of the unencrypted payload per block.
     * ownCloud read/write files with a block size of 8192 byte
     *
     * @param bool $signed
     * @return int
     * @since 8.1.0 optional parameter $signed was added in 9.0.0
     */
    public function getUnencryptedBlockSize($signed = false);
    /**
     * check if the encryption module is able to read the file,
     * e.g. if all encryption keys exists
     *
     * @param string $path
     * @param string $uid user for whom we want to check if he can read the file
     * @return boolean
     * @since 8.1.0
     */
    public function isReadable($path, $uid);
    /**
     * Initial encryption of all files
     *
     * @param InputInterface $input
     * @param OutputInterface $output write some status information to the terminal during encryption
     * @since 8.2.0
     */
    public function encryptAll(\Symfony\Component\Console\Input\InputInterface $input, \Symfony\Component\Console\Output\OutputInterface $output);
    /**
     * prepare encryption module to decrypt all files
     *
     * @param InputInterface $input
     * @param OutputInterface $output write some status information to the terminal during encryption
     * @param $user (optional) for which the files should be decrypted, default = all users
     * @return bool return false on failure or if it isn't supported by the module
     * @since 8.2.0
     */
    public function prepareDecryptAll(\Symfony\Component\Console\Input\InputInterface $input, \Symfony\Component\Console\Output\OutputInterface $output, $user = '');
    /**
     * Check if the module is ready to be used by that specific user.
     * In case a module is not ready - because e.g. key pairs have not been generated
     * upon login this method can return false before any operation starts and might
     * cause issues during operations.
     *
     * @param string $user
     * @return boolean
     * @since 9.1.0
     */
    public function isReadyForUser($user);
    /**
     * Does the encryption module needs a detailed list of users with access to the file?
     * For example if the encryption module uses per-user encryption keys and needs to know
     * the users with access to the file to encrypt/decrypt it.
     *
     * @since 13.0.0
     * @return bool
     */
    public function needDetailedAccessList();
}
namespace OCP\EventDispatcher;

/**
 * @since 18.0.0
 */
abstract class ABroadcastedEvent extends \OCP\EventDispatcher\Event implements \JsonSerializable
{
    /**
     * Get the name of the event, as received on the client-side
     *
     * Uses the fully qualified event class name by default
     *
     * @return string
     * @since 18.0.0
     */
    public function broadcastAs() : string
    {
    }
    /**
     * @return string[]
     * @since 18.0.0
     */
    public abstract function getUids() : array;
    /**
     * @since 18.0.0
     */
    public function setBroadcasted() : void
    {
    }
    /**
     * @since 18.0.0
     */
    public function isBroadcasted() : bool
    {
    }
}
/**
 * Event dispatcher service of Nextcloud
 *
 * @since 17.0.0
 */
interface IEventDispatcher
{
    /**
     * @template T of \OCP\EventDispatcher\Event
     * @param string $eventName preferably the fully-qualified class name of the Event sub class
     * @psalm-param string|class-string<T> $eventName preferably the fully-qualified class name of the Event sub class
     * @param callable $listener the object that is invoked when a matching event is dispatched
     * @psalm-param callable(T):void $listener
     * @param int $priority The higher this value, the earlier an event
     *                      listener will be triggered in the chain (defaults to 0)
     *
     * @since 17.0.0
     */
    public function addListener(string $eventName, callable $listener, int $priority = 0) : void;
    /**
     * @template T of \OCP\EventDispatcher\Event
     * @param string $eventName preferably the fully-qualified class name of the Event sub class
     * @psalm-param string|class-string<T> $eventName preferably the fully-qualified class name of the Event sub class
     * @param callable $listener the object that is invoked when a matching event is dispatched
     * @psalm-param callable(T):void $listener
     *
     * @since 19.0.0
     */
    public function removeListener(string $eventName, callable $listener) : void;
    /**
     * @template T of \OCP\EventDispatcher\Event
     * @param string $eventName preferably the fully-qualified class name of the Event sub class to listen for
     * @psalm-param string|class-string<T> $eventName preferably the fully-qualified class name of the Event sub class to listen for
     * @param string $className fully qualified class name (or ::class notation) of a \OCP\EventDispatcher\IEventListener that can be built by the DI container
     * @psalm-param class-string<\OCP\EventDispatcher\IEventListener<T>> $className fully qualified class name that can be built by the DI container
     * @param int $priority The higher this value, the earlier an event
     *                      listener will be triggered in the chain (defaults to 0)
     *
     * @since 17.0.0
     */
    public function addServiceListener(string $eventName, string $className, int $priority = 0) : void;
    /**
     * @template T of \OCP\EventDispatcher\Event
     * @param string $eventName
     * @psalm-param string|class-string<T> $eventName
     * @param Event $event
     * @psalm-param T $event
     *
     * @since 17.0.0
     * @deprecated 21.0.0 use \OCP\EventDispatcher\IEventDispatcher::dispatchTyped
     */
    public function dispatch(string $eventName, \OCP\EventDispatcher\Event $event) : void;
    /**
     * Dispatch a typed event
     *
     * Only use this with subclasses of ``\OCP\EventDispatcher\Event``.
     * The object's class will determine the event name.
     *
     * @param Event $event
     *
     * @since 18.0.0
     */
    public function dispatchTyped(\OCP\EventDispatcher\Event $event) : void;
}
/**
 * @since 17.0.0
 *
 * @template T of Event
 */
interface IEventListener
{
    /**
     * @param Event $event
     * @psalm-param T $event
     *
     * @since 17.0.0
     */
    public function handle(\OCP\EventDispatcher\Event $event) : void;
}
namespace OCP\Federation\Events;

/**
 * @since 25.0.0
 */
class TrustedServerRemovedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 25.0.0
     */
    public function __construct(string $urlHash)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getUrlHash() : string
    {
    }
}
namespace OCP\Federation\Exceptions;

/**
 * Class ActionNotSupportedException
 *
 *
 * @since 14.0.0
 */
class ActionNotSupportedException extends \OCP\HintException
{
    /**
     * ActionNotSupportedException constructor.
     *
     * @since 14.0.0
     *
     */
    public function __construct($action)
    {
    }
}
/**
 * Class AuthenticationFailedException
 *
 *
 * @since 14.0.0
 */
class AuthenticationFailedException extends \OCP\HintException
{
    /**
     * BadRequestException constructor.
     *
     * @since 14.0.0
     *
     */
    public function __construct()
    {
    }
}
/**
 * Class ProviderAlreadyExistsException
 *
 *
 * @since 14.0.0
 */
class ProviderAlreadyExistsException extends \OCP\HintException
{
    /**
     * ProviderAlreadyExistsException constructor.
     *
     * @since 14.0.0
     *
     * @param string $newProviderId cloud federation provider ID of the new provider
     * @param string $existingProviderName name of cloud federation provider which already use the same ID
     */
    public function __construct($newProviderId, $existingProviderName)
    {
    }
}
/**
 * Class ProviderCouldNotAddShareException
 *
 *
 * @since 14.0.0
 */
class ProviderCouldNotAddShareException extends \OCP\HintException
{
    /**
     * ProviderCouldNotAddShareException constructor.
     *
     * @since 14.0.0
     *
     * @param string $message
     * @param string $hint
     * @param int $code
     * @param \Exception|null $previous
     */
    public function __construct($message, $hint = '', $code = \OCP\AppFramework\Http::STATUS_BAD_REQUEST, \Exception $previous = null)
    {
    }
}
/**
 * Class ProviderDoesNotExistsException
 *
 *
 * @since 14.0.0
 */
class ProviderDoesNotExistsException extends \OCP\HintException
{
    /**
     * ProviderDoesNotExistsException constructor.
     *
     * @since 14.0.0
     *
     * @param string $providerId cloud federation provider ID
     */
    public function __construct($providerId)
    {
    }
}
/**
 * Class BadRequestException
 *
 *
 * @since 14.0.0
 */
class BadRequestException extends \OCP\HintException
{
    /**
     * BadRequestException constructor.
     *
     * @since 14.0.0
     *
     * @param array $missingParameters
     */
    public function __construct(array $missingParameters)
    {
    }
    /**
     * get array with the return message as defined in the OCM API
     *
     * @since 14.0.0
     *
     * @return array{message: string, validationErrors: array{message: string, name: string}[]}
     */
    public function getReturnMessage()
    {
    }
}
namespace OCP\Federation;

/**
 * Parsed federated cloud id
 *
 * @since 12.0.0
 */
interface ICloudId
{
    /**
     * The remote cloud id
     *
     * @return string
     * @since 12.0.0
     */
    public function getId() : string;
    /**
     * Get a clean representation of the cloud id for display
     *
     * @return string
     * @since 12.0.0
     */
    public function getDisplayId() : string;
    /**
     * The username on the remote server
     *
     * @return string
     * @since 12.0.0
     */
    public function getUser() : string;
    /**
     * The base address of the remote server
     *
     * @return string
     * @since 12.0.0
     */
    public function getRemote() : string;
}
/**
 * Interface ICloudFederationFactory
 *
 *
 * @since 14.0.0
 */
interface ICloudFederationFactory
{
    /**
     * get a CloudFederationShare Object to prepare a share you want to send
     *
     * @param string $shareWith
     * @param string $name resource name (e.g. document.odt)
     * @param string $description share description (optional)
     * @param string $providerId resource UID on the provider side
     * @param string $owner provider specific UID of the user who owns the resource
     * @param string $ownerDisplayName display name of the user who shared the item
     * @param string $sharedBy provider specific UID of the user who shared the resource
     * @param string $sharedByDisplayName display name of the user who shared the resource
     * @param string $sharedSecret used to authenticate requests across servers
     * @param string $shareType ('group' or 'user' share)
     * @param $resourceType ('file', 'calendar',...)
     * @return ICloudFederationShare
     *
     * @since 14.0.0
     */
    public function getCloudFederationShare($shareWith, $name, $description, $providerId, $owner, $ownerDisplayName, $sharedBy, $sharedByDisplayName, $sharedSecret, $shareType, $resourceType);
    /**
     * get a Cloud FederationNotification object to prepare a notification you
     * want to send
     *
     * @return ICloudFederationNotification
     *
     * @since 14.0.0
     */
    public function getCloudFederationNotification();
}
/**
 * Interface ICloudFederationNotification
 *
 *
 * @since 14.0.0
 */
interface ICloudFederationNotification
{
    /**
     * add a message to the notification
     *
     * @param string $notificationType (e.g. SHARE_ACCEPTED)
     * @param string $resourceType (e.g. file, calendar, contact,...)
     * @param $providerId id of the share
     * @param array $notification , payload of the notification
     *
     * @since 14.0.0
     */
    public function setMessage($notificationType, $resourceType, $providerId, array $notification);
    /**
     * get message, ready to send out
     *
     * @return array
     *
     * @since 14.0.0
     */
    public function getMessage();
}
/**
 * Class ICloudFederationProviderManager
 *
 * Manage cloud federation providers
 *
 * @since 14.0.0
 *
 */
interface ICloudFederationProviderManager
{
    /**
     * Registers an callback function which must return an cloud federation provider
     *
     * @param string $resourceType which resource type does the provider handles
     * @param string $displayName user facing name of the federated share provider
     * @param callable $callback
     * @throws Exceptions\ProviderAlreadyExistsException
     *
     * @since 14.0.0
     */
    public function addCloudFederationProvider($resourceType, $displayName, callable $callback);
    /**
     * remove cloud federation provider
     *
     * @param string $resourceType
     *
     * @since 14.0.0
     */
    public function removeCloudFederationProvider($resourceType);
    /**
     * get a list of all cloudFederationProviders
     *
     * @return array [resourceType => ['resourceType' => $resourceType, 'displayName' => $displayName, 'callback' => callback]]
     *
     * @since 14.0.0
     */
    public function getAllCloudFederationProviders();
    /**
     * get a specific cloud federation provider
     *
     * @param string $resourceType
     * @return ICloudFederationProvider
     * @throws Exceptions\ProviderDoesNotExistsException
     *
     * @since 14.0.0
     */
    public function getCloudFederationProvider($resourceType);
    /**
     * send federated share
     *
     * @param ICloudFederationShare $share
     * @return mixed
     *
     * @since 14.0.0
     */
    public function sendShare(\OCP\Federation\ICloudFederationShare $share);
    /**
     * send notification about existing share
     *
     * @param string $url
     * @param ICloudFederationNotification $notification
     * @return array|false
     *
     * @since 14.0.0
     */
    public function sendNotification($url, \OCP\Federation\ICloudFederationNotification $notification);
    /**
     * check if the new cloud federation API is ready to be used
     *
     * @return bool
     *
     * @since 14.0.0
     */
    public function isReady();
}
/**
 * Interface ICloudFederationShare
 *
 *
 * @since 14.0.0
 */
interface ICloudFederationShare
{
    /**
     * set uid of the recipient
     *
     * @param string $user
     *
     * @since 14.0.0
     */
    public function setShareWith($user);
    /**
     * set resource name (e.g. file, calendar, contact,...)
     *
     * @param string $name
     *
     * @since 14.0.0
     */
    public function setResourceName($name);
    /**
     * set resource type (e.g. file, calendar, contact,...)
     *
     * @param string $resourceType
     *
     * @since 14.0.0
     */
    public function setResourceType($resourceType);
    /**
     * set resource description (optional)
     *
     * @param string $description
     *
     * @since 14.0.0
     */
    public function setDescription($description);
    /**
     * set provider ID (e.g. file ID)
     *
     * @param string $providerId
     *
     * @since 14.0.0
     */
    public function setProviderId($providerId);
    /**
     * set owner UID
     *
     * @param string $owner
     *
     * @since 14.0.0
     */
    public function setOwner($owner);
    /**
     * set owner display name
     *
     * @param string $ownerDisplayName
     *
     * @since 14.0.0
     */
    public function setOwnerDisplayName($ownerDisplayName);
    /**
     * set UID of the user who sends the share
     *
     * @param string $sharedBy
     *
     * @since 14.0.0
     */
    public function setSharedBy($sharedBy);
    /**
     * set display name of the user who sends the share
     *
     * @param $sharedByDisplayName
     *
     * @since 14.0.0
     */
    public function setSharedByDisplayName($sharedByDisplayName);
    /**
     * set protocol specification
     *
     * @param array $protocol
     *
     * @since 14.0.0
     */
    public function setProtocol(array $protocol);
    /**
     * share type (group or user)
     *
     * @param string $shareType
     *
     * @since 14.0.0
     */
    public function setShareType($shareType);
    /**
     * get the whole share, ready to send out
     *
     * @return array
     *
     * @since 14.0.0
     */
    public function getShare();
    /**
     * get uid of the recipient
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getShareWith();
    /**
     * get resource name (e.g. file, calendar, contact,...)
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getResourceName();
    /**
     * get resource type (e.g. file, calendar, contact,...)
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getResourceType();
    /**
     * get resource description (optional)
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getDescription();
    /**
     * get provider ID (e.g. file ID)
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getProviderId();
    /**
     * get owner UID
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getOwner();
    /**
     * get owner display name
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getOwnerDisplayName();
    /**
     * get UID of the user who sends the share
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getSharedBy();
    /**
     * get display name of the user who sends the share
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getSharedByDisplayName();
    /**
     * get share type (group or user)
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getShareType();
    /**
     * get share Secret
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getShareSecret();
    /**
     * get protocol specification
     *
     * @return array
     *
     * @since 14.0.0
     */
    public function getProtocol();
}
/**
 * Interface for resolving federated cloud ids
 *
 * @since 12.0.0
 */
interface ICloudIdManager
{
    /**
     * @param string $cloudId
     * @return ICloudId
     * @throws \InvalidArgumentException
     *
     * @since 12.0.0
     */
    public function resolveCloudId(string $cloudId) : \OCP\Federation\ICloudId;
    /**
     * Get the cloud id for a remote user
     *
     * @param string $user
     * @param string|null $remote (optional since 23.0.0 for local users)
     * @return ICloudId
     *
     * @since 12.0.0
     */
    public function getCloudId(string $user, ?string $remote) : \OCP\Federation\ICloudId;
    /**
     * Check if the input is a correctly formatted cloud id
     *
     * @param string $cloudId
     * @return bool
     *
     * @since 12.0.0
     */
    public function isValidCloudId(string $cloudId) : bool;
    /**
     * remove scheme/protocol from an url
     *
     * @param string $url
     *
     * @return string
     * @since 28.0.0
     */
    public function removeProtocolFromUrl(string $url) : string;
}
/**
 * Interface ICloudFederationProvider
 *
 * Enable apps to create their own cloud federation provider
 *
 * @since 14.0.0
 *
 */
interface ICloudFederationProvider
{
    /**
     * get the name of the share type, handled by this provider
     *
     * @return string
     *
     * @since 14.0.0
     */
    public function getShareType();
    /**
     * share received from another server
     *
     * @param ICloudFederationShare $share
     * @return string provider specific unique ID of the share
     *
     * @throws ProviderCouldNotAddShareException
     *
     * @since 14.0.0
     */
    public function shareReceived(\OCP\Federation\ICloudFederationShare $share);
    /**
     * notification received from another server
     *
     * @param string $notificationType (e.g SHARE_ACCEPTED)
     * @param string $providerId share ID
     * @param array $notification provider specific notification
     * @return array $data send back to sender
     *
     * @throws ShareNotFound
     * @throws ActionNotSupportedException
     * @throws BadRequestException
     * @throws AuthenticationFailedException
     *
     * @since 14.0.0
     */
    public function notificationReceived($notificationType, $providerId, array $notification);
    /**
     * get the supported share types, e.g. "user", "group", etc.
     *
     * @return array
     *
     * @since 14.0.0
     */
    public function getSupportedShareTypes();
}
namespace OCP\Files;

/**
 * Exception for already existing files/folders
 * @since 6.0.0
 */
class AlreadyExistsException extends \Exception
{
}
namespace OCP\Files\AppData;

/**
 * A factory allows you to get the AppData folder for an application.
 *
 * @since 25.0.0
 */
interface IAppDataFactory
{
    /**
     * Get the AppData folder for the specified $appId
     * @param string $appId
     * @return IAppData
     * @since 25.0.0
     */
    public function get(string $appId) : \OCP\Files\IAppData;
}
namespace OCP\Files\Cache;

/**
 * @since 16.0.0
 */
interface ICacheEvent
{
    /**
     * @return IStorage
     * @since 16.0.0
     */
    public function getStorage() : \OCP\Files\Storage\IStorage;
    /**
     * @return string
     * @since 16.0.0
     */
    public function getPath() : string;
    /**
     * @param string $path
     * @since 19.0.0
     */
    public function setPath(string $path) : void;
    /**
     * @return int
     * @since 16.0.0
     */
    public function getFileId() : int;
    /**
     * @return int
     * @since 21.0.0
     */
    public function getStorageId() : int;
}
/**
 * @since 22.0.0
 */
class AbstractCacheEvent extends \OCP\EventDispatcher\Event implements \OCP\Files\Cache\ICacheEvent
{
    protected $storage;
    protected $path;
    protected $fileId;
    protected $storageId;
    /**
     * @param IStorage $storage
     * @param string $path
     * @param int $fileId
     * @since 22.0.0
     */
    public function __construct(\OCP\Files\Storage\IStorage $storage, string $path, int $fileId, int $storageId)
    {
    }
    /**
     * @return IStorage
     * @since 22.0.0
     */
    public function getStorage() : \OCP\Files\Storage\IStorage
    {
    }
    /**
     * @return string
     * @since 22.0.0
     */
    public function getPath() : string
    {
    }
    /**
     * @param string $path
     * @since 22.0.0
     */
    public function setPath(string $path) : void
    {
    }
    /**
     * @return int
     * @since 22.0.0
     */
    public function getFileId() : int
    {
    }
    /**
     * @return int
     * @since 22.0.0
     */
    public function getStorageId() : int
    {
    }
}
/**
 * Event for when an existing entry in the cache gets inserted
 *
 * @since 21.0.0
 */
class CacheEntryInsertedEvent extends \OCP\Files\Cache\AbstractCacheEvent implements \OCP\Files\Cache\ICacheEvent
{
}
/**
 * Event for when an existing entry in the cache gets removed
 *
 * @since 21.0.0
 */
class CacheEntryRemovedEvent extends \OCP\Files\Cache\AbstractCacheEvent implements \OCP\Files\Cache\ICacheEvent
{
}
/**
 * Event for when an existing entry in the cache gets updated
 *
 * @since 21.0.0
 */
class CacheEntryUpdatedEvent extends \OCP\Files\Cache\AbstractCacheEvent implements \OCP\Files\Cache\ICacheEvent
{
}
/**
 * Event for when a new entry gets added to the cache
 *
 * @since 16.0.0
 * @deprecated 21.0.0 use CacheEntryInsertedEvent instead
 */
class CacheInsertEvent extends \OCP\Files\Cache\CacheEntryInsertedEvent
{
}
/**
 * Event for when an existing entry in the cache gets updated
 *
 * @since 16.0.0
 * @deprecated 21.0.0 use CacheEntryUpdatedEvent instead
 */
class CacheUpdateEvent extends \OCP\Files\Cache\CacheEntryUpdatedEvent
{
}
/**
 * meta data for a file or folder
 *
 * @since 9.0.0
 *
 * This interface extends \ArrayAccess since v21.0.0, previous versions only
 * implemented it in the private implementation. Hence php would allow using the
 * object as array, while strictly speaking it didn't support this.
 */
interface ICacheEntry extends \ArrayAccess
{
    public const DIRECTORY_MIMETYPE = 'httpd/unix-directory';
    /**
     * Get the numeric id of a file
     *
     * @return int
     * @since 9.0.0
     */
    public function getId();
    /**
     * Get the numeric id for the storage
     *
     * @return int
     * @since 9.0.0
     */
    public function getStorageId();
    /**
     * Get the path of the file relative to the storage root
     *
     * @return string
     * @since 9.0.0
     */
    public function getPath();
    /**
     * Get the file name
     *
     * @return string
     * @since 9.0.0
     */
    public function getName();
    /**
     * Get the full mimetype
     *
     * @return string
     * @since 9.0.0
     */
    public function getMimeType();
    /**
     * Get the first part of the mimetype
     *
     * @return string
     * @since 9.0.0
     */
    public function getMimePart();
    /**
     * Get the file size in bytes
     *
     * @return int
     * @since 9.0.0
     */
    public function getSize();
    /**
     * Get the last modified date as unix timestamp
     *
     * @return int
     * @since 9.0.0
     */
    public function getMTime();
    /**
     * Get the last modified date on the storage as unix timestamp
     *
     * Note that when a file is updated we also update the mtime of all parent folders to make it visible to the user which folder has had updates most recently
     * This can differ from the mtime on the underlying storage which usually only changes when a direct child is added, removed or renamed
     *
     * @return int
     * @since 9.0.0
     */
    public function getStorageMTime();
    /**
     * Get the etag for the file
     *
     * An etag is used for change detection of files and folders, an etag of a file changes whenever the content of the file changes
     * Etag for folders change whenever a file in the folder has changed
     *
     * @return string
     * @since 9.0.0
     */
    public function getEtag();
    /**
     * Get the permissions for the file stored as bitwise combination of \OCP\PERMISSION_READ, \OCP\PERMISSION_CREATE
     * \OCP\PERMISSION_UPDATE, \OCP\PERMISSION_DELETE and \OCP\PERMISSION_SHARE
     *
     * @return int
     * @since 9.0.0
     */
    public function getPermissions();
    /**
     * Check if the file is encrypted
     *
     * @return bool
     * @since 9.0.0
     */
    public function isEncrypted();
    /**
     * Get the metadata etag for the file
     *
     * @return string | null
     * @since 18.0.0
     */
    public function getMetadataEtag() : ?string;
    /**
     * Get the last modified date as unix timestamp
     *
     * @return int | null
     * @since 18.0.0
     */
    public function getCreationTime() : ?int;
    /**
     * Get the last modified date as unix timestamp
     *
     * @return int | null
     * @since 18.0.0
     */
    public function getUploadTime() : ?int;
    /**
     * Get the unencrypted size
     *
     * This might be different from the result of getSize
     *
     * @return int
     * @since 25.0.0
     */
    public function getUnencryptedSize() : int;
}
/**
 * Propagate etags and mtimes within the storage
 *
 * @since 9.0.0
 */
interface IPropagator
{
    /**
     * Mark the beginning of a propagation batch
     *
     * Note that not all cache setups support propagation in which case this will be a noop
     *
     * Batching for cache setups that do support it has to be explicit since the cache state is not fully consistent
     * before the batch is committed.
     *
     * @since 9.1.0
     */
    public function beginBatch();
    /**
     * Commit the active propagation batch
     *
     * @since 9.1.0
     */
    public function commitBatch();
    /**
     * @param string $internalPath
     * @param int $time
     * @param int $sizeDifference
     * @since 9.0.0
     */
    public function propagateChange($internalPath, $time, $sizeDifference = 0);
}
/**
 * Scan files from the storage and save to the cache
 *
 * @since 9.0.0
 */
interface IScanner
{
    public const SCAN_RECURSIVE_INCOMPLETE = 2;
    // only recursive into not fully scanned folders
    public const SCAN_RECURSIVE = true;
    public const SCAN_SHALLOW = false;
    public const REUSE_NONE = 0;
    public const REUSE_ETAG = 1;
    public const REUSE_SIZE = 2;
    /**
     * scan a single file and store it in the cache
     *
     * @param string $file
     * @param int $reuseExisting
     * @param int $parentId
     * @param array | null $cacheData existing data in the cache for the file to be scanned
     * @param bool $lock set to false to disable getting an additional read lock during scanning
     * @return array | null an array of metadata of the scanned file
     * @throws \OC\ServerNotAvailableException
     * @throws \OCP\Lock\LockedException
     * @since 9.0.0
     */
    public function scanFile($file, $reuseExisting = 0, $parentId = -1, $cacheData = null, $lock = true);
    /**
     * scan a folder and all its children
     *
     * @param string $path
     * @param bool $recursive
     * @param int $reuse
     * @param bool $lock set to false to disable getting an additional read lock during scanning
     * @return array | null an array of the meta data of the scanned file or folder
     * @since 9.0.0
     */
    public function scan($path, $recursive = self::SCAN_RECURSIVE, $reuse = -1, $lock = true);
    /**
     * check if the file should be ignored when scanning
     * NOTE: files with a '.part' extension are ignored as well!
     *       prevents unfinished put requests to be scanned
     *
     * @param string $file
     * @return boolean
     * @since 9.0.0
     */
    public static function isPartialFile($file);
    /**
     * walk over any folders that are not fully scanned yet and scan them
     *
     * @since 9.0.0
     */
    public function backgroundScan();
}
/**
 * Update the cache and propagate changes
 *
 * @since 9.0.0
 */
interface IUpdater
{
    /**
     * Get the propagator for etags and mtime for the view the updater works on
     *
     * @return IPropagator
     * @since 9.0.0
     */
    public function getPropagator();
    /**
     * Propagate etag and mtime changes for the parent folders of $path up to the root of the filesystem
     *
     * @param string $path the path of the file to propagate the changes for
     * @param int|null $time the timestamp to set as mtime for the parent folders, if left out the current time is used
     * @since 9.0.0
     */
    public function propagate($path, $time = null);
    /**
     * Update the cache for $path and update the size, etag and mtime of the parent folders
     *
     * @param string $path
     * @param int $time
     * @since 9.0.0
     */
    public function update($path, $time = null);
    /**
     * Remove $path from the cache and update the size, etag and mtime of the parent folders
     *
     * @param string $path
     * @since 9.0.0
     */
    public function remove($path);
    /**
     * Rename a file or folder in the cache and update the size, etag and mtime of the parent folders
     *
     * @param IStorage $sourceStorage
     * @param string $source
     * @param string $target
     * @since 9.0.0
     */
    public function renameFromStorage(\OCP\Files\Storage\IStorage $sourceStorage, $source, $target);
}
/**
 * check the storage backends for updates and change the cache accordingly
 *
 * @since 9.0.0
 */
interface IWatcher
{
    public const CHECK_NEVER = 0;
    // never check the underlying filesystem for updates
    public const CHECK_ONCE = 1;
    // check the underlying filesystem for updates once every request for each file
    public const CHECK_ALWAYS = 2;
    // always check the underlying filesystem for updates
    /**
     * @param int $policy either IWatcher::CHECK_NEVER, IWatcher::CHECK_ONCE, IWatcher::CHECK_ALWAYS
     * @since 9.0.0
     */
    public function setPolicy($policy);
    /**
     * @return int either IWatcher::CHECK_NEVER, IWatcher::CHECK_ONCE, IWatcher::CHECK_ALWAYS
     * @since 9.0.0
     */
    public function getPolicy();
    /**
     * check $path for updates and update if needed
     *
     * @param string $path
     * @param ICacheEntry|null $cachedEntry
     * @return boolean true if path was updated
     * @since 9.0.0
     */
    public function checkUpdate($path, $cachedEntry = null);
    /**
     * Update the cache for changes to $path
     *
     * @param string $path
     * @param ICacheEntry $cachedData
     * @since 9.0.0
     */
    public function update($path, $cachedData);
    /**
     * Check if the cache for $path needs to be updated
     *
     * @param string $path
     * @param ICacheEntry $cachedData
     * @return bool
     * @since 9.0.0
     */
    public function needsUpdate($path, $cachedData);
    /**
     * remove deleted files in $path from the cache
     *
     * @param string $path
     * @since 9.0.0
     */
    public function cleanFolder($path);
}
/**
 * Metadata cache for a storage
 *
 * The cache stores the metadata for all files and folders in a storage and is kept up to date through the following mechanisms:
 *
 * - Scanner: scans the storage and updates the cache where needed
 * - Watcher: checks for changes made to the filesystem outside of the Nextcloud instance and rescans files and folder when a change is detected
 * - Updater: listens to changes made to the filesystem inside of the Nextcloud instance and updates the cache where needed
 * - ChangePropagator: updates the mtime and etags of parent folders whenever a change to the cache is made to the cache by the updater
 *
 * @since 9.0.0
 */
interface ICache
{
    public const NOT_FOUND = 0;
    public const PARTIAL = 1;
    //only partial data available, file not cached in the database
    public const SHALLOW = 2;
    //folder in cache, but not all child files are completely scanned
    public const COMPLETE = 3;
    /**
     * Get the numeric storage id for this cache's storage
     *
     * @return int
     * @since 9.0.0
     */
    public function getNumericStorageId();
    /**
     * get the stored metadata of a file or folder
     *
     * @param string | int $file either the path of a file or folder or the file id for a file or folder
     * @return ICacheEntry|false the cache entry or false if the file is not found in the cache
     * @since 9.0.0
     */
    public function get($file);
    /**
     * get the metadata of all files stored in $folder
     *
     * Only returns files one level deep, no recursion
     *
     * @param string $folder
     * @return ICacheEntry[]
     * @since 9.0.0
     */
    public function getFolderContents($folder);
    /**
     * get the metadata of all files stored in $folder
     *
     * Only returns files one level deep, no recursion
     *
     * @param int $fileId the file id of the folder
     * @return ICacheEntry[]
     * @since 9.0.0
     */
    public function getFolderContentsById($fileId);
    /**
     * store meta data for a file or folder
     * This will automatically call either insert or update depending on if the file exists
     *
     * @param string $file
     * @param array $data
     *
     * @return int file id
     * @throws \RuntimeException
     * @since 9.0.0
     */
    public function put($file, array $data);
    /**
     * insert meta data for a new file or folder
     *
     * @param string $file
     * @param array $data
     *
     * @return int file id
     * @throws \RuntimeException
     * @since 9.0.0
     */
    public function insert($file, array $data);
    /**
     * update the metadata of an existing file or folder in the cache
     *
     * @param int $id the fileid of the existing file or folder
     * @param array $data [$key => $value] the metadata to update, only the fields provided in the array will be updated, non-provided values will remain unchanged
     * @since 9.0.0
     */
    public function update($id, array $data);
    /**
     * get the file id for a file
     *
     * A file id is a numeric id for a file or folder that's unique within an Nextcloud instance which stays the same for the lifetime of a file
     *
     * File ids are easiest way for apps to store references to a file since unlike paths they are not affected by renames or sharing
     *
     * @param string $file
     * @return int
     * @since 9.0.0
     */
    public function getId($file);
    /**
     * get the id of the parent folder of a file
     *
     * @param string $file
     * @return int
     * @since 9.0.0
     */
    public function getParentId($file);
    /**
     * check if a file is available in the cache
     *
     * @param string $file
     * @return bool
     * @since 9.0.0
     */
    public function inCache($file);
    /**
     * remove a file or folder from the cache
     *
     * when removing a folder from the cache all files and folders inside the folder will be removed as well
     *
     * @param string $file
     * @since 9.0.0
     */
    public function remove($file);
    /**
     * Move a file or folder in the cache
     *
     * @param string $source
     * @param string $target
     * @since 9.0.0
     */
    public function move($source, $target);
    /**
     * Move a file or folder in the cache
     *
     * Note that this should make sure the entries are removed from the source cache
     *
     * @param \OCP\Files\Cache\ICache $sourceCache
     * @param string $sourcePath
     * @param string $targetPath
     * @throws \OC\DatabaseException
     * @since 9.0.0
     */
    public function moveFromCache(\OCP\Files\Cache\ICache $sourceCache, $sourcePath, $targetPath);
    /**
     * Copy a file or folder in the cache
     *
     * @param ICache $sourceCache
     * @param ICacheEntry $sourceEntry
     * @param string $targetPath
     * @return int fileid of copied entry
     * @since 22.0.0
     */
    public function copyFromCache(\OCP\Files\Cache\ICache $sourceCache, \OCP\Files\Cache\ICacheEntry $sourceEntry, string $targetPath) : int;
    /**
     * Get the scan status of a file
     *
     * - ICache::NOT_FOUND: File is not in the cache
     * - ICache::PARTIAL: File is not stored in the cache but some incomplete data is known
     * - ICache::SHALLOW: The folder and it's direct children are in the cache but not all sub folders are fully scanned
     * - ICache::COMPLETE: The file or folder, with all it's children) are fully scanned
     *
     * @param string $file
     *
     * @return int ICache::NOT_FOUND, ICache::PARTIAL, ICache::SHALLOW or ICache::COMPLETE
     * @since 9.0.0
     */
    public function getStatus($file);
    /**
     * search for files matching $pattern, files are matched if their filename matches the search pattern
     *
     * @param string $pattern the search pattern using SQL search syntax (e.g. '%searchstring%')
     * @return ICacheEntry[] an array of cache entries where the name matches the search pattern
     * @since 9.0.0
     * @deprecated 9.0.0 due to lack of pagination, not all backends might implement this
     */
    public function search($pattern);
    /**
     * search for files by mimetype
     *
     * @param string $mimetype either a full mimetype to search ('text/plain') or only the first part of a mimetype ('image')
     *        where it will search for all mimetypes in the group ('image/*')
     * @return ICacheEntry[] an array of cache entries where the mimetype matches the search
     * @since 9.0.0
     * @deprecated 9.0.0 due to lack of pagination, not all backends might implement this
     */
    public function searchByMime($mimetype);
    /**
     * Search for files with a flexible query
     *
     * @param ISearchQuery $query
     * @return ICacheEntry[]
     * @throw \InvalidArgumentException if the cache is unable to perform the query
     * @since 12.0.0
     */
    public function searchQuery(\OCP\Files\Search\ISearchQuery $query);
    /**
     * find a folder in the cache which has not been fully scanned
     *
     * If multiple incomplete folders are in the cache, the one with the highest id will be returned,
     * use the one with the highest id gives the best result with the background scanner, since that is most
     * likely the folder where we stopped scanning previously
     *
     * @return string|false the path of the folder or false when no folder matched
     * @since 9.0.0
     */
    public function getIncomplete();
    /**
     * get the path of a file on this storage by it's file id
     *
     * @param int $id the file id of the file or folder to search
     * @return string|null the path of the file (relative to the storage) or null if a file with the given id does not exists within this cache
     * @since 9.0.0
     */
    public function getPathById($id);
    /**
     * normalize the given path for usage in the cache
     *
     * @param string $path
     * @return string
     * @since 9.0.0
     */
    public function normalize($path);
    /**
     * Get the query expression required to filter files within this storage.
     *
     * In the most basic case this is just comparing the storage id
     * but storage wrappers can add additional expressions to filter down things further
     *
     * @return ISearchOperator
     * @since 22.0.0
     */
    public function getQueryFilterForStorage() : \OCP\Files\Search\ISearchOperator;
    /**
     * Construct a cache entry from a search result row *if* the entry belongs to this storage.
     *
     * This method will be called for every item in the search results, including results from different storages.
     * It's the responsibility of this method to return `null` for all results that don't belong to this storage.
     *
     * Additionally some implementations might need to further process the resulting entry such as modifying the path
     * or permissions of the result.
     *
     * @param ICacheEntry $rawEntry
     * @return ICacheEntry|null
     * @since 22.0.0
     */
    public function getCacheEntryFromSearchResult(\OCP\Files\Cache\ICacheEntry $rawEntry) : ?\OCP\Files\Cache\ICacheEntry;
}
namespace OCP\Files\Config;

/**
 * Holds information about a mount for a user
 *
 * @since 9.0.0
 */
interface ICachedMountInfo
{
    /**
     * @return IUser
     * @since 9.0.0
     */
    public function getUser() : \OCP\IUser;
    /**
     * @return int the numeric storage id of the mount
     * @since 9.0.0
     */
    public function getStorageId() : int;
    /**
     * @return int the fileid of the root of the mount
     * @since 9.0.0
     */
    public function getRootId() : int;
    /**
     * @return Node|null the root node of the mount
     * @since 9.0.0
     */
    public function getMountPointNode() : ?\OCP\Files\Node;
    /**
     * @return string the mount point of the mount for the user
     * @since 9.0.0
     */
    public function getMountPoint() : string;
    /**
     * Get the id of the configured mount
     *
     * @return int|null mount id or null if not applicable
     * @since 9.1.0
     */
    public function getMountId() : ?int;
    /**
     * Get the internal path (within the storage) of the root of the mount
     *
     * @return string
     * @since 11.0.0
     */
    public function getRootInternalPath() : string;
    /**
     * Get the class of the mount provider that this mount originates from
     *
     * @return string
     * @since 24.0.0
     */
    public function getMountProvider() : string;
}
/**
 * Holds information about a mount for a user
 *
 * @since 13.0.0
 */
interface ICachedMountFileInfo extends \OCP\Files\Config\ICachedMountInfo
{
    /**
     * Return the path for the file within the cached mount
     *
     * @return string
     * @since 13.0.0
     */
    public function getInternalPath() : string;
    /**
     * @return string
     * @since 13.0.0
     */
    public function getPath() : string;
}
/**
 * Provides
 *
 * @since 9.1.0
 */
interface IHomeMountProvider
{
    /**
     * Get all mountpoints applicable for the user
     *
     * @param \OCP\IUser $user
     * @param \OCP\Files\Storage\IStorageFactory $loader
     * @return \OCP\Files\Mount\IMountPoint|null
     * @since 9.1.0
     */
    public function getHomeMountForUser(\OCP\IUser $user, \OCP\Files\Storage\IStorageFactory $loader);
}
/**
 * Provides
 * @since 8.0.0
 */
interface IMountProvider
{
    /**
     * Get all mountpoints applicable for the user
     *
     * @param \OCP\IUser $user
     * @param \OCP\Files\Storage\IStorageFactory $loader
     * @return \OCP\Files\Mount\IMountPoint[]
     * @since 8.0.0
     */
    public function getMountsForUser(\OCP\IUser $user, \OCP\Files\Storage\IStorageFactory $loader);
}
/**
 * Manages the different mount providers
 * @since 8.0.0
 */
interface IMountProviderCollection
{
    /**
     * Get all configured mount points for the user
     *
     * @param \OCP\IUser $user
     * @return \OCP\Files\Mount\IMountPoint[]
     * @since 8.0.0
     */
    public function getMountsForUser(\OCP\IUser $user);
    /**
     * Get the configured mount points for the user from a specific mount provider
     *
     * @param \OCP\IUser $user
     * @param class-string<IMountProvider>[] $mountProviderClasses
     * @return \OCP\Files\Mount\IMountPoint[]
     * @since 24.0.0
     */
    public function getUserMountsForProviderClasses(\OCP\IUser $user, array $mountProviderClasses) : array;
    /**
     * Get the configured home mount for this user
     *
     * @param \OCP\IUser $user
     * @return \OCP\Files\Mount\IMountPoint
     * @since 9.1.0
     */
    public function getHomeMountForUser(\OCP\IUser $user);
    /**
     * Add a provider for mount points
     *
     * @param \OCP\Files\Config\IMountProvider $provider
     * @since 8.0.0
     */
    public function registerProvider(\OCP\Files\Config\IMountProvider $provider);
    /**
     * Add a filter for mounts
     *
     * @param callable $filter (IMountPoint $mountPoint, IUser $user) => boolean
     * @since 14.0.0
     */
    public function registerMountFilter(callable $filter);
    /**
     * Add a provider for home mount points
     *
     * @param \OCP\Files\Config\IHomeMountProvider $provider
     * @since 9.1.0
     */
    public function registerHomeProvider(\OCP\Files\Config\IHomeMountProvider $provider);
    /**
     * Get the mount cache which can be used to search for mounts without setting up the filesystem
     *
     * @return IUserMountCache
     * @since 9.0.0
     */
    public function getMountCache();
    /**
     * Get all root mountpoints
     *
     * @return \OCP\Files\Mount\IMountPoint[]
     * @since 20.0.0
     */
    public function getRootMounts() : array;
}
/**
 * @since 20.0.0
 */
interface IRootMountProvider
{
    /**
     * Get all root mountpoints of this provider
     *
     * @return \OCP\Files\Mount\IMountPoint[]
     * @since 20.0.0
     */
    public function getRootMounts(\OCP\Files\Storage\IStorageFactory $loader) : array;
}
/**
 * Cache mounts points per user in the cache so we can easily look them up
 *
 * @since 9.0.0
 */
interface IUserMountCache
{
    /**
     * Register mounts for a user to the cache
     *
     * @param IUser $user
     * @param IMountPoint[] $mounts
     * @param array|null $mountProviderClasses
     * @since 9.0.0
     */
    public function registerMounts(\OCP\IUser $user, array $mounts, array $mountProviderClasses = null);
    /**
     * Get all cached mounts for a user
     *
     * @param IUser $user
     * @return ICachedMountInfo[]
     * @since 9.0.0
     */
    public function getMountsForUser(\OCP\IUser $user);
    /**
     * Get all cached mounts by storage
     *
     * @param int $numericStorageId
     * @param string|null $user limit the results to a single user @since 12.0.0
     * @return ICachedMountInfo[]
     * @since 9.0.0
     */
    public function getMountsForStorageId($numericStorageId, $user = null);
    /**
     * Get all cached mounts by root
     *
     * @param int $rootFileId
     * @return ICachedMountInfo[]
     * @since 9.0.0
     */
    public function getMountsForRootId($rootFileId);
    /**
     * Get all cached mounts that contain a file
     *
     * @param int $fileId
     * @param string|null $user optionally restrict the results to a single user @since 12.0.0
     * @return ICachedMountFileInfo[]
     * @since 9.0.0
     */
    public function getMountsForFileId($fileId, $user = null);
    /**
     * Remove all cached mounts for a user
     *
     * @param IUser $user
     * @since 9.0.0
     */
    public function removeUserMounts(\OCP\IUser $user);
    /**
     * Remove all mounts for a user and storage
     *
     * @param $storageId
     * @param string $userId
     * @return mixed
     * @since 9.0.0
     */
    public function removeUserStorageMount($storageId, $userId);
    /**
     * Remove all cached mounts for a storage
     *
     * @param $storageId
     * @return mixed
     * @since 9.0.0
     */
    public function remoteStorageMounts($storageId);
    /**
     * Get the used space for users
     *
     * Note that this only includes the space in their home directory,
     * not any incoming shares or external storage.
     *
     * @param IUser[] $users
     * @return int[] [$userId => $userSpace]
     * @since 13.0.0
     */
    public function getUsedSpaceForUsers(array $users);
    /**
     * Clear all entries from the in-memory cache
     *
     * @since 20.0.0
     */
    public function clear() : void;
    /**
     * Get all cached mounts for a user
     *
     * @param IUser $user
     * @param string $path
     * @return ICachedMountInfo
     * @throws NotFoundException
     * @since 24.0.0
     */
    public function getMountForPath(\OCP\IUser $user, string $path) : \OCP\Files\Config\ICachedMountInfo;
    /**
     * Get all cached mounts for a user inside a path
     *
     * @param IUser $user
     * @param string $path
     * @return ICachedMountInfo[]
     * @throws NotFoundException
     * @since 24.0.0
     */
    public function getMountsInPath(\OCP\IUser $user, string $path) : array;
}
namespace OCP\Files;

/**
 * Exception for invalid path
 * @since 6.0.0
 */
class InvalidPathException extends \Exception
{
}
/**
 * Class EmptyFileNameException
 *
 * @since 9.2.0
 */
class EmptyFileNameException extends \OCP\Files\InvalidPathException
{
}
/**
 * Exception for too large entity
 * @since 6.0.0
 */
class EntityTooLargeException extends \Exception
{
}
namespace OCP\Files\Events;

/**
 * This event is triggered when a user tries to download a file
 * directly.
 *
 * @since 25.0.0
 */
class BeforeDirectFileDownloadEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 25.0.0
     */
    public function __construct(string $path)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getPath() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function isSuccessful() : bool
    {
    }
    /**
     * Set if the event was successful
     *
     * @since 25.0.0
     */
    public function setSuccessful(bool $successful) : void
    {
    }
    /**
     * Get the error message, if any
     * @since 25.0.0
     */
    public function getErrorMessage() : ?string
    {
    }
    /**
     * @since 25.0.0
     */
    public function setErrorMessage(string $errorMessage) : void
    {
    }
}
/**
 * @since 25.0.0
 */
class BeforeZipCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 25.0.0
     */
    public function __construct(string $directory, array $files)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getDirectory() : string
    {
    }
    /**
     * @since 25.0.0
     */
    public function getFiles() : array
    {
    }
    /**
     * @since 25.0.0
     */
    public function isSuccessful() : bool
    {
    }
    /**
     * Set if the event was successful
     *
     * @since 25.0.0
     */
    public function setSuccessful(bool $successful) : void
    {
    }
    /**
     * Get the error message, if any
     * @since 25.0.0
     */
    public function getErrorMessage() : ?string
    {
    }
    /**
     * @since 25.0.0
     */
    public function setErrorMessage(string $errorMessage) : void
    {
    }
}
/**
 * Used to notify the filesystem setup manager that the available mounts for a user have changed
 *
 * @since 24.0.0
 */
class InvalidateMountCacheEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser|null $user user
     *
     * @since 24.0.0
     */
    public function __construct(?\OCP\IUser $user)
    {
    }
    /**
     * @return IUser|null user
     *
     * @since 24.0.0
     */
    public function getUser() : ?\OCP\IUser
    {
    }
}
namespace OCP\Files\Events\Node;

/**
 * @since 20.0.0
 */
abstract class AbstractNodesEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 20.0.0
     */
    public function __construct(\OCP\Files\Node $source, \OCP\Files\Node $target)
    {
    }
    /**
     * @since 20.0.0
     */
    public function getSource() : \OCP\Files\Node
    {
    }
    /**
     * @since 20.0.0
     */
    public function getTarget() : \OCP\Files\Node
    {
    }
}
/**
 * @since 20.0.0
 */
class BeforeNodeCopiedEvent extends \OCP\Files\Events\Node\AbstractNodesEvent
{
}
/**
 * @since 20.0.0
 */
abstract class AbstractNodeEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 20.0.0
     */
    public function __construct(\OCP\Files\Node $node)
    {
    }
    /**
     * @since 20.0.0
     */
    public function getNode() : \OCP\Files\Node
    {
    }
}
/**
 * @since 20.0.0
 */
class BeforeNodeCreatedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class BeforeNodeDeletedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class BeforeNodeReadEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class BeforeNodeRenamedEvent extends \OCP\Files\Events\Node\AbstractNodesEvent
{
}
/**
 * @since 20.0.0
 */
class BeforeNodeTouchedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class BeforeNodeWrittenEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * Event fired after the filesystem has been torn down
 *
 * @since 24.0.0
 */
class FilesystemTornDownEvent extends \OCP\EventDispatcher\Event
{
}
/**
 * @since 20.0.0
 */
class NodeCopiedEvent extends \OCP\Files\Events\Node\AbstractNodesEvent
{
}
/**
 * @since 20.0.0
 */
class NodeCreatedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class NodeDeletedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class NodeRenamedEvent extends \OCP\Files\Events\Node\AbstractNodesEvent
{
}
/**
 * @since 20.0.0
 */
class NodeTouchedEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
/**
 * @since 20.0.0
 */
class NodeWrittenEvent extends \OCP\Files\Events\Node\AbstractNodeEvent
{
}
namespace OCP\Files\Events;

/**
 * @since 18.0.0
 */
class BeforeFileScannedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string $absolutePath
     *
     * @since 18.0.0
     */
    public function __construct(string $absolutePath)
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getAbsolutePath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeFolderScannedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string $absolutePath
     *
     * @since 18.0.0
     */
    public function __construct(string $absolutePath)
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getAbsolutePath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class FileCacheUpdated extends \OCP\EventDispatcher\Event
{
    /**
     * @param IStorage $storage
     * @param string $path
     * @since 18.0.0
     */
    public function __construct(\OCP\Files\Storage\IStorage $storage, string $path)
    {
    }
    /**
     * @return IStorage
     * @since 18.0.0
     */
    public function getStorage() : \OCP\Files\Storage\IStorage
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getPath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class FileScannedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string $absolutePath
     *
     * @since 18.0.0
     */
    public function __construct(string $absolutePath)
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getAbsolutePath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class FolderScannedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string $absolutePath
     *
     * @since 18.0.0
     */
    public function __construct(string $absolutePath)
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getAbsolutePath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class NodeAddedToCache extends \OCP\EventDispatcher\Event
{
    /**
     * @param IStorage $storage
     * @param string $path
     * @since 18.0.0
     */
    public function __construct(\OCP\Files\Storage\IStorage $storage, string $path)
    {
    }
    /**
     * @return IStorage
     * @since 18.0.0
     */
    public function getStorage() : \OCP\Files\Storage\IStorage
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getPath() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class NodeRemovedFromCache extends \OCP\EventDispatcher\Event
{
    /**
     * @param IStorage $storage
     * @param string $path
     * @since 18.0.0
     */
    public function __construct(\OCP\Files\Storage\IStorage $storage, string $path)
    {
    }
    /**
     * @return IStorage
     * @since 18.0.0
     */
    public function getStorage() : \OCP\Files\Storage\IStorage
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getPath() : string
    {
    }
}
namespace OCP\Files;

/**
 * Class FileNameTooLongException
 *
 * @since 8.1.0
 */
class FileNameTooLongException extends \OCP\Files\InvalidPathException
{
}
/**
 * Class GenericFileException
 *
 * @since 14.0.0
 */
class GenericFileException extends \Exception
{
}
namespace OCP\Files\SimpleFS;

/**
 * Interface ISimpleRoot
 *
 * @since 11.0.0
 */
interface ISimpleRoot
{
    /**
     * Get the folder with name $name
     *
     * @throws NotFoundException
     * @throws \RuntimeException
     * @since 11.0.0
     */
    public function getFolder(string $name) : \OCP\Files\SimpleFS\ISimpleFolder;
    /**
     * Get all the Folders
     *
     * @return ISimpleFolder[]
     * @throws NotFoundException
     * @throws \RuntimeException
     * @since 11.0.0
     */
    public function getDirectoryListing() : array;
    /**
     * Create a new folder named $name
     *
     * @throws NotPermittedException
     * @throws \RuntimeException
     * @since 11.0.0
     */
    public function newFolder(string $name) : \OCP\Files\SimpleFS\ISimpleFolder;
}
namespace OCP\Files;

/**
 * Interface IAppData
 *
 * @since 11.0.0
 */
interface IAppData extends \OCP\Files\SimpleFS\ISimpleRoot
{
}
namespace OCP\Files\Storage;

/**
 * Provide a common interface to all different storage options
 *
 * All paths passed to the storage are relative to the storage and should NOT have a leading slash.
 *
 * @since 9.0.0
 */
interface IStorage
{
    /**
     * $parameters is a free form array with the configuration options needed to construct the storage
     *
     * @param array $parameters
     * @since 9.0.0
     */
    public function __construct($parameters);
    /**
     * Get the identifier for the storage,
     * the returned id should be the same for every storage object that is created with the same parameters
     * and two storage objects with the same id should refer to two storages that display the same files.
     *
     * @return string
     * @since 9.0.0
     */
    public function getId();
    /**
     * see https://www.php.net/manual/en/function.mkdir.php
     * implementations need to implement a recursive mkdir
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function mkdir($path);
    /**
     * see https://www.php.net/manual/en/function.rmdir.php
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function rmdir($path);
    /**
     * see https://www.php.net/manual/en/function.opendir.php
     *
     * @param string $path
     * @return resource|false
     * @since 9.0.0
     */
    public function opendir($path);
    /**
     * see https://www.php.net/manual/en/function.is-dir.php
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function is_dir($path);
    /**
     * see https://www.php.net/manual/en/function.is-file.php
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function is_file($path);
    /**
     * see https://www.php.net/manual/en/function.stat.php
     * only the following keys are required in the result: size and mtime
     *
     * @param string $path
     * @return array|bool
     * @since 9.0.0
     */
    public function stat($path);
    /**
     * see https://www.php.net/manual/en/function.filetype.php
     *
     * @param string $path
     * @return string|bool
     * @since 9.0.0
     */
    public function filetype($path);
    /**
     * see https://www.php.net/manual/en/function.filesize.php
     * The result for filesize when called on a folder is required to be 0
     *
     * @param string $path
     * @return false|int|float
     * @since 9.0.0
     */
    public function filesize($path);
    /**
     * check if a file can be created in $path
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function isCreatable($path);
    /**
     * check if a file can be read
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function isReadable($path);
    /**
     * check if a file can be written to
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function isUpdatable($path);
    /**
     * check if a file can be deleted
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function isDeletable($path);
    /**
     * check if a file can be shared
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function isSharable($path);
    /**
     * get the full permissions of a path.
     * Should return a combination of the PERMISSION_ constants defined in lib/public/constants.php
     *
     * @param string $path
     * @return int
     * @since 9.0.0
     */
    public function getPermissions($path);
    /**
     * see https://www.php.net/manual/en/function.file_exists.php
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function file_exists($path);
    /**
     * see https://www.php.net/manual/en/function.filemtime.php
     *
     * @param string $path
     * @return int|bool
     * @since 9.0.0
     */
    public function filemtime($path);
    /**
     * see https://www.php.net/manual/en/function.file_get_contents.php
     *
     * @param string $path
     * @return string|false
     * @since 9.0.0
     */
    public function file_get_contents($path);
    /**
     * see https://www.php.net/manual/en/function.file_put_contents.php
     *
     * @param string $path
     * @param mixed $data
     * @return int|float|false
     * @since 9.0.0
     */
    public function file_put_contents($path, $data);
    /**
     * see https://www.php.net/manual/en/function.unlink.php
     *
     * @param string $path
     * @return bool
     * @since 9.0.0
     */
    public function unlink($path);
    /**
     * see https://www.php.net/manual/en/function.rename.php
     *
     * @param string $source
     * @param string $target
     * @return bool
     * @since 9.0.0
     */
    public function rename($source, $target);
    /**
     * see https://www.php.net/manual/en/function.copy.php
     *
     * @param string $source
     * @param string $target
     * @return bool
     * @since 9.0.0
     */
    public function copy($source, $target);
    /**
     * see https://www.php.net/manual/en/function.fopen.php
     *
     * @param string $path
     * @param string $mode
     * @return resource|bool
     * @since 9.0.0
     */
    public function fopen($path, $mode);
    /**
     * get the mimetype for a file or folder
     * The mimetype for a folder is required to be "httpd/unix-directory"
     *
     * @param string $path
     * @return string|bool
     * @since 9.0.0
     */
    public function getMimeType($path);
    /**
     * see https://www.php.net/manual/en/function.hash-file.php
     *
     * @param string $type
     * @param string $path
     * @param bool $raw
     * @return string|bool
     * @since 9.0.0
     */
    public function hash($type, $path, $raw = false);
    /**
     * see https://www.php.net/manual/en/function.free_space.php
     *
     * @param string $path
     * @return int|float|bool
     * @since 9.0.0
     */
    public function free_space($path);
    /**
     * see https://www.php.net/manual/en/function.touch.php
     * If the backend does not support the operation, false should be returned
     *
     * @param string $path
     * @param int $mtime
     * @return bool
     * @since 9.0.0
     */
    public function touch($path, $mtime = null);
    /**
     * get the path to a local version of the file.
     * The local version of the file can be temporary and doesn't have to be persistent across requests
     *
     * @param string $path
     * @return string|false
     * @since 9.0.0
     */
    public function getLocalFile($path);
    /**
     * check if a file or folder has been updated since $time
     *
     * @param string $path
     * @param int $time
     * @return bool
     * @since 9.0.0
     *
     * hasUpdated for folders should return at least true if a file inside the folder is add, removed or renamed.
     * returning true for other changes in the folder is optional
     */
    public function hasUpdated($path, $time);
    /**
     * get the ETag for a file or folder
     *
     * @param string $path
     * @return string|false
     * @since 9.0.0
     */
    public function getETag($path);
    /**
     * Returns whether the storage is local, which means that files
     * are stored on the local filesystem instead of remotely.
     * Calling getLocalFile() for local storages should always
     * return the local files, whereas for non-local storages
     * it might return a temporary file.
     *
     * @return bool true if the files are stored locally, false otherwise
     * @since 9.0.0
     */
    public function isLocal();
    /**
     * Check if the storage is an instance of $class or is a wrapper for a storage that is an instance of $class
     *
     * @template T of IStorage
     * @param string $class
     * @psalm-param class-string<T> $class
     * @return bool
     * @since 9.0.0
     * @psalm-assert-if-true T $this
     */
    public function instanceOfStorage($class);
    /**
     * A custom storage implementation can return an url for direct download of a give file.
     *
     * For now the returned array can hold the parameter url - in future more attributes might follow.
     *
     * @param string $path
     * @return array|bool
     * @since 9.0.0
     */
    public function getDirectDownload($path);
    /**
     * @param string $path the path of the target folder
     * @param string $fileName the name of the file itself
     * @return void
     * @throws InvalidPathException
     * @since 9.0.0
     */
    public function verifyPath($path, $fileName);
    /**
     * @param IStorage $sourceStorage
     * @param string $sourceInternalPath
     * @param string $targetInternalPath
     * @return bool
     * @since 9.0.0
     */
    public function copyFromStorage(\OCP\Files\Storage\IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath);
    /**
     * @param IStorage $sourceStorage
     * @param string $sourceInternalPath
     * @param string $targetInternalPath
     * @return bool
     * @since 9.0.0
     */
    public function moveFromStorage(\OCP\Files\Storage\IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath);
    /**
     * Test a storage for availability
     *
     * @since 9.0.0
     * @return bool
     */
    public function test();
    /**
     * @since 9.0.0
     * @return array [ available, last_checked ]
     */
    public function getAvailability();
    /**
     * @since 9.0.0
     * @param bool $isAvailable
     */
    public function setAvailability($isAvailable);
    /**
     * @param string $path path for which to retrieve the owner
     * @since 9.0.0
     */
    public function getOwner($path);
    /**
     * @param string $path
     * @param IStorage|null $storage
     * @return ICache
     * @since 9.0.0
     */
    public function getCache($path = '', $storage = null);
    /**
     * @return IPropagator
     * @since 9.0.0
     */
    public function getPropagator();
    /**
     * @return IScanner
     * @since 9.0.0
     */
    public function getScanner();
    /**
     * @return IUpdater
     * @since 9.0.0
     */
    public function getUpdater();
    /**
     * @return IWatcher
     * @since 9.0.0
     */
    public function getWatcher();
}
namespace OCP\Files;

/**
 * Interface IHomeStorage
 *
 * @since 7.0.0
 */
interface IHomeStorage extends \OCP\Files\Storage\IStorage
{
}
/**
 * Exception for invalid path
 * @since 8.1.0
 */
class InvalidCharacterInPathException extends \OCP\Files\InvalidPathException
{
}
/**
 * Exception for invalid content
 * @since 6.0.0
 */
class InvalidContentException extends \Exception
{
}
/**
 * Class InvalidDirectoryException
 *
 * @since 9.2.0
 */
class InvalidDirectoryException extends \OCP\Files\InvalidPathException
{
}
namespace OCP\Files\Lock;

/**
 * Structure to identify a specific lock context to request or
 * describe a lock with the affected node and ownership information
 *
 * This is used to match a lock/unlock request or file operation to existing locks
 *
 * @since 24.0.0
 */
final class LockContext
{
    /**
     * @param Node $node Node that is owned by the lock
     * @param int $type Type of the lock owner
     * @param string $owner Unique identifier for the lock owner based on the type
     * @since 24.0.0
     */
    public function __construct(\OCP\Files\Node $node, int $type, string $owner)
    {
    }
    /**
     * @since 24.0.0
     */
    public function getNode() : \OCP\Files\Node
    {
    }
    /**
     * @return int
     * @since 24.0.0
     */
    public function getType() : int
    {
    }
    /**
     * @return string user id / app id / lock token depending on the type
     * @since 24.0.0
     */
    public function getOwner() : string
    {
    }
    /**
     * @since 24.0.0
     */
    public function __toString() : string
    {
    }
}
/**
 * @since 24.0.0
 */
class NoLockProviderException extends \Exception
{
}
namespace OCP\Lock;

/**
 * Class LockedException
 *
 * @since 8.1.0
 */
class LockedException extends \Exception
{
    /**
     * LockedException constructor.
     *
     * @param string $path locked path
     * @param \Exception|null $previous previous exception for cascading
     * @param string $existingLock since 14.0.0
     * @param string $readablePath since 20.0.0
     * @since 8.1.0
     */
    public function __construct(string $path, \Exception $previous = null, string $existingLock = null, string $readablePath = null)
    {
    }
    /**
     * @return string
     * @since 8.1.0
     */
    public function getPath() : string
    {
    }
    /**
     * @return string
     * @since 19.0.0
     */
    public function getExistingLock() : ?string
    {
    }
}
namespace OCP\Files\Lock;

/**
 * @since 24.0.0
 */
class OwnerLockedException extends \OCP\Lock\LockedException
{
    /**
     * @since 24.0.0
     */
    public function __construct(\OCP\Files\Lock\ILock $lock)
    {
    }
    /**
     * @since 24.0.0
     */
    public function getLock() : \OCP\Files\Lock\ILock
    {
    }
}
/**
 * @since 24.0.0
 */
interface ILock
{
    /**
     * User owned manual lock
     *
     * This lock type is initiated by a user manually through the web UI or clients
     * and will limit editing capabilities on the file to the lock owning user.
     *
     * @since 24.0.0
     */
    public const TYPE_USER = 0;
    /**
     * App owned lock
     *
     * This lock type is created by collaborative apps like Text or Office to avoid
     * outside changes through WevDAV or other apps.
     * @since 24.0.0
     *
     */
    public const TYPE_APP = 1;
    /**
     * Token owned lock
     *
     * This lock type will bind the ownership to the provided lock token. Any request
     * that aims to modify the file will be required to sent the token, the user
     * itself is not able to write to files without the token. This will allow
     * to limit the locking to an individual client.
     *
     * @since 24.0.0
     */
    public const TYPE_TOKEN = 2;
    /**
     * WebDAV Lock scope exclusive
     *
     * @since 24.0.0
     */
    public const LOCK_EXCLUSIVE = 1;
    /**
     * WebDAV Lock scope shared
     *
     * @since 24.0.0
     */
    public const LOCK_SHARED = 2;
    /**
     * Lock only the resource the lock is applied to
     *
     * @since 24.0.0
     */
    public const LOCK_DEPTH_ZERO = 0;
    /**
     * Lock app resources under the locked one with infinite depth
     *
     * @since 24.0.0
     */
    public const LOCK_DEPTH_INFINITE = -1;
    /**
     * Type of the lock
     *
     * @psalm-return ILock::TYPE_*
     * @since 24.0.0
     */
    public function getType() : int;
    /**
     * Owner that holds the lock
     *
     * Depending on the lock type this is:
     * - ILock::TYPE_USER: A user id
     * - ILock::TYPE_APP: An app id
     * - ILock::TYPE_TOKEN: A user id
     *
     * @since 24.0.0
     */
    public function getOwner() : string;
    /**
     * File id that the lock is holding
     *
     * @since 24.0.0
     */
    public function getFileId() : int;
    /**
     * Timeout of the lock in seconds starting from the created at time
     *
     * @since 24.0.0
     */
    public function getTimeout() : int;
    /**
     * Unix timestamp of the lock creation time
     *
     * @since 24.0.0
     */
    public function getCreatedAt() : int;
    /**
     * Token string as a unique identifier for the lock, usually a UUID
     *
     * @since 24.0.0
     */
    public function getToken() : string;
    /**
     * Lock depth to apply the lock to child resources
     *
     * @since 24.0.0
     */
    public function getDepth() : int;
    /**
     * WebDAV lock scope
     *
     * @since 24.0.0
     * @psalm-return ILock::LOCK_EXCLUSIVE|ILock::LOCK_SHARED
     */
    public function getScope() : int;
    /**
     * String representation of the lock to identify it through logging
     *
     * @since 24.0.0
     */
    public function __toString() : string;
}
/**
 * @since 24.0.0
 */
interface ILockProvider
{
    /**
     * @throws PreConditionNotMetException
     * @throws NoLockProviderException
     * @psalm-return list<ILock>
     * @since 24.0.0
     */
    public function getLocks(int $fileId) : array;
    /**
     * @throws PreConditionNotMetException
     * @throws OwnerLockedException
     * @throws NoLockProviderException
     * @since 24.0.0
     */
    public function lock(\OCP\Files\Lock\LockContext $lockInfo) : \OCP\Files\Lock\ILock;
    /**
     * @throws PreConditionNotMetException
     * @throws NoLockProviderException
     * @since 24.0.0
     */
    public function unlock(\OCP\Files\Lock\LockContext $lockInfo) : void;
}
/**
 * Manage app integrations with files_lock with collaborative editors
 *
 * The OCP parts are mainly for exposing the ability to lock/unlock for apps and
 * to give the files_lock app a way to register and then be triggered by the apps
 * while the actual locking implementation is kept in the LockProvider and DAV
 * plugin from files_lock app.
 *
 * @since 24.0.0
 */
interface ILockManager extends \OCP\Files\Lock\ILockProvider
{
    /**
     * @throws PreConditionNotMetException if there is already a lock provider registered
     * @since 24.0.0
     */
    public function registerLockProvider(\OCP\Files\Lock\ILockProvider $lockProvider) : void;
    /**
     * @return bool
     * @since 24.0.0
     */
    public function isLockProviderAvailable() : bool;
    /**
     * Run within the scope of a given lock condition
     *
     * The callback will also be executed if no lock provider is present
     *
     * @since 24.0.0
     */
    public function runInScope(\OCP\Files\Lock\LockContext $lock, callable $callback) : void;
    /**
     * @throws NoLockProviderException if there is no lock provider available
     * @since 24.0.0
     */
    public function getLockInScope() : ?\OCP\Files\Lock\LockContext;
}
namespace OCP\Files;

/**
 * Exception for a file that is locked
 * @since 7.0.0
 */
class LockNotAcquiredException extends \Exception
{
    /** @var string $path The path that could not be locked */
    public $path;
    /** @var integer $lockType The type of the lock that was attempted */
    public $lockType;
    /**
     * @since 7.0.0
     */
    public function __construct($path, $lockType, $code = 0, \Exception $previous = null)
    {
    }
    /**
     * custom string representation of object
     *
     * @return string
     * @since 7.0.0
     */
    public function __toString()
    {
    }
}
namespace OCP\Files\Mount;

/**
 * A storage mounted to folder on the filesystem
 * @since 8.0.0
 */
interface IMountPoint
{
    /**
     * get complete path to the mount point
     *
     * @return string
     * @since 8.0.0
     */
    public function getMountPoint();
    /**
     * Set the mountpoint
     *
     * @param string $mountPoint new mount point
     * @since 8.0.0
     */
    public function setMountPoint($mountPoint);
    /**
     * Get the storage that is mounted
     *
     * @return \OCP\Files\Storage\IStorage|null
     * @since 8.0.0
     */
    public function getStorage();
    /**
     * Get the id of the storages
     *
     * @return string|null
     * @since 8.0.0
     */
    public function getStorageId();
    /**
     * Get the id of the storages
     *
     * @return int|null
     * @since 9.1.0
     */
    public function getNumericStorageId();
    /**
     * Get the path relative to the mountpoint
     *
     * @param string $path absolute path to a file or folder
     * @return string
     * @since 8.0.0
     */
    public function getInternalPath($path);
    /**
     * Apply a storage wrapper to the mounted storage
     *
     * @param callable $wrapper
     * @since 8.0.0
     */
    public function wrapStorage($wrapper);
    /**
     * Get a mount option
     *
     * @param string $name Name of the mount option to get
     * @param mixed $default Default value for the mount option
     * @return mixed
     * @since 8.0.0
     */
    public function getOption($name, $default);
    /**
     * Get all options for the mount
     *
     * @return array
     * @since 8.1.0
     */
    public function getOptions();
    /**
     * Get the file id of the root of the storage
     *
     * @return int
     * @since 9.1.0
     */
    public function getStorageRootId();
    /**
     * Get the id of the configured mount
     *
     * @return int|null mount id or null if not applicable
     * @since 9.1.0
     */
    public function getMountId();
    /**
     * Get the type of mount point, used to distinguish things like shares and external storage
     * in the web interface
     *
     * @return string
     * @since 12.0.0
     */
    public function getMountType();
    /**
     * Get the class of the mount provider that this mount originates from
     *
     * @return string
     * @since 24.0.0
     */
    public function getMountProvider() : string;
}
/**
 * Mark a mountpoint as containing system data, meaning that the data is not user specific
 *
 * Example use case is signaling to the encryption wrapper that system-wide keys should be used for a mountpoint
 *
 * @since 25.0.0
 */
interface ISystemMountPoint extends \OCP\Files\Mount\IMountPoint
{
}
/**
 * Interface IMountManager
 *
 * Manages all mounted storages in the system
 * @since 8.2.0
 */
interface IMountManager
{
    /**
     * Add a new mount
     *
     * @param IMountPoint $mount
     * @since 8.2.0
     */
    public function addMount(\OCP\Files\Mount\IMountPoint $mount);
    /**
     * Remove a mount
     *
     * @param string $mountPoint
     * @since 8.2.0
     */
    public function removeMount(string $mountPoint);
    /**
     * Change the location of a mount
     *
     * @param string $mountPoint
     * @param string $target
     * @since 8.2.0
     */
    public function moveMount(string $mountPoint, string $target);
    /**
     * Find the mount for $path
     *
     * @param string $path
     * @return IMountPoint
     * @since 8.2.0
     */
    public function find(string $path) : ?\OCP\Files\Mount\IMountPoint;
    /**
     * Find all mounts in $path
     *
     * @param string $path
     * @return IMountPoint[]
     * @since 8.2.0
     */
    public function findIn(string $path) : array;
    /**
     * Remove all registered mounts
     *
     * @since 8.2.0
     */
    public function clear();
    /**
     * Find mounts by storage id
     *
     * @param string $id
     * @return IMountPoint[]
     * @since 8.2.0
     */
    public function findByStorageId(string $id) : array;
    /**
     * @return IMountPoint[]
     * @since 8.2.0
     */
    public function getAll() : array;
    /**
     * Find mounts by numeric storage id
     *
     * @param int $id
     * @return IMountPoint[]
     * @since 8.2.0
     */
    public function findByNumericId(int $id) : array;
}
namespace OCP\Files;

/**
 * Exception for not enough space
 * @since 6.0.0
 */
class NotEnoughSpaceException extends \Exception
{
}
/**
 * Exception for not found entity
 * @since 6.0.0
 */
class NotFoundException extends \Exception
{
}
/**
 * Exception for not permitted action
 * @since 6.0.0
 */
class NotPermittedException extends \Exception
{
}
namespace OCP\Files\Notify;

/**
 * Represents a detected change in the storage
 *
 * @since 12.0.0
 */
interface IChange
{
    public const ADDED = 1;
    public const REMOVED = 2;
    public const MODIFIED = 3;
    public const RENAMED = 4;
    /**
     * Get the type of the change
     *
     * @return int IChange::ADDED, IChange::REMOVED, IChange::MODIFIED or IChange::RENAMED
     *
     * @since 12.0.0
     */
    public function getType();
    /**
     * Get the path of the file that was changed relative to the root of the storage
     *
     * Note, for rename changes this path is the old path for the file
     *
     * @return mixed
     *
     * @since 12.0.0
     */
    public function getPath();
}
/**
 * Provides access to detected changes in the storage by either actively listening
 * or getting the list of changes that happened in the background
 *
 * @since 12.0.0
 */
interface INotifyHandler
{
    /**
     * Start listening for update notifications
     *
     * The provided callback will be called for every incoming notification with the following parameters
     *  - IChange|IRenameChange $change
     *
     * Note that this call is blocking and will not exit on it's own, to stop listening for notifications return `false` from the callback
     *
     * @param callable $callback
     *
     * @since 12.0.0
     */
    public function listen(callable $callback);
    /**
     * Get all changes detected since the start of the notify process or the last call to getChanges
     *
     * @return IChange[]
     *
     * @since 12.0.0
     */
    public function getChanges();
    /**
     * Stop listening for changes
     *
     * Note that any pending changes will be discarded
     *
     * @since 12.0.0
     */
    public function stop();
}
/**
 * Represents a detected rename change
 *
 * @since 12.0.0
 */
interface IRenameChange extends \OCP\Files\Notify\IChange
{
    /**
     * Get the new path of the renamed file relative to the storage root
     *
     * @return string
     *
     * @since 12.0.0
     */
    public function getTargetPath();
}
namespace OCP\Files\ObjectStore;

/**
 * Interface IObjectStore
 *
 * @since 7.0.0
 */
interface IObjectStore
{
    /**
     * @return string the container or bucket name where objects are stored
     * @since 7.0.0
     */
    public function getStorageId();
    /**
     * @param string $urn the unified resource name used to identify the object
     * @return resource stream with the read data
     * @throws \Exception when something goes wrong, message will be logged
     * @throws NotFoundException if file does not exist
     * @since 7.0.0
     */
    public function readObject($urn);
    /**
     * @param string $urn the unified resource name used to identify the object
     * @param resource $stream stream with the data to write
     * @param string|null $mimetype the mimetype to set for the remove object @since 22.0.0
     * @throws \Exception when something goes wrong, message will be logged
     * @since 7.0.0
     */
    public function writeObject($urn, $stream, string $mimetype = null);
    /**
     * @param string $urn the unified resource name used to identify the object
     * @return void
     * @throws \Exception when something goes wrong, message will be logged
     * @since 7.0.0
     */
    public function deleteObject($urn);
    /**
     * Check if an object exists in the object store
     *
     * @param string $urn
     * @return bool
     * @since 16.0.0
     */
    public function objectExists($urn);
    /**
     * @param string $from the unified resource name used to identify the source object
     * @param string $to the unified resource name used to identify the target object
     * @return void
     * @since 21.0.0
     */
    public function copyObject($from, $to);
}
/**
 * @since 26.0.0
 */
interface IObjectStoreMultiPartUpload
{
    /**
     * @since 26.0.0
     */
    public function initiateMultipartUpload(string $urn) : string;
    /**
     * @since 26.0.0
     */
    public function uploadMultipartPart(string $urn, string $uploadId, int $partId, $stream, $size) : \Aws\Result;
    /**
     * @since 26.0.0
     */
    public function completeMultipartUpload(string $urn, string $uploadId, array $result) : int;
    /**
     * @since 26.0.0
     */
    public function abortMultipartUpload(string $urn, string $uploadId) : void;
    /**
     * @since 26.0.0
     */
    public function getMultipartUploads(string $urn, string $uploadId) : array;
}
namespace OCP\Files;

/**
 * Exception for invalid path
 * @since 8.1.0
 */
class ReservedWordException extends \OCP\Files\InvalidPathException
{
}
namespace OCP\Files\Search;

/**
 * @since 12.0.0
 */
interface ISearchOperator
{
    /**
     * Get a query builder hint by name
     *
     * @param string $name
     * @param $default
     * @return mixed
     * @since 23.0.0
     */
    public function getQueryHint(string $name, $default);
    /**
     * Get a query builder hint
     *
     * @param string $name
     * @param $value
     * @since 23.0.0
     */
    public function setQueryHint(string $name, $value) : void;
}
/**
 * @since 12.0.0
 */
interface ISearchBinaryOperator extends \OCP\Files\Search\ISearchOperator
{
    public const OPERATOR_AND = 'and';
    public const OPERATOR_OR = 'or';
    public const OPERATOR_NOT = 'not';
    /**
     * The type of binary operator
     *
     * One of the ISearchBinaryOperator::OPERATOR_* constants
     *
     * @return string
     * @since 12.0.0
     */
    public function getType();
    /**
     * The arguments for the binary operator
     *
     * One argument for the 'not' operator and two for 'and' and 'or'
     *
     * @return ISearchOperator[]
     * @since 12.0.0
     */
    public function getArguments();
}
/**
 * @since 12.0.0
 */
interface ISearchComparison extends \OCP\Files\Search\ISearchOperator
{
    public const COMPARE_EQUAL = 'eq';
    public const COMPARE_GREATER_THAN = 'gt';
    public const COMPARE_GREATER_THAN_EQUAL = 'gte';
    public const COMPARE_LESS_THAN = 'lt';
    public const COMPARE_LESS_THAN_EQUAL = 'lte';
    public const COMPARE_LIKE = 'like';
    public const COMPARE_LIKE_CASE_SENSITIVE = 'clike';
    public const HINT_PATH_EQ_HASH = 'path_eq_hash';
    // transform `path = "$path"` into `path_hash = md5("$path")`, on by default
    /**
     * Get the type of comparison, one of the ISearchComparison::COMPARE_* constants
     *
     * @return string
     * @since 12.0.0
     */
    public function getType();
    /**
     * Get the name of the field to compare with
     *
     * i.e. 'size', 'name' or 'mimetype'
     *
     * @return string
     * @since 12.0.0
     */
    public function getField();
    /**
     * Get the value to compare the field with
     *
     * @return string|integer|\DateTime
     * @since 12.0.0
     */
    public function getValue();
}
/**
 * @since 12.0.0
 */
interface ISearchOrder
{
    public const DIRECTION_ASCENDING = 'asc';
    public const DIRECTION_DESCENDING = 'desc';
    /**
     * The direction to sort in, either ISearchOrder::DIRECTION_ASCENDING or ISearchOrder::DIRECTION_DESCENDING
     *
     * @return string
     * @since 12.0.0
     */
    public function getDirection();
    /**
     * The field to sort on
     *
     * @return string
     * @since 12.0.0
     */
    public function getField();
    /**
     * Apply the sorting on 2 FileInfo objects
     *
     * @param FileInfo $a
     * @param FileInfo $b
     * @return int -1 if $a < $b, 0 if $a = $b, 1 if $a > $b (for ascending, reverse for descending)
     * @since 22.0.0
     */
    public function sortFileInfo(\OCP\Files\FileInfo $a, \OCP\Files\FileInfo $b) : int;
}
/**
 * @since 12.0.0
 */
interface ISearchQuery
{
    /**
     * @return ISearchOperator
     * @since 12.0.0
     */
    public function getSearchOperation();
    /**
     * Get the maximum number of results to return
     *
     * @return integer
     * @since 12.0.0
     */
    public function getLimit();
    /**
     * Get the offset for returned results
     *
     * @return integer
     * @since 12.0.0
     */
    public function getOffset();
    /**
     * The fields and directions to order by
     *
     * @return ISearchOrder[]
     * @since 12.0.0
     */
    public function getOrder();
    /**
     * The user that issued the search
     *
     * @return ?IUser
     * @since 12.0.0
     */
    public function getUser();
    /**
     * Whether or not the search should be limited to the users home storage
     *
     * @return bool
     * @since 18.0.0
     */
    public function limitToHome() : bool;
}
namespace OCP\Files\SimpleFS;

/**
 * Interface ISimpleFolder
 *
 * @since 11.0.0
 */
interface ISimpleFolder
{
    /**
     * Get all the files in a folder
     *
     * @return ISimpleFile[]
     * @since 11.0.0
     */
    public function getDirectoryListing() : array;
    /**
     * Check if a file with $name exists
     *
     * @param string $name
     * @return bool
     * @since 11.0.0
     */
    public function fileExists(string $name) : bool;
    /**
     * Get the file named $name from the folder
     *
     * @throws NotFoundException
     * @since 11.0.0
     */
    public function getFile(string $name) : \OCP\Files\SimpleFS\ISimpleFile;
    /**
     * Creates a new file with $name in the folder
     *
     * @param string|resource|null $content @since 19.0.0
     * @throws NotPermittedException
     * @since 11.0.0
     */
    public function newFile(string $name, $content = null) : \OCP\Files\SimpleFS\ISimpleFile;
    /**
     * Remove the folder and all the files in it
     *
     * @throws NotPermittedException
     * @since 11.0.0
     */
    public function delete() : void;
    /**
     * Get the folder name
     *
     * @since 11.0.0
     */
    public function getName() : string;
    /**
     * Get the folder named $name from the current folder
     *
     * @throws NotFoundException
     * @since 25.0.0
     */
    public function getFolder(string $name) : \OCP\Files\SimpleFS\ISimpleFolder;
    /**
     * Creates a new folder with $name in the current folder
     *
     * @param string|resource|null $content @since 19.0.0
     * @throws NotPermittedException
     * @since 25.0.0
     */
    public function newFolder(string $path) : \OCP\Files\SimpleFS\ISimpleFolder;
}
/**
 * This interface allows to manage simple files.
 *
 * This interface must not be implemented in your application but
 * instead should be used as a service and injected in your code with
 * dependency injection.
 *
 * @since 11.0.0
 */
interface ISimpleFile
{
    /**
     * Get the name
     *
     * @since 11.0.0
     */
    public function getName() : string;
    /**
     * Get the size in bytes
     *
     * @since 11.0.0
     */
    public function getSize() : int|float;
    /**
     * Get the ETag
     *
     * @since 11.0.0
     */
    public function getETag() : string;
    /**
     * Get the last modification time
     *
     * @since 11.0.0
     */
    public function getMTime() : int;
    /**
     * Get the content
     *
     * @throws NotPermittedException
     * @throws NotFoundException
     * @since 11.0.0
     */
    public function getContent() : string;
    /**
     * Overwrite the file
     *
     * @param string|resource $data
     * @throws NotPermittedException
     * @throws NotFoundException
     * @since 11.0.0
     */
    public function putContent($data) : void;
    /**
     * Delete the file
     *
     * @throws NotPermittedException
     * @since 11.0.0
     */
    public function delete() : void;
    /**
     * Get the MimeType
     *
     * @since 11.0.0
     */
    public function getMimeType() : string;
    /**
     * @since 24.0.0
     */
    public function getExtension() : string;
    /**
     * Open the file as stream for reading, resulting resource can be operated as stream like the result from php's own fopen
     *
     * @return resource|false
     * @throws \OCP\Files\NotPermittedException
     * @since 14.0.0
     */
    public function read();
    /**
     * Open the file as stream for writing, resulting resource can be operated as stream like the result from php's own fopen
     *
     * @return resource|bool
     * @throws \OCP\Files\NotPermittedException
     * @since 14.0.0
     */
    public function write();
}
/**
 * This class represents a file that is only hold in memory.
 *
 * @since 16.0.0
 */
class InMemoryFile implements \OCP\Files\SimpleFS\ISimpleFile
{
    /**
     * InMemoryFile constructor.
     *
     * @param string $name The file name
     * @param string $contents The file contents
     * @since 16.0.0
     */
    public function __construct(string $name, string $contents)
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getName() : string
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getSize() : int|float
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getETag() : string
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getMTime() : int
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getContent() : string
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function putContent($data) : void
    {
    }
    /**
     * In memory files can't be deleted.
     *
     * @since 16.0.0
     */
    public function delete() : void
    {
    }
    /**
     * @inheritdoc
     * @since 16.0.0
     */
    public function getMimeType() : string
    {
    }
    /**
     * {@inheritDoc}
     * @since 24.0.0
     */
    public function getExtension() : string
    {
    }
    /**
     * Stream reading is unsupported for in memory files.
     *
     * @throws NotPermittedException
     * @since 16.0.0
     */
    public function read()
    {
    }
    /**
     * Stream writing isn't available for in memory files.
     *
     * @throws NotPermittedException
     * @since 16.0.0
     */
    public function write()
    {
    }
}
namespace OCP\Files\Storage;

/**
 * Marks that a storage does not support server side encryption
 *
 * @since 16.0.0
 */
interface IDisableEncryptionStorage extends \OCP\Files\Storage\IStorage
{
}
/**
 * Storage backends that require explicit locking
 *
 * Storage backends implementing this interface do not need to implement their own locking implementation but should use the provided lockingprovider instead
 * The implementation of the locking methods only need to map internal storage paths to "lock keys"
 *
 * @since 9.0.0
 */
interface ILockingStorage
{
    /**
     * @param string $path The path of the file to acquire the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 9.0.0
     */
    public function acquireLock($path, $type, \OCP\Lock\ILockingProvider $provider);
    /**
     * @param string $path The path of the file to acquire the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 9.0.0
     */
    public function releaseLock($path, $type, \OCP\Lock\ILockingProvider $provider);
    /**
     * @param string $path The path of the file to change the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 9.0.0
     */
    public function changeLock($path, $type, \OCP\Lock\ILockingProvider $provider);
}
/**
 * Storage backend that support active notifications
 *
 * @since 9.1.0
 */
interface INotifyStorage
{
    public const NOTIFY_ADDED = 1;
    public const NOTIFY_REMOVED = 2;
    public const NOTIFY_MODIFIED = 3;
    public const NOTIFY_RENAMED = 4;
    /**
     * Start the notification handler for this storage
     *
     * @param $path
     * @return INotifyHandler
     *
     * @since 12.0.0
     */
    public function notify($path);
}
/**
 * Marks a storage as providing reliable etags according to expected behavior of etags within nextcloud:
 *
 * - Etag are stable as long as no changes are made to the files
 * - Changes inside a folder cause etag changes of the parent folders
 *
 * @since 24.0.0
 */
interface IReliableEtagStorage extends \OCP\Files\Storage\IStorage
{
}
/**
 * Creates storage instances and manages and applies storage wrappers
 * @since 8.0.0
 */
interface IStorageFactory
{
    /**
     * allow modifier storage behaviour by adding wrappers around storages
     *
     * $callback should be a function of type (string $mountPoint, Storage $storage) => Storage
     *
     * @param string $wrapperName
     * @param callable $callback
     * @return bool true if the wrapper was added, false if there was already a wrapper with this
     * name registered
     * @since 8.0.0
     */
    public function addStorageWrapper($wrapperName, $callback);
    /**
     * @param \OCP\Files\Mount\IMountPoint $mountPoint
     * @param string $class
     * @param array $arguments
     * @return \OCP\Files\Storage
     * @since 8.0.0
     */
    public function getInstance(\OCP\Files\Mount\IMountPoint $mountPoint, $class, $arguments);
}
/**
 * Interface that adds the ability to write a stream directly to file
 *
 * @since 15.0.0
 */
interface IWriteStreamStorage extends \OCP\Files\Storage\IStorage
{
    /**
     * Write the data from a stream to a file
     *
     * @param string $path
     * @param resource $stream
     * @param int|null $size the size of the stream if known in advance
     * @return int the number of bytes written
     * @throws GenericFileException
     * @since 15.0.0
     */
    public function writeStream(string $path, $stream, int $size = null) : int;
}
/**
 * @since 26.0.0
 */
interface IChunkedFileWrite extends \OCP\Files\Storage\IStorage
{
    /**
     * @param string $targetPath Relative target path in the storage
     * @return string writeToken to be used with the other methods to uniquely identify the file write operation
     * @throws GenericFileException
     * @since 26.0.0
     */
    public function startChunkedWrite(string $targetPath) : string;
    /**
     * @param string $targetPath
     * @param string $writeToken
     * @param string $chunkId
     * @param resource $data
     * @param int|null $size
     * @throws GenericFileException
     * @since 26.0.0
     */
    public function putChunkedWritePart(string $targetPath, string $writeToken, string $chunkId, $data, int $size = null) : ?array;
    /**
     * @param string $targetPath
     * @param string $writeToken
     * @return int
     * @throws GenericFileException
     * @since 26.0.0
     */
    public function completeChunkedWrite(string $targetPath, string $writeToken) : int;
    /**
     * @param string $targetPath
     * @param string $writeToken
     * @throws GenericFileException
     * @since 26.0.0
     */
    public function cancelChunkedWrite(string $targetPath, string $writeToken) : void;
}
namespace OCP\Files;

/**
 * Storage has invalid configuration
 * @since 7.0.0
 */
class StorageInvalidException extends \Exception
{
}
/**
 * Storage is temporarily not available
 * @since 6.0.0 - since 8.2.1 based on HintException
 */
class StorageNotAvailableException extends \OCP\HintException
{
    public const STATUS_SUCCESS = 0;
    public const STATUS_ERROR = 1;
    public const STATUS_INDETERMINATE = 2;
    public const STATUS_INCOMPLETE_CONF = 3;
    public const STATUS_UNAUTHORIZED = 4;
    public const STATUS_TIMEOUT = 5;
    public const STATUS_NETWORK_ERROR = 6;
    /**
     * StorageNotAvailableException constructor.
     *
     * @param string $message
     * @param int $code
     * @param \Exception|null $previous
     * @since 6.0.0
     */
    public function __construct($message = '', $code = self::STATUS_ERROR, \Exception $previous = null)
    {
    }
    /**
     * Get the name for a status code
     *
     * @param int $code
     * @return string
     * @since 9.0.0
     */
    public static function getStateCodeName($code)
    {
    }
}
namespace OCP\Files\Template;

/**
 * @since 21.0.0
 */
class FileCreatedFromTemplateEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param File|null $template
     * @param File $target
     * @since 21.0.0
     */
    public function __construct(?\OCP\Files\File $template, \OCP\Files\File $target)
    {
    }
    /**
     * @return File|null
     * @since 21.0.0
     */
    public function getTemplate() : ?\OCP\Files\File
    {
    }
    /**
     * @return File
     * @since 21.0.0
     */
    public function getTarget() : \OCP\Files\File
    {
    }
}
/**
 * @since 21.0.0
 */
interface ICustomTemplateProvider
{
    /**
     * Return a list of additional templates that the template provider is offering
     *
     * @return File[]
     * @since 21.0.0
     */
    public function getCustomTemplates(string $mimetype) : array;
    /**
     * Return the file for a given template id
     *
     * @param string $template identifier of the template
     * @return File
     * @since 21.0.0
     */
    public function getCustomTemplate(string $template) : \OCP\Files\File;
}
/**
 * @since 21.0.0
 */
interface ITemplateManager
{
    /**
     * Register a template type support
     *
     * @param callable(): TemplateFileCreator $callback A callback which returns the TemplateFileCreator instance to register
     * @since 21.0.0
     */
    public function registerTemplateFileCreator(callable $callback) : void;
    /**
     * Get a list of available file creators
     *
     * @return array
     * @since 21.0.0
     */
    public function listCreators() : array;
    /**
     * Get a list of available file creators and their offered templates
     *
     * @return array
     * @since 21.0.0
     */
    public function listTemplates() : array;
    /**
     * @return bool
     * @since 21.0.0
     */
    public function hasTemplateDirectory() : bool;
    /**
     * @param string $path
     * @return void
     * @since 21.0.0
     */
    public function setTemplatePath(string $path) : void;
    /**
     * @return string
     * @since 21.0.0
     */
    public function getTemplatePath() : string;
    /**
     * @param string|null $path
     * @param string|null $userId
     * @since 21.0.0
     */
    public function initializeTemplateDirectory(string $path = null, string $userId = null, $copyTemplates = true) : string;
    /**
     * @param string $filePath
     * @param string $templateId
     * @return array
     * @throws GenericFileException
     * @since 21.0.0
     */
    public function createFromTemplate(string $filePath, string $templateId = '', string $templateType = 'user') : array;
}
/**
 * @since 21.0.0
 */
final class Template implements \JsonSerializable
{
    /**
     * @since 21.0.0
     */
    public function __construct(string $templateType, string $templateId, \OCP\Files\File $file)
    {
    }
    /**
     * @since 21.0.0
     */
    public function setCustomPreviewUrl(string $previewUrl) : void
    {
    }
    /**
     * @since 21.0.0
     */
    public function setHasPreview(bool $hasPreview) : void
    {
    }
    /**
     * @since 21.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * @since 21.0.0
 */
final class TemplateFileCreator implements \JsonSerializable
{
    /**
     * @since 21.0.0
     */
    public function __construct(string $appId, string $actionName, string $fileExtension)
    {
    }
    /**
     * @since 21.0.0
     */
    public function getAppId() : string
    {
    }
    /**
     * @since 21.0.0
     */
    public function setIconClass(string $iconClass) : \OCP\Files\Template\TemplateFileCreator
    {
    }
    /**
     * @since 21.0.0
     */
    public function addMimetype(string $mimetype) : \OCP\Files\Template\TemplateFileCreator
    {
    }
    /**
     * @since 21.0.0
     */
    public function getMimetypes() : array
    {
    }
    /**
     * @since 21.0.0
     */
    public function setRatio(float $ratio) : \OCP\Files\Template\TemplateFileCreator
    {
    }
    /**
     * @param int $order order in which the create action shall be listed
     * @since 21.0.0
     */
    public function setOrder(int $order) : \OCP\Files\Template\TemplateFileCreator
    {
    }
    /**
     * @since 21.0.0
     */
    public function getOrder() : int
    {
    }
    /**
     * @since 27.0.0
     */
    public function setActionLabel(string $actionLabel) : \OCP\Files\Template\TemplateFileCreator
    {
    }
    /**
     * @since 27.0.0
     */
    public function getActionLabel() : string
    {
    }
    /**
     * @since 21.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
namespace OCP\Files;

/**
 * Exception for seek problem
 * @since 9.1.0
 */
class UnseekableException extends \Exception
{
}
/**
 * Class ForbiddenException
 *
 * @since 9.0.0
 */
class ForbiddenException extends \Exception
{
    /**
     * @param string $message
     * @param bool $retry
     * @param \Exception|null $previous previous exception for cascading
     * @since 9.0.0
     */
    public function __construct($message, $retry, \Exception $previous = null)
    {
    }
    /**
     * @return bool
     * @since 9.0.0
     */
    public function getRetry()
    {
    }
}
/**
 * Interface IMimeTypeDetector
 * @since 8.2.0
 *
 * Interface to handle mimetypes (detection and icon retrieval)
 **/
interface IMimeTypeDetector
{
    /**
     * detect mimetype only based on filename, content of file is not used
     * @param string $path
     * @return string
     * @since 8.2.0
     */
    public function detectPath($path);
    /**
     * detect mimetype only based on the content of file
     * @param string $path
     * @return string
     * @since 18.0.0
     */
    public function detectContent(string $path) : string;
    /**
     * detect mimetype based on both filename and content
     *
     * @param string $path
     * @return string
     * @since 8.2.0
     */
    public function detect($path);
    /**
     * Get a secure mimetype that won't expose potential XSS.
     *
     * @param string $mimeType
     * @return string
     * @since 8.2.0
     */
    public function getSecureMimeType($mimeType);
    /**
     * detect mimetype based on the content of a string
     *
     * @param string $data
     * @return string
     * @since 8.2.0
     */
    public function detectString($data);
    /**
     * Get path to the icon of a file type
     * @param string $mimeType the MIME type
     * @return string the url
     * @since 8.2.0
     */
    public function mimeTypeIcon($mimeType);
}
/**
 * Interface IMimeTypeLoader
 * @since 8.2.0
 *
 * Interface to load mimetypes
 **/
interface IMimeTypeLoader
{
    /**
     * Get a mimetype from its ID
     *
     * @param int $id
     * @return string|null
     * @since 8.2.0
     */
    public function getMimetypeById($id);
    /**
     * Get a mimetype ID, adding the mimetype to the DB if it does not exist
     *
     * @param string $mimetype
     * @return int
     * @since 8.2.0
     */
    public function getId($mimetype);
    /**
     * Test if a mimetype exists in the database
     *
     * @param string $mimetype
     * @return bool
     * @since 8.2.0
     */
    public function exists($mimetype);
    /**
     * Clear all loaded mimetypes, allow for re-loading
     *
     * @since 8.2.0
     */
    public function reset();
}
/**
 * Interface FileInfo
 *
 * @since 7.0.0
 */
interface FileInfo
{
    /**
     * @since 7.0.0
     */
    public const TYPE_FILE = 'file';
    /**
     * @since 7.0.0
     */
    public const TYPE_FOLDER = 'dir';
    /**
     * @const \OCP\Files\FileInfo::SPACE_NOT_COMPUTED Return value for a not computed space value
     * @since 8.0.0
     */
    public const SPACE_NOT_COMPUTED = -1;
    /**
     * @const \OCP\Files\FileInfo::SPACE_UNKNOWN Return value for unknown space value
     * @since 8.0.0
     */
    public const SPACE_UNKNOWN = -2;
    /**
     * @const \OCP\Files\FileInfo::SPACE_UNLIMITED Return value for unlimited space
     * @since 8.0.0
     */
    public const SPACE_UNLIMITED = -3;
    /**
     * @since 9.1.0
     */
    public const MIMETYPE_FOLDER = 'httpd/unix-directory';
    /**
     * @const \OCP\Files\FileInfo::BLACKLIST_FILES_REGEX Return regular expression to test filenames against (blacklisting)
     * @since 12.0.0
     */
    public const BLACKLIST_FILES_REGEX = '\\.(part|filepart)$';
    /**
     * Get the Etag of the file or folder
     *
     * @return string
     * @since 7.0.0
     */
    public function getEtag();
    /**
     * Get the size in bytes for the file or folder
     *
     * @param bool $includeMounts whether or not to include the size of any sub mounts, since 16.0.0
     * @return int|float
     * @since 7.0.0
     */
    public function getSize($includeMounts = true);
    /**
     * Get the last modified date as timestamp for the file or folder
     *
     * @return int
     * @since 7.0.0
     */
    public function getMtime();
    /**
     * Get the name of the file or folder
     *
     * @return string
     * @since 7.0.0
     */
    public function getName();
    /**
     * Get the path relative to the storage
     *
     * @return string
     * @since 7.0.0
     */
    public function getInternalPath();
    /**
     * Get the absolute path
     *
     * @return string
     * @since 7.0.0
     */
    public function getPath();
    /**
     * Get the full mimetype of the file or folder i.e. 'image/png'
     *
     * @return string
     * @since 7.0.0
     */
    public function getMimetype();
    /**
     * Get the first part of the mimetype of the file or folder i.e. 'image'
     *
     * @return string
     * @since 7.0.0
     */
    public function getMimePart();
    /**
     * Get the storage the file or folder is storage on
     *
     * @return IStorage
     * @since 7.0.0
     */
    public function getStorage();
    /**
     * Get the file id of the file or folder
     *
     * @return int|null
     * @since 7.0.0
     */
    public function getId();
    /**
     * Check whether the file is encrypted
     *
     * @return bool
     * @since 7.0.0
     */
    public function isEncrypted();
    /**
     * Get the permissions of the file or folder as bitmasked combination of the following constants
     * \OCP\Constants::PERMISSION_CREATE
     * \OCP\Constants::PERMISSION_READ
     * \OCP\Constants::PERMISSION_UPDATE
     * \OCP\Constants::PERMISSION_DELETE
     * \OCP\Constants::PERMISSION_SHARE
     * \OCP\Constants::PERMISSION_ALL
     *
     * @return int
     * @since 7.0.0 - namespace of constants has changed in 8.0.0
     */
    public function getPermissions();
    /**
     * Check whether this is a file or a folder
     *
     * @return string \OCP\Files\FileInfo::TYPE_FILE|\OCP\Files\FileInfo::TYPE_FOLDER
     * @since 7.0.0
     */
    public function getType();
    /**
     * Check if the file or folder is readable
     *
     * @return bool
     * @since 7.0.0
     */
    public function isReadable();
    /**
     * Check if a file is writable
     *
     * @return bool
     * @since 7.0.0
     */
    public function isUpdateable();
    /**
     * Check whether new files or folders can be created inside this folder
     *
     * @return bool
     * @since 8.0.0
     */
    public function isCreatable();
    /**
     * Check if a file or folder can be deleted
     *
     * @return bool
     * @since 7.0.0
     */
    public function isDeletable();
    /**
     * Check if a file or folder can be shared
     *
     * @return bool
     * @since 7.0.0
     */
    public function isShareable();
    /**
     * Check if a file or folder is shared
     *
     * @return bool
     * @since 7.0.0
     */
    public function isShared();
    /**
     * Check if a file or folder is mounted
     *
     * @return bool
     * @since 7.0.0
     */
    public function isMounted();
    /**
     * Get the mountpoint the file belongs to
     *
     * @return \OCP\Files\Mount\IMountPoint
     * @since 8.0.0
     */
    public function getMountPoint();
    /**
     * Get the owner of the file
     *
     * @return ?\OCP\IUser
     * @since 9.0.0
     */
    public function getOwner();
    /**
     * Get the stored checksum(s) for this file
     *
     * Checksums are stored in the format TYPE:CHECKSUM, here may be multiple checksums separated by a single space
     * e.g. MD5:d3b07384d113edec49eaa6238ad5ff00 SHA1:f1d2d2f924e986ac86fdf7b36c94bcdf32beec15
     *
     * @return string
     * @since 9.0.0
     */
    public function getChecksum();
    /**
     * Get the extension of the file
     *
     * @return string
     * @since 15.0.0
     */
    public function getExtension() : string;
    /**
     * Get the creation date as unix timestamp
     *
     * If the creation time is not known, 0 will be returned
     *
     * creation time is not set automatically by the server and is generally only available
     * for files uploaded by the sync clients
     *
     * @return int
     * @since 18.0.0
     */
    public function getCreationTime() : int;
    /**
     * Get the upload date as unix timestamp
     *
     * If the upload time is not known, 0 will be returned
     *
     * Upload time will be set automatically by the server for files uploaded over DAV
     * files created by Nextcloud apps generally do not have an the upload time set
     *
     * @return int
     * @since 18.0.0
     */
    public function getUploadTime() : int;
}
/**
 * Interface Node
 *
 * @since 6.0.0 - extends FileInfo was added in 8.0.0
 */
interface Node extends \OCP\Files\FileInfo
{
    /**
     * Move the file or folder to a new location
     *
     * @param string $targetPath the absolute target path
     * @return Node
     * @throws NotFoundException
     * @throws NotPermittedException if move not allowed or failed
     * @throws LockedException
     * @throws InvalidPathException
     * @since 6.0.0
     */
    public function move($targetPath);
    /**
     * Delete the file or folder
     *
     * @return void
     * @throws NotPermittedException
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function delete();
    /**
     * Copy the file or folder to a new location
     *
     * @param string $targetPath the absolute target path
     * @return Node
     * @since 6.0.0
     */
    public function copy($targetPath);
    /**
     * Change the modified date of the file or folder
     * If $mtime is omitted the current time will be used
     *
     * @param int $mtime (optional) modified date as unix timestamp
     * @throws InvalidPathException
     * @throws NotFoundException
     * @throws NotPermittedException
     * @return void
     * @since 6.0.0
     */
    public function touch($mtime = null);
    /**
     * Get the storage backend the file or folder is stored on
     *
     * @return IStorage
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function getStorage();
    /**
     * Get the full path of the file or folder
     *
     * @return string
     * @since 6.0.0
     */
    public function getPath();
    /**
     * Get the path of the file or folder relative to the mountpoint of it's storage
     *
     * @return string
     * @since 6.0.0
     */
    public function getInternalPath();
    /**
     * Get the internal file id for the file or folder
     *
     * @return int
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function getId();
    /**
     * Get metadata of the file or folder
     * The returned array contains the following values:
     *  - mtime
     *  - size
     *
     * @return array
     * @since 6.0.0
     */
    public function stat();
    /**
     * Get the modified date of the file or folder as unix timestamp
     *
     * @return int
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function getMTime();
    /**
     * Get the size of the file or folder in bytes
     *
     * @param bool $includeMounts
     * @return int|float
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function getSize($includeMounts = true);
    /**
     * Get the Etag of the file or folder
     * The Etag is an string id used to detect changes to a file or folder,
     * every time the file or folder is changed the Etag will change to
     *
     * @return string
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function getEtag();
    /**
     * Get the permissions of the file or folder as a combination of one or more of the following constants:
     *  - \OCP\Constants::PERMISSION_READ
     *  - \OCP\Constants::PERMISSION_UPDATE
     *  - \OCP\Constants::PERMISSION_CREATE
     *  - \OCP\Constants::PERMISSION_DELETE
     *  - \OCP\Constants::PERMISSION_SHARE
     *
     * @return int
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0 - namespace of constants has changed in 8.0.0
     */
    public function getPermissions();
    /**
     * Check if the file or folder is readable
     *
     * @return bool
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function isReadable();
    /**
     * Check if the file or folder is writable
     *
     * @return bool
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function isUpdateable();
    /**
     * Check if the file or folder is deletable
     *
     * @return bool
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function isDeletable();
    /**
     * Check if the file or folder is shareable
     *
     * @return bool
     * @throws InvalidPathException
     * @throws NotFoundException
     * @since 6.0.0
     */
    public function isShareable();
    /**
     * Get the parent folder of the file or folder
     *
     * @return Folder
     * @since 6.0.0
     */
    public function getParent();
    /**
     * Get the filename of the file or folder
     *
     * @return string
     * @since 6.0.0
     */
    public function getName();
    /**
     * Acquire a lock on this file or folder.
     *
     * A shared (read) lock will prevent any exclusive (write) locks from being created but any number of shared locks
     * can be active at the same time.
     * An exclusive lock will prevent any other lock from being created (both shared and exclusive).
     *
     * A locked exception will be thrown if any conflicting lock already exists
     *
     * Note that this uses mandatory locking, if you acquire an exclusive lock on a file it will block *all*
     * other operations for that file, even within the same php process.
     *
     * Acquiring any lock on a file will also create a shared lock on all parent folders of that file.
     *
     * Note that in most cases you won't need to manually manage the locks for any files you're working with,
     * any filesystem operation will automatically acquire the relevant locks for that operation.
     *
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @throws LockedException
     * @since 9.1.0
     */
    public function lock($type);
    /**
     * Check the type of an existing lock.
     *
     * A shared lock can be changed to an exclusive lock is there is exactly one shared lock on the file,
     * an exclusive lock can always be changed to a shared lock since there can only be one exclusive lock int he first place.
     *
     * A locked exception will be thrown when these preconditions are not met.
     * Note that this is also the case if no existing lock exists for the file.
     *
     * @param int $targetType \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @throws LockedException
     * @since 9.1.0
     */
    public function changeLock($targetType);
    /**
     * Release an existing lock.
     *
     * This will also free up the shared locks on any parent folder that were automatically acquired when locking the file.
     *
     * Note that this method will not give any sort of error when trying to free a lock that doesn't exist.
     *
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @throws LockedException
     * @since 9.1.0
     */
    public function unlock($type);
}
/**
 * Storage authentication exception
 * @since 9.0.0
 */
class StorageAuthException extends \OCP\Files\StorageNotAvailableException
{
    /**
     * StorageAuthException constructor.
     *
     * @param string $message
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Storage has bad or missing config params
 * @since 9.0.0
 */
class StorageBadConfigException extends \OCP\Files\StorageNotAvailableException
{
    /**
     * ExtStorageBadConfigException constructor.
     *
     * @param string $message
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Storage authentication exception
 * @since 9.0.0
 */
class StorageConnectionException extends \OCP\Files\StorageNotAvailableException
{
    /**
     * StorageConnectionException constructor.
     *
     * @param string $message
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Storage authentication exception
 * @since 9.0.0
 */
class StorageTimeoutException extends \OCP\Files\StorageNotAvailableException
{
    /**
     * StorageTimeoutException constructor.
     *
     * @param string $message
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', \Exception $previous = null)
    {
    }
}
/**
 * Interface File
 *
 * @since 6.0.0
 */
interface File extends \OCP\Files\Node
{
    /**
     * Get the content of the file as string
     *
     * @return string
     * @throws NotPermittedException
     * @throws GenericFileException
     * @throws LockedException
     * @since 6.0.0
     */
    public function getContent();
    /**
     * Write to the file from string data
     *
     * @param string|resource $data
     * @throws NotPermittedException
     * @throws GenericFileException
     * @throws LockedException
     * @since 6.0.0
     */
    public function putContent($data);
    /**
     * Get the mimetype of the file
     *
     * @return string
     * @since 6.0.0
     */
    public function getMimeType();
    /**
     * Open the file as stream, resulting resource can be operated as stream like the result from php's own fopen
     *
     * @param string $mode
     * @return resource|false
     * @throws NotPermittedException
     * @throws LockedException
     * @since 6.0.0
     */
    public function fopen($mode);
    /**
     * Compute the hash of the file
     * Type of hash is set with $type and can be anything supported by php's hash_file
     *
     * @param string $type
     * @param bool $raw
     * @return string
     * @since 6.0.0
     */
    public function hash($type, $raw = false);
    /**
     * Get the stored checksum for this file
     *
     * @return string
     * @since 9.0.0
     * @throws InvalidPathException
     * @throws NotFoundException
     */
    public function getChecksum();
    /**
     * Get the extension of this file
     *
     * @return string
     * @since 15.0.0
     */
    public function getExtension() : string;
}
/**
 * Provide a common interface to all different storage options
 *
 * All paths passed to the storage are relative to the storage and should NOT have a leading slash.
 *
 * @since 6.0.0
 * @deprecated 9.0.0 use \OCP\Files\Storage\IStorage instead
 */
interface Storage extends \OCP\Files\Storage\IStorage
{
    /**
     * $parameters is a free form array with the configuration options needed to construct the storage
     *
     * @param array $parameters
     * @since 6.0.0
     */
    public function __construct($parameters);
    /**
     * Get the identifier for the storage,
     * the returned id should be the same for every storage object that is created with the same parameters
     * and two storage objects with the same id should refer to two storages that display the same files.
     *
     * @return string
     * @since 6.0.0
     */
    public function getId();
    /**
     * see https://www.php.net/manual/en/function.mkdir.php
     * implementations need to implement a recursive mkdir
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function mkdir($path);
    /**
     * see https://www.php.net/manual/en/function.rmdir.php
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function rmdir($path);
    /**
     * see https://www.php.net/manual/en/function.opendir.php
     *
     * @param string $path
     * @return resource|false
     * @since 6.0.0
     */
    public function opendir($path);
    /**
     * see https://www.php.net/manual/en/function.is-dir.php
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function is_dir($path);
    /**
     * see https://www.php.net/manual/en/function.is-file.php
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function is_file($path);
    /**
     * see https://www.php.net/manual/en/function.stat.php
     * only the following keys are required in the result: size and mtime
     *
     * @param string $path
     * @return array|bool
     * @since 6.0.0
     */
    public function stat($path);
    /**
     * see https://www.php.net/manual/en/function.filetype.php
     *
     * @param string $path
     * @return string|bool
     * @since 6.0.0
     */
    public function filetype($path);
    /**
     * see https://www.php.net/manual/en/function.filesize.php
     * The result for filesize when called on a folder is required to be 0
     *
     * @param string $path
     * @return false|int|float
     * @since 6.0.0
     */
    public function filesize($path);
    /**
     * check if a file can be created in $path
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function isCreatable($path);
    /**
     * check if a file can be read
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function isReadable($path);
    /**
     * check if a file can be written to
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function isUpdatable($path);
    /**
     * check if a file can be deleted
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function isDeletable($path);
    /**
     * check if a file can be shared
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function isSharable($path);
    /**
     * get the full permissions of a path.
     * Should return a combination of the PERMISSION_ constants defined in lib/public/constants.php
     *
     * @param string $path
     * @return int
     * @since 6.0.0
     */
    public function getPermissions($path);
    /**
     * see https://www.php.net/manual/en/function.file_exists.php
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function file_exists($path);
    /**
     * see https://www.php.net/manual/en/function.filemtime.php
     *
     * @param string $path
     * @return int|bool
     * @since 6.0.0
     */
    public function filemtime($path);
    /**
     * see https://www.php.net/manual/en/function.file_get_contents.php
     *
     * @param string $path
     * @return string|false
     * @since 6.0.0
     */
    public function file_get_contents($path);
    /**
     * see https://www.php.net/manual/en/function.file_put_contents.php
     *
     * @param string $path
     * @param mixed $data
     * @return int|float|false
     * @since 6.0.0
     */
    public function file_put_contents($path, $data);
    /**
     * see https://www.php.net/manual/en/function.unlink.php
     *
     * @param string $path
     * @return bool
     * @since 6.0.0
     */
    public function unlink($path);
    /**
     * see https://www.php.net/manual/en/function.rename.php
     *
     * @param string $source
     * @param string $target
     * @return bool
     * @since 6.0.0
     */
    public function rename($source, $target);
    /**
     * see https://www.php.net/manual/en/function.copy.php
     *
     * @param string $source
     * @param string $target
     * @return bool
     * @since 6.0.0
     */
    public function copy($source, $target);
    /**
     * see https://www.php.net/manual/en/function.fopen.php
     *
     * @param string $path
     * @param string $mode
     * @return resource|bool
     * @since 6.0.0
     */
    public function fopen($path, $mode);
    /**
     * get the mimetype for a file or folder
     * The mimetype for a folder is required to be "httpd/unix-directory"
     *
     * @param string $path
     * @return string|bool
     * @since 6.0.0
     */
    public function getMimeType($path);
    /**
     * see https://www.php.net/manual/en/function.hash-file.php
     *
     * @param string $type
     * @param string $path
     * @param bool $raw
     * @return string|bool
     * @since 6.0.0
     */
    public function hash($type, $path, $raw = false);
    /**
     * see https://www.php.net/manual/en/function.disk-free-space.php
     *
     * @param string $path
     * @return int|float|bool
     * @since 6.0.0
     */
    public function free_space($path);
    /**
     * search for occurrences of $query in file names
     *
     * @param string $query
     * @return array|bool
     * @since 6.0.0
     */
    public function search($query);
    /**
     * see https://www.php.net/manual/en/function.touch.php
     * If the backend does not support the operation, false should be returned
     *
     * @param string $path
     * @param int $mtime
     * @return bool
     * @since 6.0.0
     */
    public function touch($path, $mtime = null);
    /**
     * get the path to a local version of the file.
     * The local version of the file can be temporary and doesn't have to be persistent across requests
     *
     * @param string $path
     * @return string|false
     * @since 6.0.0
     */
    public function getLocalFile($path);
    /**
     * check if a file or folder has been updated since $time
     *
     * @param string $path
     * @param int $time
     * @return bool
     * @since 6.0.0
     *
     * hasUpdated for folders should return at least true if a file inside the folder is add, removed or renamed.
     * returning true for other changes in the folder is optional
     */
    public function hasUpdated($path, $time);
    /**
     * get the ETag for a file or folder
     *
     * @param string $path
     * @return string|false
     * @since 6.0.0
     */
    public function getETag($path);
    /**
     * Returns whether the storage is local, which means that files
     * are stored on the local filesystem instead of remotely.
     * Calling getLocalFile() for local storages should always
     * return the local files, whereas for non-local storages
     * it might return a temporary file.
     *
     * @return bool true if the files are stored locally, false otherwise
     * @since 7.0.0
     */
    public function isLocal();
    /**
     * Check if the storage is an instance of $class or is a wrapper for a storage that is an instance of $class
     *
     * @template T of IStorage
     * @param string $class
     * @psalm-param class-string<T> $class
     * @return bool
     * @since 7.0.0
     * @psalm-assert-if-true T $this
     */
    public function instanceOfStorage($class);
    /**
     * A custom storage implementation can return an url for direct download of a give file.
     *
     * For now the returned array can hold the parameter url - in future more attributes might follow.
     *
     * @param string $path
     * @return array|bool
     * @since 8.0.0
     */
    public function getDirectDownload($path);
    /**
     * @param string $path the path of the target folder
     * @param string $fileName the name of the file itself
     * @return void
     * @throws InvalidPathException
     * @since 8.1.0
     */
    public function verifyPath($path, $fileName);
    /**
     * @param IStorage $sourceStorage
     * @param string $sourceInternalPath
     * @param string $targetInternalPath
     * @return bool
     * @since 8.1.0
     */
    public function copyFromStorage(\OCP\Files\Storage\IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath);
    /**
     * @param IStorage $sourceStorage
     * @param string $sourceInternalPath
     * @param string $targetInternalPath
     * @return bool
     * @since 8.1.0
     */
    public function moveFromStorage(\OCP\Files\Storage\IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath);
    /**
     * @param string $path The path of the file to acquire the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 8.1.0
     */
    public function acquireLock($path, $type, \OCP\Lock\ILockingProvider $provider);
    /**
     * @param string $path The path of the file to acquire the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 8.1.0
     */
    public function releaseLock($path, $type, \OCP\Lock\ILockingProvider $provider);
    /**
     * @param string $path The path of the file to change the lock for
     * @param int $type \OCP\Lock\ILockingProvider::LOCK_SHARED or \OCP\Lock\ILockingProvider::LOCK_EXCLUSIVE
     * @param \OCP\Lock\ILockingProvider $provider
     * @throws \OCP\Lock\LockedException
     * @since 8.1.0
     */
    public function changeLock($path, $type, \OCP\Lock\ILockingProvider $provider);
    /**
     * Test a storage for availability
     *
     * @since 8.2.0
     * @return bool
     */
    public function test();
    /**
     * @since 8.2.0
     * @return array [ available, last_checked ]
     */
    public function getAvailability();
    /**
     * @since 8.2.0
     * @param bool $isAvailable
     */
    public function setAvailability($isAvailable);
    /**
     * @since 12.0.0
     * @return mixed
     */
    public function needsPartFile();
}
/**
 * This class provides different helper functions related to WebDAV protocol
 *
 * @since 25.0.0
 */
class DavUtil
{
    /**
     * Compute the fileId to use for dav responses
     *
     * @param int $id Id of the file returned by FileInfo::getId
     * @since 25.0.0
     */
    public static function getDavFileId(int $id) : string
    {
    }
    /**
     * Compute the format needed for returning permissions for dav
     *
     * @since 25.0.0
     */
    public static function getDavPermissions(\OCP\Files\FileInfo $info) : string
    {
    }
}
/**
 * @since 6.0.0
 */
interface Folder extends \OCP\Files\Node
{
    /**
     * Get the full path of an item in the folder within owncloud's filesystem
     *
     * @param string $path relative path of an item in the folder
     * @return string
     * @throws \OCP\Files\NotPermittedException
     * @since 6.0.0
     */
    public function getFullPath($path);
    /**
     * Get the path of an item in the folder relative to the folder
     *
     * @param string $path absolute path of an item in the folder
     * @throws \OCP\Files\NotFoundException
     * @return string|null
     * @since 6.0.0
     */
    public function getRelativePath($path);
    /**
     * check if a node is a (grand-)child of the folder
     *
     * @param \OCP\Files\Node $node
     * @return bool
     * @since 6.0.0
     */
    public function isSubNode($node);
    /**
     * get the content of this directory
     *
     * @throws \OCP\Files\NotFoundException
     * @return \OCP\Files\Node[]
     * @since 6.0.0
     */
    public function getDirectoryListing();
    /**
     * Get the node at $path
     *
     * @param string $path relative path of the file or folder
     * @return \OCP\Files\Node
     * @throws \OCP\Files\NotFoundException
     * @since 6.0.0
     */
    public function get($path);
    /**
     * Check if a file or folder exists in the folder
     *
     * @param string $path relative path of the file or folder
     * @return bool
     * @since 6.0.0
     */
    public function nodeExists($path);
    /**
     * Create a new folder
     *
     * @param string $path relative path of the new folder
     * @return \OCP\Files\Folder
     * @throws \OCP\Files\NotPermittedException
     * @since 6.0.0
     */
    public function newFolder($path);
    /**
     * Create a new file
     *
     * @param string $path relative path of the new file
     * @param string|resource|null $content content for the new file, since 19.0.0
     * @return \OCP\Files\File
     * @throws \OCP\Files\NotPermittedException
     * @since 6.0.0
     */
    public function newFile($path, $content = null);
    /**
     * search for files with the name matching $query
     *
     * @param string|ISearchQuery $query
     * @return \OCP\Files\Node[]
     * @since 6.0.0
     */
    public function search($query);
    /**
     * search for files by mimetype
     * $mimetype can either be a full mimetype (image/png) or a wildcard mimetype (image)
     *
     * @param string $mimetype
     * @return \OCP\Files\Node[]
     * @since 6.0.0
     */
    public function searchByMime($mimetype);
    /**
     * search for files by tag
     *
     * @param string|int $tag tag name or tag id
     * @param string $userId owner of the tags
     * @return \OCP\Files\Node[]
     * @since 8.0.0
     */
    public function searchByTag($tag, $userId);
    /**
     * get a file or folder inside the folder by it's internal id
     *
     * This method could return multiple entries. For example once the file/folder
     * is shared or mounted (files_external) to the user multiple times.
     *
     * @param int $id
     * @return \OCP\Files\Node[]
     * @since 6.0.0
     */
    public function getById($id);
    /**
     * Get the amount of free space inside the folder
     *
     * @return int
     * @since 6.0.0
     */
    public function getFreeSpace();
    /**
     * Check if new files or folders can be created within the folder
     *
     * @return bool
     * @since 6.0.0
     */
    public function isCreatable();
    /**
     * Add a suffix to the name in case the file exists
     *
     * @param string $name
     * @return string
     * @throws NotPermittedException
     * @since 8.1.0
     */
    public function getNonExistingName($name);
    /**
     * @param int $limit
     * @param int $offset
     * @return \OCP\Files\Node[]
     * @since 9.1.0
     */
    public function getRecent($limit, $offset = 0);
}
/**
 * Interface IRootFolder
 *
 * @since 8.0.0
 */
interface IRootFolder extends \OCP\Files\Folder, \OC\Hooks\Emitter
{
    /**
     * Returns a view to user's files folder
     *
     * @param string $userId user ID
     * @return Folder
     * @throws NoUserException
     * @throws NotPermittedException
     *
     * @since 8.2.0
     */
    public function getUserFolder($userId);
    /**
     * Get a file or folder by fileid, inside a parent path
     *
     * @param int $id
     * @param string $path
     * @return Node[]
     *
     * @since 24.0.0
     */
    public function getByIdInPath(int $id, string $path);
    /**
     * @return IMountPoint[]
     *
     * @since 27.0.1
     */
    public function getMountsIn(string $mountPoint) : array;
    /**
     * @since 27.0.1
     */
    public function getMount(string $mountPoint) : \OCP\Files\Mount\IMountPoint;
}
namespace OCP\Files_FullTextSearch\Model;

/**
 * Abstract Class AFilesDocument
 *
 * This is mostly used by 3rd party apps that want to complete the IIndexDocument
 * with more information about a file before its index:
 *
 *    \OC::$server->getEventDispatcher()->addListener(
 *        '\OCA\Files_FullTextSearch::onFileIndexing',
 *        function(GenericEvent $e) {
 *            //@var \OCP\Files\Node $file
 *            $file = $e->getArgument('file');
 *
 *            // @var \OCP\Files_FullTextSearch\Model\AFilesDocument $document
 *            $document = $e->getArgument('document');
 *        }
 *    );
 *
 * @since 15.0.0
 *
 */
abstract class AFilesDocument extends \OC\FullTextSearch\Model\IndexDocument
{
    /**
     * Returns the owner of the document/file.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public abstract function getOwnerId() : string;
    /**
     * Returns the current viewer of the document/file.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public abstract function getViewerId() : string;
    /**
     * Returns the type of the document/file.
     *
     * @since 15.0.0
     *
     * @return string \OCP\Files\FileInfo::TYPE_FILE|\OCP\Files\FileInfo::TYPE_FOLDER
     */
    public abstract function getType() : string;
    /**
     * Returns the mimetype of the document/file.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public abstract function getMimetype() : string;
    /**
     * Returns the path of the document/file.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public abstract function getPath() : string;
}
namespace OCP\FullTextSearch\Exceptions;

/**
 * @since 15.0.0
 *
 * Class FullTextSearchAppNotAvailableException
 *
 */
class FullTextSearchAppNotAvailableException extends \Exception
{
}
namespace OCP\FullTextSearch\Model;

/**
 * Interface IIndex
 *
 * Index are generated by FullTextSearch to manage the status of a document
 * regarding the date of the last index and the date of the last modification
 * of the original document.
 *
 * The uniqueness of an IIndexDocument is made by the Id of the Content Provider
 * and the Id of the original document within the Content Provider.
 *
 * We will call original document the source from which the IIndexDocument is
 * generated. As an example, an original document can be a file, a mail, ...
 *
 * @since 15.0.0
 *
 */
interface IIndex
{
    public const INDEX_OK = 1;
    public const INDEX_IGNORE = 2;
    public const INDEX_META = 4;
    public const INDEX_CONTENT = 8;
    public const INDEX_PARTS = 16;
    public const INDEX_FULL = 28;
    public const INDEX_REMOVE = 32;
    public const INDEX_DONE = 64;
    public const INDEX_FAILED = 128;
    public const ERROR_FAILED = 1;
    public const ERROR_FAILED2 = 2;
    public const ERROR_FAILED3 = 4;
    public const ERROR_SEV_1 = 1;
    public const ERROR_SEV_2 = 2;
    public const ERROR_SEV_3 = 3;
    public const ERROR_SEV_4 = 4;
    /**
     * Get the Id of the Content Provider.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getProviderId() : string;
    /**
     * Get the Id of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getDocumentId() : string;
    /**
     * Get the collection of the index.
     * If empty (''), means collection is the default one used by the internal framework
     *
     * @since 24.0.0
     *
     * @return string
     */
    public function getCollection() : string;
    /**
     * Set the source of the original document.
     *
     * @since 15.0.0
     *
     * @param string $source
     *
     * @return IIndex
     */
    public function setSource(string $source) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Get the source of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getSource() : string;
    /**
     * Set the owner of the original document.
     *
     * @since 15.0.0
     *
     * @param string $ownerId
     *
     * @return IIndex
     */
    public function setOwnerId(string $ownerId) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Get the owner of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getOwnerId() : string;
    /**
     * Set the current index status (bit flag) of the original document.
     * If $reset is true, the status is reset to the defined value.
     *
     * @since 15.0.0
     *
     * @param int $status
     * @param bool $reset
     *
     * @return IIndex
     */
    public function setStatus(int $status, bool $reset = false) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Get the current index status of the original document.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getStatus() : int;
    /**
     * Check if the document fit a specific status.
     *
     * @since 15.0.0
     *
     * @param int $status
     *
     * @return bool
     */
    public function isStatus(int $status) : bool;
    /**
     * Remove a status.
     *
     * @since 15.0.0
     *
     * @param int $status
     *
     * @return IIndex
     */
    public function unsetStatus(int $status) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Add an option related to the original document (as string).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param string $value
     *
     * @return IIndex
     */
    public function addOption(string $option, string $value) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Add an option related to the original document (as integer).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param int $value
     *
     * @return IIndex
     */
    public function addOptionInt(string $option, int $value) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Get the option related to the original document (as string).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param string $default
     *
     * @return string
     */
    public function getOption(string $option, string $default = '') : string;
    /**
     * Get the option related to the original document (as integer).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param int $default
     *
     * @return int
     */
    public function getOptionInt(string $option, int $default = 0) : int;
    /**
     * Get all options related to the original document.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getOptions() : array;
    /**
     * Add an error log related to the Index.
     *
     * @since 15.0.0
     *
     * @param string $message
     * @param string $exception
     * @param int $sev
     *
     * @return IIndex
     */
    public function addError(string $message, string $exception = '', int $sev = self::ERROR_SEV_3) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Returns the number of known errors related to the Index.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getErrorCount() : int;
    /**
     * Reset all error logs related to the Index.
     *
     * @since 15.0.0
     */
    public function resetErrors() : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Set the date of the last index.
     *
     * @since 15.0.0
     *
     * @param int $lastIndex
     *
     * @return IIndex
     */
    public function setLastIndex(int $lastIndex = -1) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Get the date of the last index.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getLastIndex() : int;
}
/**
 * Class IIndexDocument
 *
 * This is one of the main class of the FullTextSearch, used as a data transfer
 * object. An IIndexDocument is created to manage documents around FullTextSearch,
 * during an index and during a search.
 * The uniqueness of an IIndexDocument is made by the Id of the Content Provider
 * and the Id of the original document within the Content Provider.
 *
 * We will call original document the source from which the IIndexDocument is
 * generated. As an example, an original document can be a file, a mail, ...
 *
 * @since 15.0.0
 */
interface IIndexDocument
{
    public const NOT_ENCODED = 0;
    public const ENCODED_BASE64 = 1;
    /**
     * Returns the Id of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getId() : string;
    /**
     * Returns the Id of the provider.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getProviderId() : string;
    /**
     * Set the Index related to the IIndexDocument.
     *
     * @see IIndex
     *
     * @since 15.0.0
     *
     * @param IIndex $index
     *
     * @return IIndexDocument
     */
    public function setIndex(\OCP\FullTextSearch\Model\IIndex $index) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the Index.
     *
     * @since 15.0.0
     *
     * @return IIndex
     */
    public function getIndex() : \OCP\FullTextSearch\Model\IIndex;
    /**
     * return if Index is defined.
     *
     * @since 16.0.0
     *
     * @return bool
     */
    public function hasIndex() : bool;
    /**
     * Set the modified time of the original document.
     *
     * @since 15.0.0
     *
     * @param int $modifiedTime
     *
     * @return IIndexDocument
     */
    public function setModifiedTime(int $modifiedTime) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the modified time of the original document.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getModifiedTime() : int;
    /**
     * Check if the original document of the IIndexDocument is older than $time.
     *
     * @since 15.0.0
     *
     * @param int $time
     *
     * @return bool
     */
    public function isOlderThan(int $time) : bool;
    /**
     * Set the read rights of the original document using a IDocumentAccess.
     *
     * @see IDocumentAccess
     *
     * @since 15.0.0
     *
     * @param IDocumentAccess $access
     *
     * @return $this
     */
    public function setAccess(\OCP\FullTextSearch\Model\IDocumentAccess $access) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the IDocumentAccess related to the original document.
     *
     * @since 15.0.0
     *
     * @return IDocumentAccess
     */
    public function getAccess() : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add a tag to the list.
     *
     * @since 15.0.0
     *
     * @param string $tag
     *
     * @return IIndexDocument
     */
    public function addTag(string $tag) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set the list of tags assigned to the original document.
     *
     * @since 15.0.0
     *
     * @param array $tags
     *
     * @return IIndexDocument
     */
    public function setTags(array $tags) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the list of tags assigned to the original document.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getTags() : array;
    /**
     * Add a meta tag to the list.
     *
     * @since 15.0.0
     *
     * @param string $tag
     *
     * @return IIndexDocument
     */
    public function addMetaTag(string $tag) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set the list of meta tags assigned to the original document.
     *
     * @since 15.0.0
     *
     * @param array $tags
     *
     * @return IIndexDocument
     */
    public function setMetaTags(array $tags) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the list of meta tags assigned to the original document.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getMetaTags() : array;
    /**
     * Add a sub tag to the list.
     *
     * @since 15.0.0
     *
     * @param string $sub
     * @param string $tag
     *
     * @return IIndexDocument
     */
    public function addSubTag(string $sub, string $tag) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set the list of sub tags assigned to the original document.
     *
     * @since 15.0.0
     *
     * @param array $tags
     *
     * @return IIndexDocument
     */
    public function setSubTags(array $tags) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the list of sub tags assigned to the original document.
     * If $formatted is true, the result will be formatted in a one
     * dimensional array.
     *
     * @since 15.0.0
     *
     * @param bool $formatted
     *
     * @return array
     */
    public function getSubTags(bool $formatted = false) : array;
    /**
     * Set the source of the original document.
     *
     * @since 15.0.0
     *
     * @param string $source
     *
     * @return IIndexDocument
     */
    public function setSource(string $source) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the source of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getSource() : string;
    /**
     * Set the title of the original document.
     *
     * @since 15.0.0
     *
     * @param string $title
     *
     * @return IIndexDocument
     */
    public function setTitle(string $title) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the title of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getTitle() : string;
    /**
     * Set the content of the document.
     * $encoded can be NOT_ENCODED or ENCODED_BASE64 if the content is raw or
     * encoded in base64.
     *
     * @since 15.0.0
     *
     * @param string $content
     * @param int $encoded
     *
     * @return IIndexDocument
     */
    public function setContent(string $content, int $encoded = 0) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the content of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getContent() : string;
    /**
     * Returns the type of the encoding on the content.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function isContentEncoded() : int;
    /**
     * Return the size of the content.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getContentSize() : int;
    /**
     * Generate an hash, based on the content of the original document.
     *
     * @since 15.0.0
     *
     * @return IIndexDocument
     */
    public function initHash() : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set the hash of the original document.
     *
     * @since 15.0.0
     *
     * @param string $hash
     *
     * @return IIndexDocument
     */
    public function setHash(string $hash) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the hash of the original document.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getHash() : string;
    /**
     * Add a part, identified by a string, and its content.
     *
     * It is strongly advised to use alphanumerical chars with no space in the
     * $part string.
     *
     * @since 15.0.0
     *
     * @param string $part
     * @param string $content
     *
     * @return IIndexDocument
     */
    public function addPart(string $part, string $content) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set all parts and their content.
     *
     * @since 15.0.0
     *
     * @param array $parts
     *
     * @return IIndexDocument
     */
    public function setParts(array $parts) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get all parts of the IIndexDocument.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getParts() : array;
    /**
     * Add a link, usable by the frontend.
     *
     * @since 15.0.0
     *
     * @param string $link
     *
     * @return IIndexDocument
     */
    public function setLink(string $link) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the link.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getLink() : string;
    /**
     * Set more information that couldn't be set using other method.
     *
     * @since 15.0.0
     *
     * @param array $more
     *
     * @return IIndexDocument
     */
    public function setMore(array $more) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get more information.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getMore() : array;
    /**
     * Add some excerpt of the content of the original document, usually based
     * on the search request.
     *
     * @since 16.0.0
     *
     * @param string $source
     * @param string $excerpt
     *
     * @return IIndexDocument
     */
    public function addExcerpt(string $source, string $excerpt) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Set all excerpts of the content of the original document.
     *
     * @since 16.0.0
     *
     * @param array $excerpts
     *
     * @return IIndexDocument
     */
    public function setExcerpts(array $excerpts) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get all excerpts of the content of the original document.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getExcerpts() : array;
    /**
     * Set the score to the result assigned to this document during a search
     * request.
     *
     * @since 15.0.0
     *
     * @param string $score
     *
     * @return IIndexDocument
     */
    public function setScore(string $score) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get the score.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getScore() : string;
    /**
     * Set some information about the original document that will be available
     * to the front-end when displaying search result. (as string)
     * Because this information will not be indexed, this method can also be
     * used to manage some data while filling the IIndexDocument before its
     * indexing.
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param string $value
     *
     * @return IIndexDocument
     */
    public function setInfo(string $info, string $value) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get an information about a document. (string)
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param string $default
     *
     * @return string
     */
    public function getInfo(string $info, string $default = '') : string;
    /**
     * Set some information about the original document that will be available
     * to the front-end when displaying search result. (as array)
     * Because this information will not be indexed, this method can also be
     * used to manage some data while filling the IIndexDocument before its
     * indexing.
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param array $value
     *
     * @return IIndexDocument
     */
    public function setInfoArray(string $info, array $value) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get an information about a document. (array)
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param array $default
     *
     * @return array
     */
    public function getInfoArray(string $info, array $default = []) : array;
    /**
     * Set some information about the original document that will be available
     * to the front-end when displaying search result. (as int)
     * Because this information will not be indexed, this method can also be
     * used to manage some data while filling the IIndexDocument before its
     * indexing.
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param int $value
     *
     * @return IIndexDocument
     */
    public function setInfoInt(string $info, int $value) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get an information about a document. (int)
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param int $default
     *
     * @return int
     */
    public function getInfoInt(string $info, int $default = 0) : int;
    /**
     * Set some information about the original document that will be available
     * to the front-end when displaying search result. (as bool)
     * Because this information will not be indexed, this method can also be
     * used to manage some data while filling the IIndexDocument before its
     * indexing.
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param bool $value
     *
     * @return IIndexDocument
     */
    public function setInfoBool(string $info, bool $value) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Get an information about a document. (bool)
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param bool $default
     *
     * @return bool
     */
    public function getInfoBool(string $info, bool $default = false) : bool;
    /**
     * Get all info.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getInfoAll() : array;
}
/**
 * Interface IRunner
 *
 * The indexing process can be long and heavy, and because errors can
 * be encountered the process is wrapped using this interface.
 * It allows the any extension of FullTextSearch to communicate with the process.
 *
 * The IRunner is coming with some methods so the Search Platform can
 * returns important information and errors to be displayed to the admin.
 *
 * @since 15.0.0
 *
 */
interface IRunner
{
    public const RESULT_TYPE_SUCCESS = 1;
    public const RESULT_TYPE_WARNING = 4;
    public const RESULT_TYPE_FAIL = 9;
    /**
     * Info are displayed in the user interface when an admin execute the
     * ./occ fulltextsearch:index command.
     *
     * quick list of info that can be edited:
     *   'documentId', 'info', 'title', 'resultIndex', 'resultStatus',
     *   'content', 'documentCurrent', 'documentTotal', 'progressStatus',
     *   'errorCurrent', 'errorException', 'errorIndex'.
     *
     * List of all editable info can be find in the Command\Index.php of the
     * FullTextSearch app.
     * (look for a comment 'full list of info that can be edited')
     *
     * @since 15.0.0
     *
     * @param string $info
     * @param string $value
     */
    public function setInfo(string $info, string $value);
    /**
     * This method should be used when editing multiple info to avoid too many
     * refresh of the interface.
     *
     * @since 15.0.0
     *
     * @param array $data
     */
    public function setInfoArray(array $data);
    /**
     * Method used to update the current Action when an index is running.
     *
     * This method should be used instead of manually update the 'action' using
     * setInfo()/setInfoArray() as it is also used to keep the process alive,
     * manage the input, and some statistics of the load of the process.
     *
     * $action is a string with no space
     * $force should be set to true if the action is heavy while being executed
     * multiple times
     *
     * @since 15.0.0
     *
     * @param string $action
     * @param bool $force
     *
     * @return string
     * @throws \Exception
     */
    public function updateAction(string $action = '', bool $force = false) : string;
    /**
     * Call this method in a Search Platform or Content Provider if there is an
     * issue while generating a document or while indexing the current document.
     * This is used to store and display errors in the UI during an index to help
     * admin to keep track of errors.
     *
     * @since 15.0.0
     *
     * @param IIndex $index
     * @param string $message
     * @param string $class
     * @param int $sev
     */
    public function newIndexError(\OCP\FullTextSearch\Model\IIndex $index, string $message, string $class = '', int $sev = 3);
    /**
     * Call this method only in a Search Platform after an index of a document.
     * This is used to store and display results (good or bad) in the UI during
     * an index to help admin to keep track of fail and successful indexes.
     *
     * @since 15.0.0
     *
     * @param IIndex $index
     * @param string $message
     * @param string $status
     * @param int $type
     */
    public function newIndexResult(\OCP\FullTextSearch\Model\IIndex $index, string $message, string $status, int $type);
}
/**
 * Interface ISearchRequestSimpleQuery
 *
 * Add a Query during a Search Request...
 * - on a specific field,
 * - using a specific value,
 * - with a specific comparison
 *
 * @since 17.0.0
 *
 */
interface ISearchRequestSimpleQuery
{
    public const COMPARE_TYPE_TEXT = 1;
    public const COMPARE_TYPE_KEYWORD = 2;
    public const COMPARE_TYPE_INT_EQ = 3;
    public const COMPARE_TYPE_INT_GTE = 4;
    public const COMPARE_TYPE_INT_GT = 5;
    public const COMPARE_TYPE_INT_LTE = 6;
    public const COMPARE_TYPE_INT_LT = 7;
    public const COMPARE_TYPE_BOOL = 8;
    public const COMPARE_TYPE_ARRAY = 9;
    public const COMPARE_TYPE_REGEX = 10;
    public const COMPARE_TYPE_WILDCARD = 11;
    /**
     * Get the compare type of the query
     *
     * @return int
     * @since 17.0.0
     */
    public function getType() : int;
    /**
     * Get the field to apply query
     *
     * @return string
     * @since 17.0.0
     */
    public function getField() : string;
    /**
     * Set the field to apply query
     *
     * @param string $field
     *
     * @return ISearchRequestSimpleQuery
     * @since 17.0.0
     */
    public function setField(string $field) : \OCP\FullTextSearch\Model\ISearchRequestSimpleQuery;
    /**
     * Get the all values to compare
     *
     * @return array
     * @since 17.0.0
     */
    public function getValues() : array;
    /**
     * Add value to compare (string)
     *
     * @param string $value
     *
     * @return ISearchRequestSimpleQuery
     * @since 17.0.0
     */
    public function addValue(string $value) : \OCP\FullTextSearch\Model\ISearchRequestSimpleQuery;
    /**
     * Add value to compare (int)
     *
     * @param int $value
     *
     * @return ISearchRequestSimpleQuery
     * @since 17.0.0
     */
    public function addValueInt(int $value) : \OCP\FullTextSearch\Model\ISearchRequestSimpleQuery;
    /**
     * Add value to compare (array)
     *
     * @param array $value
     *
     * @return ISearchRequestSimpleQuery
     * @since 17.0.0
     */
    public function addValueArray(array $value) : \OCP\FullTextSearch\Model\ISearchRequestSimpleQuery;
    /**
     * Add value to compare (bool)
     *
     * @param bool $value
     *
     * @return ISearchRequestSimpleQuery
     * @since 17.0.0
     */
    public function addValueBool(bool $value) : \OCP\FullTextSearch\Model\ISearchRequestSimpleQuery;
}
/**
 * Interface IDocumentAccess
 *
 * This object is used as a data transfer object when
 *
 * - indexing a document,
 * - generating a search request.
 *
 * During the index, it is used to define which users, groups, circles, ...
 * have access to the IIndexDocument
 *
 * During the search, it is internally use to define to which group, circles, ...
 * a user that perform the search belongs to.
 *
 * @see IIndexDocument::setAccess
 *
 * @since 16.0.0
 *
 */
interface IDocumentAccess
{
    /**
     * Owner of the document can be set at the init of the object.
     *
     * @since 16.0.0
     *
     * IDocumentAccess constructor.
     *
     * @param string $ownerId
     */
    public function __construct(string $ownerId = '');
    /**
     * Set the Owner of the document.
     *
     * @since 16.0.0
     *
     * @param string $ownerId
     *
     * @return IDocumentAccess
     */
    public function setOwnerId(string $ownerId) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Get the Owner of the document.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getOwnerId() : string;
    /**
     * Set the viewer of the document.
     *
     * @since 16.0.0
     *
     * @param string $viewerId
     *
     * @return IDocumentAccess
     */
    public function setViewerId(string $viewerId) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Get the viewer of the document.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getViewerId() : string;
    /**
     * Set the list of users that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param array $users
     *
     * @return IDocumentAccess
     */
    public function setUsers(array $users) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add an entry to the list of users that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param string $user
     *
     * @return IDocumentAccess
     */
    public function addUser(string $user) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add multiple entries to the list of users that have read access to the
     * document.
     *
     * @since 16.0.0
     *
     * @param array $users
     *
     * @return IDocumentAccess
     */
    public function addUsers($users) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Get the complete list of users that have read access to the document.
     *
     * @since 16.0.0
     *
     * @return array
     */
    public function getUsers() : array;
    /**
     * Set the list of groups that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param array $groups
     *
     * @return IDocumentAccess
     */
    public function setGroups(array $groups) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add an entry to the list of groups that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param string $group
     *
     * @return IDocumentAccess
     */
    public function addGroup(string $group) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add multiple entries to the list of groups that have read access to the
     * document.
     *
     * @since 16.0.0
     *
     * @param array $groups
     *
     * @return IDocumentAccess
     */
    public function addGroups(array $groups);
    /**
     * Get the complete list of groups that have read access to the document.
     *
     * @since 16.0.0
     *
     * @return array
     */
    public function getGroups() : array;
    /**
     * Set the list of circles that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param array $circles
     *
     * @return IDocumentAccess
     */
    public function setCircles(array $circles) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add an entry to the list of circles that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param string $circle
     *
     * @return IDocumentAccess
     */
    public function addCircle(string $circle) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Add multiple entries to the list of groups that have read access to the
     * document.
     *
     * @since 16.0.0
     *
     * @param array $circles
     *
     * @return IDocumentAccess
     */
    public function addCircles(array $circles) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Get the complete list of circles that have read access to the document.
     *
     * @since 16.0.0
     *
     * @return array
     */
    public function getCircles() : array;
    /**
     * Set the list of links that have read access to the document.
     *
     * @since 16.0.0
     *
     * @param array $links
     *
     * @return IDocumentAccess
     */
    public function setLinks(array $links) : \OCP\FullTextSearch\Model\IDocumentAccess;
    /**
     * Get the list of links that have read access to the document.
     *
     * @since 16.0.0
     *
     * @return array
     */
    public function getLinks() : array;
}
/**
 * Interface IIndexOptions
 *
 * IndexOptions are created in FullTextSearch when an admin initiate an index
 * from the command line:
 *
 * ./occ fulltextsearch:index "{\"option1\": \"value\", \"option2\": true}"
 *
 * @since 15.0.0
 *
 */
interface IIndexOptions
{
    /**
     * Get the value (as a string) for an option.
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param string $default
     *
     * @return string
     */
    public function getOption(string $option, string $default = '') : string;
    /**
     * Get the value (as an array) for an option.
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param array $default
     *
     * @return array
     */
    public function getOptionArray(string $option, array $default = []) : array;
    /**
     * Get the value (as an boolean) for an option.
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param bool $default
     *
     * @return bool
     */
    public function getOptionBool(string $option, bool $default) : bool;
}
/**
 * @since 16.0.0
 *
 * Interface ISearchOption
 *
 */
interface ISearchOption
{
    /**
     * @since 16.0.0
     */
    public const CHECKBOX = 'checkbox';
    /**
     * @since 16.0.0
     */
    public const INPUT = 'input';
    /**
     * @since 16.0.0
     */
    public const INPUT_SMALL = 'small';
    /**
     * Set the name/key of the option.
     * The string should only contains alphanumerical chars and underscore.
     * The key can be retrieve when using ISearchRequest::getOption
     *
     * @see ISearchRequest::getOption
     *
     * @since 16.0.0
     *
     * @param string $name
     *
     * @return ISearchOption
     */
    public function setName(string $name) : \OCP\FullTextSearch\Model\ISearchOption;
    /**
     * Get the name/key of the option.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getName() : string;
    /**
     * Set the title/display name of the option.
     *
     * @since 16.0.0
     *
     * @param string $title
     *
     * @return ISearchOption
     */
    public function setTitle(string $title) : \OCP\FullTextSearch\Model\ISearchOption;
    /**
     * Get the title of the option.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getTitle() : string;
    /**
     * Set the type of the option.
     * $type can be ISearchOption::CHECKBOX or ISearchOption::INPUT
     *
     * @since 16.0.0
     *
     * @param string $type
     *
     * @return ISearchOption
     */
    public function setType(string $type) : \OCP\FullTextSearch\Model\ISearchOption;
    /**
     * Get the type of the option.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getType() : string;
    /**
     * In case of Type is INPUT, set the size of the input field.
     * Value can be ISearchOption::INPUT_SMALL or not defined.
     *
     * @since 16.0.0
     *
     * @param string $size
     *
     * @return ISearchOption
     */
    public function setSize(string $size) : \OCP\FullTextSearch\Model\ISearchOption;
    /**
     * Get the size of the INPUT.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getSize() : string;
    /**
     * In case of Type is , set the placeholder to be displayed in the input
     * field.
     *
     * @since 16.0.0
     *
     * @param string $placeholder
     *
     * @return ISearchOption
     */
    public function setPlaceholder(string $placeholder) : \OCP\FullTextSearch\Model\ISearchOption;
    /**
     * Get the placeholder.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getPlaceholder() : string;
}
/**
 * Interface ISearchRequest
 *
 * When a search request is initiated, from a request from the front-end or using
 * the IFullTextSearchManager::search() method, FullTextSearch will create a
 * SearchRequest object, based on this interface.
 *
 * The object will be passed to the targeted Content Provider so it can convert
 * search options using available method.
 *
 * The object is then encapsulated in a SearchResult and send to the
 * Search Platform.
 *
 * @since 15.0.0
 *
 *
 */
interface ISearchRequest
{
    /**
     * Get the maximum number of results to be returns by the Search Platform.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getSize() : int;
    /**
     * Get the current page.
     * Used by pagination.
     *
     * @since 15.0.0
     *
     * @return int
     */
    public function getPage() : int;
    /**
     * Get the author of the request.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getAuthor() : string;
    /**
     * Get the searched string.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getSearch() : string;
    /**
     * Set the searched string.
     *
     * @param string $search
     *
     * @since 17.0.0
     *
     * @return ISearchRequest
     */
    public function setSearch(string $search) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Extends the searched string.
     *
     * @since 17.0.0
     *
     * @param string $search
     *
     * @return ISearchRequest
     */
    public function addSearch(string $search) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the value of an option (as string).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param string $default
     *
     * @return string
     */
    public function getOption(string $option, string $default = '') : string;
    /**
     * Get the value of an option (as array).
     *
     * @since 15.0.0
     *
     * @param string $option
     * @param array $default
     *
     * @return array
     */
    public function getOptionArray(string $option, array $default = []) : array;
    /**
     * Limit the search to a part of the document.
     *
     * @since 15.0.0
     *
     * @param string $part
     *
     * @return ISearchRequest
     */
    public function addPart(string $part) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Limit the search to an array of parts of the document.
     *
     * @since 15.0.0
     *
     * @param array $parts
     *
     * @return ISearchRequest
     */
    public function setParts(array $parts) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the parts the search is limited to.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getParts() : array;
    /**
     * Limit the search to a specific meta tag.
     *
     * @since 15.0.0
     *
     * @param string $tag
     *
     * @return ISearchRequest
     */
    public function addMetaTag(string $tag) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the meta tags the search is limited to.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getMetaTags() : array;
    /**
     * Limit the search to an array of meta tags.
     *
     * @since 15.0.0
     *
     * @param array $tags
     *
     * @return ISearchRequest
     */
    public function setMetaTags(array $tags) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Limit the search to a specific sub tag.
     *
     * @since 15.0.0
     *
     * @param string $source
     * @param string $tag
     *
     * @return ISearchRequest
     */
    public function addSubTag(string $source, string $tag) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the sub tags the search is limited to.
     *
     * @since 15.0.0
     *
     * @param bool $formatted
     *
     * @return array
     */
    public function getSubTags(bool $formatted) : array;
    /**
     * Limit the search to an array of sub tags.
     *
     * @since 15.0.0
     *
     * @param array $tags
     *
     * @return ISearchRequest
     */
    public function setSubTags(array $tags) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Limit the search to a specific field of the mapping, using a full string.
     *
     * @since 15.0.0
     *
     * @param string $field
     *
     * @return ISearchRequest
     */
    public function addLimitField(string $field) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the fields the search is limited to.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getLimitFields() : array;
    /**
     * Limit the search to a specific field of the mapping, using a wildcard on
     * the search string.
     *
     * @since 15.0.0
     *
     * @param string $field
     *
     * @return ISearchRequest
     */
    public function addWildcardField(string $field) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the limit to field of the mapping.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getWildcardFields() : array;
    /**
     * Filter the results, based on a group of field, using regex
     *
     * @since 15.0.0
     *
     * @param array $filters
     *
     * @return ISearchRequest
     */
    public function addRegexFilters(array $filters) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the regex filters the search is limit to.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getRegexFilters() : array;
    /**
     * Filter the results, based on a group of field, using wildcard
     *
     * @since 15.0.0
     *
     * @param array $filter
     *
     * @return ISearchRequest
     */
    public function addWildcardFilter(array $filter) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the wildcard filters the search is limit to.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getWildcardFilters() : array;
    /**
     * Add an extra field to the search.
     *
     * @since 15.0.0
     *
     * @param string $field
     *
     * @return ISearchRequest
     */
    public function addField(string $field) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the list of extra field to search into.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getFields() : array;
    /**
     * Add a MUST search on an extra field
     *
     * @param ISearchRequestSimpleQuery $query
     *
     * @return ISearchRequest
     * @since 17.0.0
     */
    public function addSimpleQuery(\OCP\FullTextSearch\Model\ISearchRequestSimpleQuery $query) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the list of queries on extra field.
     *
     * @return ISearchRequestSimpleQuery[]
     * @since 17.0.0
     */
    public function getSimpleQueries() : array;
}
/**
 * Class ISearchTemplate
 *
 * This is a data transfer object that should be created by Content Provider
 * when the getSearchTemplate() method is called.
 *
 * The object will contain templates to be displayed, and the list of the different
 * options to be available to the user when he start a new search.
 *
 * The display of the Options is generated by the FullTextSearch app and Options
 * can be displayed in 2 places:
 *
 * - the navigation page of the app that generate the indexed content.
 *   (files, bookmarks, deck, mails, ...)
 * - the navigation page of the FullTextSearch app.
 *
 * Both pages will have different Options, and only the first one can integrate
 * a specific template.
 *
 * @see IFullTextSearchProvider::getSearchTemplate
 *
 * @since 16.0.0
 *
 */
interface ISearchTemplate
{
    /**
     * Set the class of the icon to be displayed in the left panel of the
     * FullTextSearch navigation page, in front of the related Content Provider.
     *
     * @since 16.0.0
     *
     * @param string $class
     *
     * @return ISearchTemplate
     */
    public function setIcon(string $class) : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Get the class of the icon.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getIcon() : string;
    /**
     * Set the path of a CSS file that will be loaded when needed.
     *
     * @since 16.0.0
     *
     * @param string $css
     *
     * @return ISearchTemplate
     */
    public function setCss(string $css) : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Get the path of the CSS file.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getCss() : string;
    /**
     * Set the path of the file of a template that the HTML will be displayed
     * below the Options.
     * This should only be used if your Content Provider needs to set options in
     * a way not generated by FullTextSearch
     *
     * @since 16.0.0
     *
     * @param string $template
     *
     * @return ISearchTemplate
     */
    public function setTemplate(string $template) : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Get the path of the template file.
     *
     * @since 16.0.0
     *
     * @return string
     */
    public function getTemplate() : string;
    /**
     * Add an option in the Panel that is displayed when the user start a search
     * within the app that generate the content.
     *
     * @see ISearchOption
     *
     * @since 16.0.0
     *
     * @param ISearchOption $option
     *
     * @return ISearchTemplate
     */
    public function addPanelOption(\OCP\FullTextSearch\Model\ISearchOption $option) : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Get all options to be displayed in the Panel.
     *
     * @since 16.0.0
     *
     * @return ISearchOption[]
     */
    public function getPanelOptions() : array;
    /**
     * Add an option in the left panel of the FullTextSearch navigation page.
     *
     * @see ISearchOption
     *
     * @since 16.0.0
     *
     * @param ISearchOption $option
     *
     * @return ISearchTemplate
     */
    public function addNavigationOption(\OCP\FullTextSearch\Model\ISearchOption $option) : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Get all options to be displayed in the FullTextSearch navigation page.
     *
     * @since 16.0.0
     *
     * @return array
     */
    public function getNavigationOptions() : array;
}
/**
 * Interface ISearchResult
 *
 * When a search request is initiated, FullTextSearch will create a SearchResult
 * object, based on this interface, containing the SearchRequest and the targeted
 * Content Provider.
 *
 * The object will be passed to the Search Platform, which will proceed to the
 * search and fill the SearchResult object with results.
 *
 * Then, the object will be passed to the targeted Content Provider that will
 * improve the Search Results with detailed information.
 *
 * Finally, the SearchResult is returned to the original search request.
 *
 * @since 15.0.0
 *
 */
interface ISearchResult
{
    /**
     * Get the original SearchRequest.
     *
     * @see ISearchRequest
     *
     * @since 15.0.0
     *
     * @return ISearchRequest
     */
    public function getRequest() : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Get the targeted Content Provider.
     *
     * @since 15.0.0
     *
     * @return IFullTextSearchProvider
     */
    public function getProvider() : \OCP\FullTextSearch\IFullTextSearchProvider;
    /**
     * Add an IIndexDocument as one of the result of the search request.
     *
     * @since 15.0.0
     *
     * @param IIndexDocument $document
     *
     * @return ISearchResult
     */
    public function addDocument(\OCP\FullTextSearch\Model\IIndexDocument $document) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Returns all result of the search request, in an array of IIndexDocument.
     *
     * @since 15.0.0
     *
     * @return IIndexDocument[]
     */
    public function getDocuments() : array;
    /**
     * Set an array of IIndexDocument as the result of the search request.
     *
     * @since 15.0.0
     *
     * @param IIndexDocument[] $documents
     *
     * @return ISearchResult
     */
    public function setDocuments(array $documents) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Add an aggregation to the result.
     *
     * @since 15.0.0
     *
     * @param string $category
     * @param string $value
     * @param int $count
     *
     * @return ISearchResult
     */
    public function addAggregation(string $category, string $value, int $count) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Get all aggregations.
     *
     * @since 15.0.0
     *
     * @param string $category
     *
     * @return array
     */
    public function getAggregations(string $category) : array;
    /**
     * Set the raw result of the request.
     *
     * @since 15.0.0
     *
     * @param string $result
     *
     * @return ISearchResult
     */
    public function setRawResult(string $result) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Set the total number of results for the search request.
     * Used by pagination.
     *
     * @since 15.0.0
     *
     * @param int $total
     *
     * @return ISearchResult
     */
    public function setTotal(int $total) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Set the top score for the search request.
     *
     * @since 15.0.0
     *
     * @param int $score
     *
     * @return ISearchResult
     */
    public function setMaxScore(int $score) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Set the time spent by the request to perform the search.
     *
     * @since 15.0.0
     *
     * @param int $time
     *
     * @return ISearchResult
     */
    public function setTime(int $time) : \OCP\FullTextSearch\Model\ISearchResult;
    /**
     * Set to true if the request timed out.
     *
     * @since 15.0.0
     *
     * @param bool $timedOut
     *
     * @return ISearchResult
     */
    public function setTimedOut(bool $timedOut) : \OCP\FullTextSearch\Model\ISearchResult;
}
namespace OCP\FullTextSearch\Service;

/**
 * Interface IIndexService
 *
 * @since 15.0.0
 *
 */
interface IIndexService
{
    /**
     * Create an Index
     *
     * @since 15.0.1
     *
     * @param string $providerId
     * @param string $documentId
     * @param string $userId
     * @param int $status
     * @return IIndex
     */
    public function createIndex(string $providerId, string $documentId, string $userId, int $status) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Retrieve an Index from the database, based on the Id of the Provider
     * and the Id of the Document
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     *
     * @return IIndex
     */
    public function getIndex(string $providerId, string $documentId) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Update the status of an Index. status is a bit flag, setting $reset to
     * true will reset the status to the value defined in the parameter.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     * @param int $status
     * @param bool $reset
     */
    public function updateIndexStatus(string $providerId, string $documentId, int $status, bool $reset = false);
    /**
     * Update the status of an array of Index. status is a bit flag, setting $reset to
     * true will reset the status to the value defined in the parameter.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param array $documentIds
     * @param int $status
     * @param bool $reset
     */
    public function updateIndexesStatus(string $providerId, array $documentIds, int $status, bool $reset = false);
    /**
     * Update an array of Index.
     *
     * @since 15.0.0
     *
     * @param array $indexes
     */
    public function updateIndexes(array $indexes);
}
/**
 * Interface IProviderService
 *
 * @since 15.0.0
 *
 */
interface IProviderService
{
    /**
     * Check if the provider $providerId is already indexed.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     *
     * @return bool
     */
    public function isProviderIndexed(string $providerId);
    /**
     * Add the Javascript API in the navigation page of an app.
     *
     * @since 15.0.0
     */
    public function addJavascriptAPI();
}
/**
 * Interface ISearchService
 *
 * @since 15.0.0
 *
 */
interface ISearchService
{
    /**
     * generate a search request, based on an array:
     *
     * $request =
     *   [
     *        'providers' =>    (string/array) 'all'
     *        'author' =>       (string) owner of the document.
     *        'search' =>       (string) search string,
     *        'size' =>         (int) number of items to be return
     *        'page' =>         (int) page
     *        'parts' =>        (array) parts of document to search within,
     *        'options' =       (array) search options,
     *        'tags'     =>     (array) tags,
     *        'metatags' =>     (array) metatags,
     *        'subtags'  =>     (array) subtags
     *   ]
     *
     * 'providers' can be an array of providerIds
     *
     * @since 15.0.0
     *
     * @param array $request
     *
     * @return ISearchRequest
     */
    public function generateSearchRequest(array $request) : \OCP\FullTextSearch\Model\ISearchRequest;
    /**
     * Search documents
     *
     * @since 15.0.0
     *
     * @param string $userId
     * @param ISearchRequest $searchRequest
     *
     * @return ISearchResult[]
     */
    public function search(string $userId, \OCP\FullTextSearch\Model\ISearchRequest $searchRequest) : array;
}
namespace OCP\FullTextSearch;

/**
 * Interface IFullTextSearchManager
 *
 * Should be used to manage FullTextSearch from the app that contains your
 * Content Provider/Search Platform.
 *
 * @since 15.0.0
 *
 */
interface IFullTextSearchManager
{
    /**
     * Register a IProviderService.
     *
     * @since 15.0.0
     *
     * @param IProviderService $providerService
     */
    public function registerProviderService(\OCP\FullTextSearch\Service\IProviderService $providerService);
    /**
     * Register a IIndexService.
     *
     * @since 15.0.0
     *
     * @param IIndexService $indexService
     */
    public function registerIndexService(\OCP\FullTextSearch\Service\IIndexService $indexService);
    /**
     * Register a ISearchService.
     *
     * @since 15.0.0
     *
     * @param ISearchService $searchService
     */
    public function registerSearchService(\OCP\FullTextSearch\Service\ISearchService $searchService);
    /**
     * returns true is Full Text Search is available (app is present and Service
     * are registered)
     *
     * @since 16.0.0
     *
     * @return bool
     */
    public function isAvailable() : bool;
    /**
     * Add the Javascript API in the navigation page of an app.
     * Needed to replace the default search.
     *
     * @since 15.0.0
     */
    public function addJavascriptAPI();
    /**
     * Check if the provider $providerId is already indexed.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     *
     * @return bool
     */
    public function isProviderIndexed(string $providerId) : bool;
    /**
     * Retrieve an Index from the database, based on the Id of the Provider
     * and the Id of the Document
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     *
     * @return IIndex
     */
    public function getIndex(string $providerId, string $documentId) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Create a new Index.
     *
     * This method must be called when a new document is created.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     * @param string $userId
     * @param int $status
     *
     * @return IIndex
     */
    public function createIndex(string $providerId, string $documentId, string $userId, int $status = 0) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Update the status of an Index. status is a bitflag, setting $reset to
     * true will reset the status to the value defined in the parameter.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     * @param int $status
     * @param bool $reset
     */
    public function updateIndexStatus(string $providerId, string $documentId, int $status, bool $reset = false);
    /**
     * Update the status of an array of Index. status is a bit flag, setting $reset to
     * true will reset the status to the value defined in the parameter.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param array $documentIds
     * @param int $status
     * @param bool $reset
     */
    public function updateIndexesStatus(string $providerId, array $documentIds, int $status, bool $reset = false);
    /**
     * Update an array of Index.
     *
     * @since 15.0.0
     *
     * @param IIndex[] $indexes
     */
    public function updateIndexes(array $indexes);
    /**
     * Search using an array as request. If $userId is empty, will use the
     * current session.
     *
     * @see ISearchService::generateSearchRequest
     *
     * @since 15.0.0
     *
     * @param array $request
     * @param string $userId
     * @return ISearchResult[]
     */
    public function search(array $request, string $userId = '') : array;
}
/**
 * Interface IFullTextSearchPlatform
 *
 * This interface must be use when creating a Search Platform for FullTextSearch.
 *
 * A Search Platform is an extension to the FullTextSearch that will act as a
 * a gateway between FullTextSearch and a search server (ie. ElasticSearch,
 * Solr, ...)
 *
 * Multiple Search Platform can exist at the same time in Nextcloud, however only
 * one Search Platform will be used by FullTextSearch.
 * Administrator must select at least one Search Platform to be used by
 * FullTextSearch in the admin settings page.
 *
 * The content provided by FullTextSearch comes in chunk from multiple Content
 * Provider. Each chunk is identified by the ID of the Content Provider, and the
 * ID of the document.
 *
 *
 * To oversimplify the mechanism:
 *
 * - When indexing, FullTextSearch will send providerId, documentId, content.
 * - When searching within the content of a Content Provider, identified by its
 *   providerId, FullTextSearch expect documentId as result.
 *
 *
 * The Search Platform ia a PHP class that implement this interface and is defined
 * in appinfo/info.xml of the app that contains that class:
 *
 *    <fulltextsearch>
 *      <platform>OCA\YourApp\YourSearchPlatform</platform>
 *    </fulltextsearch>
 *
 * Multiple Search Platform can be defined in a single app.
 *
 * @since 15.0.0
 *
 */
interface IFullTextSearchPlatform
{
    /**
     * Must returns a unique Id used to identify the Search Platform.
     * Id must contains only alphanumeric chars, with no space.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getId() : string;
    /**
     * Must returns a descriptive name of the Search Platform.
     * This is used mainly in the admin settings page to display the list of
     * available Search Platform
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getName() : string;
    /**
     * should returns the current configuration of the Search Platform.
     * This is used to display the configuration when using the
     * ./occ fulltextsearch:check command line.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getConfiguration() : array;
    /**
     * Set the wrapper of the currently executed process.
     * Because the index process can be long and heavy, and because errors can
     * be encountered during the process, the IRunner is a wrapper that allow the
     * Search Platform to communicate with the process initiated by
     * FullTextSearch.
     *
     * The IRunner is coming with some methods so the Search Platform can
     * returns important information and errors to be displayed to the admin.
     *
     * @since 15.0.0
     *
     * @param IRunner $runner
     */
    public function setRunner(\OCP\FullTextSearch\Model\IRunner $runner);
    /**
     * Called when FullTextSearch is loading your Search Platform.
     *
     * @since 15.0.0
     */
    public function loadPlatform();
    /**
     * Called to check that your Search Platform is correctly configured and that
     * This is also the right place to check that the Search Service is available.
     *
     * @since 15.0.0
     *
     * @return bool
     */
    public function testPlatform() : bool;
    /**
     * Called before an index is initiated.
     * Best place to initiate some stuff on the Search Server (mapping, ...)
     *
     * @since 15.0.0
     */
    public function initializeIndex();
    /**
     * Reset the indexes for a specific providerId.
     * $providerId can be 'all' if it is a global reset.
     *
     * @since 15.0.0
     *
     * @param string $providerId
     */
    public function resetIndex(string $providerId);
    /**
     * Deleting some IIndex, sent in an array
     *
     * @see IIndex
     *
     * @since 15.0.0
     *
     * @param IIndex[] $indexes
     */
    public function deleteIndexes(array $indexes);
    /**
     * Indexing a document.
     *
     * @see IndexDocument
     *
     * @since 15.0.0
     *
     * @param IIndexDocument $document
     *
     * @return IIndex
     */
    public function indexDocument(\OCP\FullTextSearch\Model\IIndexDocument $document) : \OCP\FullTextSearch\Model\IIndex;
    /**
     * Searching documents, ISearchResult should be updated with the result of
     * the search.
     *
     * @since 15.0.0
     *
     * @param ISearchResult $result
     * @param IDocumentAccess $access
     */
    public function searchRequest(\OCP\FullTextSearch\Model\ISearchResult $result, \OCP\FullTextSearch\Model\IDocumentAccess $access);
    /**
     * Return a document based on its Id and the Provider.
     * This is used when an admin execute ./occ fulltextsearch:document:platform
     *
     * @since 15.0.0
     *
     * @param string $providerId
     * @param string $documentId
     *
     * @return IIndexDocument
     */
    public function getDocument(string $providerId, string $documentId) : \OCP\FullTextSearch\Model\IIndexDocument;
}
/**
 * Interface IFullTextSearchProvider
 *
 * This interface must be use when creating a Content Provider for FullTextSearch.
 *
 * A Content Provider is an extension to the FullTextSearch that will extract and
 * provide content to the FullTextSearch.
 *
 * There is no limit to the number of Content Provider that can be integrated to
 * FullTextSearch. Each Content Provider corresponding to a type of content
 * available in Nextcloud (files, bookmarks, notes, deck cards, mails, ...)
 *
 * Content is split in document identified by an ID and the ID of the Content
 * Provider. The content is indexed by a Search Platform that will returns a
 * documentId as a result on a search request.
 *
 *
 * To oversimplify the mechanism:
 *
 * - When indexing, FullTextSearch will ask for documents to every Content Provider.
 * - On search, results from the Search Platform, identified by documentId, will
 *   be improved by each relative Content Provider.
 *
 *
 * The Content Provider is a PHP class that implement this interface and is defined
 * in appinfo/info.xml of the app that contains that class:
 *
 *    <fulltextsearch>
 *      <provider>OCA\YourApp\YourContentProvider</provider>
 *    </fulltextsearch>
 *
 * Multiple Content Provider can be defined in a single app.
 *
 * @since 15.0.0
 *
 */
interface IFullTextSearchProvider
{
    /**
     * Must returns a unique Id used to identify the Content Provider.
     * Id must contains only alphanumeric chars, with no space.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getId() : string;
    /**
     * Must returns a descriptive name of the Content Provider.
     * This is used in multiple places, so better use a clear display name.
     *
     * @since 15.0.0
     *
     * @return string
     */
    public function getName() : string;
    /**
     * Should returns the current configuration of the Content Provider.
     * This is used to display the configuration when using the
     * ./occ fulltextsearch:check command line.
     *
     * @since 15.0.0
     *
     * @return array
     */
    public function getConfiguration() : array;
    /**
     * Must returns a ISearchTemplate that contains displayable items and
     * available options to users when searching.
     *
     * @see ISearchTemplate
     *
     * @since 15.0.0
     *
     * @return ISearchTemplate
     */
    public function getSearchTemplate() : \OCP\FullTextSearch\Model\ISearchTemplate;
    /**
     * Called when FullTextSearch is loading your Content Provider.
     *
     * @since 15.0.0
     */
    public function loadProvider();
    /**
     * Set the wrapper of the currently executed process.
     * Because the index process can be long and heavy, and because errors can
     * be encountered during the process, the IRunner is a wrapper that allow the
     * Content Provider to communicate with the process initiated by
     * FullTextSearch.
     *
     * The IRunner is coming with some methods so the Content Provider can
     * returns important information and errors to be displayed to the admin.
     *
     * @since 15.0.0
     *
     * @param IRunner $runner
     */
    public function setRunner(\OCP\FullTextSearch\Model\IRunner $runner);
    /**
     * This method is called when the administrator specify options when running
     * the ./occ fulltextsearch:index or ./occ fulltextsearch:live
     *
     * @since 15.0.0
     *
     * @param IIndexOptions $options
     */
    public function setIndexOptions(\OCP\FullTextSearch\Model\IIndexOptions $options);
    /**
     * Allow the provider to generate a list of chunk to split a huge list of
     * indexable documents
     *
     * During the indexing the generateIndexableDocuments method will be called
     * for each entry of the returned array.
     * If the returned array is empty, the generateIndexableDocuments() will be
     * called only once (per user).
     *
     * @since 16.0.0
     *
     * @param string $userId
     *
     * @return string[]
     */
    public function generateChunks(string $userId) : array;
    /**
     * Returns all indexable document for a user as an array of IIndexDocument.
     *
     * There is no need to fill each IIndexDocument with content; at this point,
     * only fill the object with the minimum information to not waste memory while
     * still being able to identify the document it is referring to.
     *
     * FullTextSearch will call 2 other methods of this interface for each
     * IIndexDocument of the array, prior to their indexing:
     *
     * - first, to compare the date of the last index,
     * - then, to fill each IIndexDocument with complete data
     *
     * @see IIndexDocument
     *
     * @since 15.0.0
     *  -> 16.0.0: the parameter "$chunk" was added
     *
     * @param string $userId
     * @param string $chunk
     *
     * @return IIndexDocument[]
     */
    public function generateIndexableDocuments(string $userId, string $chunk) : array;
    /**
     * Called to verify that the document is not already indexed and that the
     * old index is not up-to-date, using the IIndex from
     * IIndexDocument->getIndex()
     *
     * Returning true will not queue the current IIndexDocument to any further
     * operation and will continue on the next element from the list returned by
     * generateIndexableDocuments().
     *
     * @since 15.0.0
     *
     * @param IIndexDocument $document
     *
     * @return bool
     */
    public function isDocumentUpToDate(\OCP\FullTextSearch\Model\IIndexDocument $document) : bool;
    /**
     * Must fill IIndexDocument with all information relative to the document,
     * before its indexing by the Search Platform.
     *
     * Method is called for each element returned previously by
     * generateIndexableDocuments().
     *
     * @see IIndexDocument
     *
     * @since 15.0.0
     *
     * @param IIndexDocument $document
     */
    public function fillIndexDocument(\OCP\FullTextSearch\Model\IIndexDocument $document);
    /**
     * The Search Provider must create and return an IIndexDocument
     * based on the IIndex and its status. The IIndexDocument must contains all
     * information as it will be send for indexing.
     *
     * Method is called during a cron or a ./occ fulltextsearch:live after a
     * new document is created, or an old document is set as modified.
     *
     * @since 15.0.0
     *
     * @param IIndex $index
     *
     * @return IIndexDocument
     */
    public function updateDocument(\OCP\FullTextSearch\Model\IIndex $index) : \OCP\FullTextSearch\Model\IIndexDocument;
    /**
     * Called when an index is initiated by the administrator.
     * This is should only be used in case of a specific mapping is needed.
     * (ie. _almost_ never)
     *
     * @since 15.0.0
     *
     * @param IFullTextSearchPlatform $platform
     */
    public function onInitializingIndex(\OCP\FullTextSearch\IFullTextSearchPlatform $platform);
    /**
     * Called when administrator is resetting the index.
     * This is should only be used in case of a specific mapping has been
     * created.
     *
     * @since 15.0.0
     *
     * @param IFullTextSearchPlatform $platform
     */
    public function onResettingIndex(\OCP\FullTextSearch\IFullTextSearchPlatform $platform);
    /**
     * Method is called when a search request is initiated by a user, prior to
     * be sent to the Search Platform.
     *
     * Your Content Provider can interact with the ISearchRequest to apply the
     * search options and make the search more precise.
     *
     * @see ISearchRequest
     *
     * @since 15.0.0
     *
     * @param ISearchRequest $searchRequest
     */
    public function improveSearchRequest(\OCP\FullTextSearch\Model\ISearchRequest $searchRequest);
    /**
     * Method is called after results of a search are returned by the
     * Search Platform.
     *
     * Your Content Provider can detail each entry with local data to improve
     * the display of the search result.
     *
     * @see ISearchResult
     *
     * @since 15.0.0
     *
     * @param ISearchResult $searchResult
     */
    public function improveSearchResult(\OCP\FullTextSearch\Model\ISearchResult $searchResult);
    /**
     * not used yet.
     *
     * @since 15.0.0
     */
    public function unloadProvider();
}
namespace OCP\GlobalScale;

/**
 * Interface IConfig
 *
 * Configuration of the global scale architecture
 *
 * @since 12.0.1
 */
interface IConfig
{
    /**
     * check if global scale is enabled
     *
     * @since 12.0.1
     * @return bool
     */
    public function isGlobalScaleEnabled();
    /**
     * check if federation should only be used internally in a global scale setup
     *
     * @since 12.0.1
     * @return bool
     */
    public function onlyInternalFederation();
}
namespace OCP\Group\Backend;

/**
 * @since 16.0.0
 *
 * Allow the backend to mark groups to be excluded from being shown in search dialogs
 */
interface IHideFromCollaborationBackend
{
    /**
     * Check if a group should be hidden from search dialogs
     *
     * @param string $groupId
     * @return bool
     * @since 16.0.0
     */
    public function hideGroup(string $groupId) : bool;
}
namespace OCP;

/**
 * TODO actually this is a IGroupBackend
 *
 * @since 4.5.0
 */
interface GroupInterface
{
    /**
     * actions that user backends can define
     */
    public const CREATE_GROUP = 0x1;
    public const DELETE_GROUP = 0x10;
    public const ADD_TO_GROUP = 0x100;
    public const REMOVE_FROM_GOUP = 0x1000;
    // oops
    public const REMOVE_FROM_GROUP = 0x1000;
    //OBSOLETE const GET_DISPLAYNAME	= 0x00010000;
    public const COUNT_USERS = 0x100000;
    public const GROUP_DETAILS = 0x1000000;
    /**
     * @since 13.0.0
     */
    public const IS_ADMIN = 0x10000000;
    /**
     * Check if backend implements actions
     * @param int $actions bitwise-or'ed actions
     * @return boolean
     * @since 4.5.0
     *
     * Returns the supported actions as int to be
     * compared with \OC_Group_Backend::CREATE_GROUP etc.
     */
    public function implementsActions($actions);
    /**
     * is user in group?
     * @param string $uid uid of the user
     * @param string $gid gid of the group
     * @return bool
     * @since 4.5.0
     *
     * Checks whether the user is member of a group or not.
     */
    public function inGroup($uid, $gid);
    /**
     * Get all groups a user belongs to
     * @param string $uid Name of the user
     * @return array an array of group names
     * @since 4.5.0
     *
     * This function fetches all groups a user belongs to. It does not check
     * if the user exists at all.
     */
    public function getUserGroups($uid);
    /**
     * get a list of all groups
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @return array an array of group names
     * @since 4.5.0
     *
     * Returns a list with all groups
     */
    public function getGroups(string $search = '', int $limit = -1, int $offset = 0);
    /**
     * check if a group exists
     * @param string $gid
     * @return bool
     * @since 4.5.0
     */
    public function groupExists($gid);
    /**
     * @brief Get a list of user ids in a group matching the given search parameters.
     *
     * @param string $gid
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @return array<int,string> an array of user ids
     * @since 4.5.0
     * @deprecated 27.0.0 Use searchInGroup instead, for performance reasons
     */
    public function usersInGroup($gid, $search = '', $limit = -1, $offset = 0);
}
namespace OCP\Group\Backend;

/**
 * @since 14.0.0
 */
abstract class ABackend implements \OCP\GroupInterface
{
    /**
     * @deprecated 14.0.0
     * @since 14.0.0
     *
     * @param int $actions The action to check for
     * @return bool
     */
    public function implementsActions($actions) : bool
    {
    }
}
/**
 * @since 14.0.0
 */
interface IAddToGroupBackend
{
    /**
     * @since 14.0.0
     */
    public function addToGroup(string $uid, string $gid) : bool;
}
/**
 * @since 14.0.0
 */
interface ICountDisabledInGroup
{
    /**
     * @since 14.0.0
     */
    public function countDisabledInGroup(string $gid) : int;
}
/**
 * @since 14.0.0
 */
interface ICountUsersBackend
{
    /**
     * @since 14.0.0
     */
    public function countUsersInGroup(string $gid, string $search = '') : int;
}
/**
 * @since 14.0.0
 */
interface ICreateGroupBackend
{
    /**
     * @since 14.0.0
     */
    public function createGroup(string $gid) : bool;
}
/**
 * @since 14.0.0
 */
interface IDeleteGroupBackend
{
    /**
     * @since 14.0.0
     */
    public function deleteGroup(string $gid) : bool;
}
/**
 * @since 17.0.0
 */
interface IGetDisplayNameBackend
{
    /**
     * @param string $gid
     * @return string
     * @since 17.0.0
     */
    public function getDisplayName(string $gid) : string;
}
/**
 * @since 14.0.0
 */
interface IGroupDetailsBackend
{
    /**
     * @since 14.0.0
     */
    public function getGroupDetails(string $gid) : array;
}
/**
 * @since 14.0.0
 */
interface IIsAdminBackend
{
    /**
     * @since 14.0.0
     */
    public function isAdmin(string $uid) : bool;
}
/**
 * @since 22.0.0
 */
interface INamedBackend
{
    /**
     * Backend name to be shown in group management
     * @return string the name of the backend to be shown
     * @since 22.0.0
     */
    public function getBackendName() : string;
}
/**
 * @since 14.0.0
 */
interface IRemoveFromGroupBackend
{
    /**
     * @since 14.0.0
     */
    public function removeFromGroup(string $uid, string $gid);
}
/**
 * @since 18.0.0
 */
interface ISetDisplayNameBackend
{
    /**
     * @param string $gid
     * @param string $displayName
     * @return bool
     * @since 18.0.0
     */
    public function setDisplayName(string $gid, string $displayName) : bool;
}
/**
 * @since 27.0.0
 */
interface ISearchableGroupBackend
{
    /**
     * @brief Get a list of users matching the given search parameters.
     *
     * Implementations of this method should return lazy evaluated user objects and
     * preload if possible the display name.
     *
     * <code>
     * $users = $groupBackend->searchInGroup('admin', 'John', 10, 0);
     * </code>
     *
     * @param string $gid    The group id of the user we want to search
     * @param string $search The part of the display name or user id of the users we
     *                       want to search. This can be empty to get all the users.
     * @param int $limit     The limit of results
     * @param int $offset    The offset of the results
     * @return array<string,IUser> Users indexed by uid
     * @since 27.0.0
     */
    public function searchInGroup(string $gid, string $search = '', int $limit = -1, int $offset = 0) : array;
}
namespace OCP\Group\Events;

/**
 * @since 26.0.0
 */
class BeforeGroupChangedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 26.0.0
     */
    public function __construct(\OCP\IGroup $group, string $feature, $value, $oldValue = null)
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return IGroup
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return string
     */
    public function getFeature() : string
    {
    }
    /**
     * @since 26.0.0
     *
     * @return mixed
     */
    public function getValue()
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return mixed
     */
    public function getOldValue()
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeGroupCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(string $name)
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getName() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeGroupDeletedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeUserAddedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 18.0.0
 * @deprecated 20.0.0 - it can't be guaranteed that this event is triggered in
 * all case (e.g. for LDAP users this isn't possible) - if there is a valid use
 * case please reach out in the issue tracker at
 * https://github.com/nextcloud/server/issues
 */
class BeforeUserRemovedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     * @deprecated 20.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     * @deprecated 20.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     * @deprecated 20.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 26.0.0
 */
class GroupChangedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 26.0.0
     */
    public function __construct(\OCP\IGroup $group, string $feature, $value, $oldValue = null)
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return IGroup
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return string
     */
    public function getFeature() : string
    {
    }
    /**
     * @since 26.0.0
     *
     * @return mixed
     */
    public function getValue()
    {
    }
    /**
     *
     * @since 26.0.0
     *
     * @return mixed
     */
    public function getOldValue()
    {
    }
}
/**
 * @since 18.0.0
 */
class GroupCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
}
/**
 * @since 18.0.0
 */
class GroupDeletedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
}
/**
 * @since 21.0.0
 */
class SubAdminAddedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 21.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @since 21.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @since 21.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 21.0.0
 */
class SubAdminRemovedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 21.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @since 21.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @since 21.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 18.0.0
 */
class UserAddedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 18.0.0
 */
class UserRemovedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IGroup $group, \OCP\IUser $user)
    {
    }
    /**
     * @return IGroup
     * @since 18.0.0
     */
    public function getGroup() : \OCP\IGroup
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
namespace OCP\Group;

/**
 * @since 16.0.0
 */
interface ISubAdmin
{
    /**
     * add a SubAdmin
     * @param IUser $user user to be SubAdmin
     * @param IGroup $group group $user becomes subadmin of
     *
     * @since 16.0.0
     */
    public function createSubAdmin(\OCP\IUser $user, \OCP\IGroup $group) : void;
    /**
     * delete a SubAdmin
     * @param IUser $user the user that is the SubAdmin
     * @param IGroup $group the group
     *
     * @since 16.0.0
     */
    public function deleteSubAdmin(\OCP\IUser $user, \OCP\IGroup $group) : void;
    /**
     * get groups of a SubAdmin
     * @param IUser $user the SubAdmin
     * @return IGroup[]
     *
     * @since 16.0.0
     */
    public function getSubAdminsGroups(\OCP\IUser $user) : array;
    /**
     * get SubAdmins of a group
     * @param IGroup $group the group
     * @return IUser[]
     *
     * @since 16.0.0
     */
    public function getGroupsSubAdmins(\OCP\IGroup $group) : array;
    /**
     * checks if a user is a SubAdmin of a group
     * @param IUser $user
     * @param IGroup $group
     * @return bool
     *
     * @since 16.0.0
     */
    public function isSubAdminOfGroup(\OCP\IUser $user, \OCP\IGroup $group) : bool;
    /**
     * checks if a user is a SubAdmin
     * @param IUser $user
     * @return bool
     *
     * @since 16.0.0
     */
    public function isSubAdmin(\OCP\IUser $user) : bool;
    /**
     * checks if a user is a accessible by a subadmin
     * @param IUser $subadmin
     * @param IUser $user
     * @return bool
     *
     * @since 16.0.0
     */
    public function isUserAccessible(\OCP\IUser $subadmin, \OCP\IUser $user) : bool;
}
namespace OCP\Http\Client;

/**
 * Interface IClientService
 *
 * @since 8.1.0
 */
interface IClientService
{
    /**
     * @return IClient
     * @since 8.1.0
     */
    public function newClient() : \OCP\Http\Client\IClient;
}
/**
 * Interface IResponse
 *
 * @since 8.1.0
 */
interface IResponse
{
    /**
     * @return string|resource
     * @since 8.1.0
     */
    public function getBody();
    /**
     * @return int
     * @since 8.1.0
     */
    public function getStatusCode() : int;
    /**
     * @param string $key
     * @return string
     * @since 8.1.0
     */
    public function getHeader(string $key) : string;
    /**
     * @return array
     * @since 8.1.0
     */
    public function getHeaders() : array;
}
/**
 * @since 19.0.0
 */
class LocalServerException extends \RuntimeException
{
}
/**
 * Interface IClient
 *
 * @since 8.1.0
 */
interface IClient
{
    /**
     * Sends a GET request
     * @param string $uri
     * @param array $options Array such as
     *              'query' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function get(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends a HEAD request
     * @param string $uri
     * @param array $options Array such as
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function head(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends a POST request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function post(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends a PUT request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function put(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends a DELETE request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function delete(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends an OPTIONS request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IResponse
     * @throws \Exception If the request could not get completed
     * @since 8.1.0
     */
    public function options(string $uri, array $options = []) : \OCP\Http\Client\IResponse;
    /**
     * Sends an asynchronous GET request
     * @param string $uri
     * @param array $options Array such as
     *              'query' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function getAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
    /**
     * Sends an asynchronous HEAD request
     * @param string $uri
     * @param array $options Array such as
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function headAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
    /**
     * Sends an asynchronous POST request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function postAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
    /**
     * Sends an asynchronous PUT request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function putAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
    /**
     * Sends an asynchronous DELETE request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function deleteAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
    /**
     * Sends an asynchronous OPTIONS request
     * @param string $uri
     * @param array $options Array such as
     *              'body' => [
     *                  'field' => 'abc',
     *                  'other_field' => '123',
     *                  'file_name' => fopen('/path/to/file', 'r'),
     *              ],
     *              'headers' => [
     *                  'foo' => 'bar',
     *              ],
     *              'cookies' => [
     *                  'foo' => 'bar',
     *              ],
     *              'allow_redirects' => [
     *                   'max'       => 10,  // allow at most 10 redirects.
     *                   'strict'    => true,     // use "strict" RFC compliant redirects.
     *                   'referer'   => true,     // add a Referer header
     *                   'protocols' => ['https'] // only allow https URLs
     *              ],
     *              'sink' => '/path/to/file', // save to a file or a stream
     *              'verify' => true, // bool or string to CA file
     *              'debug' => true,
     * @return IPromise
     * @since 28.0.0
     */
    public function optionsAsync(string $uri, array $options = []) : \OCP\Http\Client\IPromise;
}
/**
 * A wrapper around Guzzle's PromiseInterface
 * @see \GuzzleHttp\Promise\PromiseInterface
 * @since 28.0.0
 */
interface IPromise
{
    /**
     * @since 28.0.0
     */
    public const STATE_PENDING = 'pending';
    /**
     * @since 28.0.0
     */
    public const STATE_FULFILLED = 'fulfilled';
    /**
     * @since 28.0.0
     */
    public const STATE_REJECTED = 'rejected';
    /**
     * Appends fulfillment and rejection handlers to the promise, and returns
     * a new promise resolving to the return value of the called handler.
     *
     * @param ?callable(IResponse): void $onFulfilled Invoked when the promise fulfills. Gets an \OCP\Http\Client\IResponse passed in as argument
     * @param ?callable(Exception): void $onRejected  Invoked when the promise is rejected. Gets an \Exception passed in as argument
     *
     * @return IPromise
     * @since 28.0.0
     */
    public function then(?callable $onFulfilled = null, ?callable $onRejected = null) : \OCP\Http\Client\IPromise;
    /**
     * Get the state of the promise ("pending", "rejected", or "fulfilled").
     *
     * The three states can be checked against the constants defined:
     * STATE_PENDING, STATE_FULFILLED, and STATE_REJECTED.
     *
     * @return self::STATE_*
     * @since 28.0.0
     */
    public function getState() : string;
    /**
     * Cancels the promise if possible.
     *
     * @link https://github.com/promises-aplus/cancellation-spec/issues/7
     * @since 28.0.0
     */
    public function cancel() : void;
    /**
     * Waits until the promise completes if possible.
     *
     * Pass $unwrap as true to unwrap the result of the promise, either
     * returning the resolved value or throwing the rejected exception.
     *
     * If the promise cannot be waited on, then the promise will be rejected.
     *
     * @param bool $unwrap
     *
     * @return mixed
     *
     * @throws LogicException if the promise has no wait function or if the
     *                         promise does not settle after waiting.
     * @since 28.0.0
     */
    public function wait(bool $unwrap = true) : mixed;
}
namespace OCP\Http\WellKnown;

/**
 * @since 21.0.0
 */
interface IResponse
{
    /**
     * @since 21.0.0
     */
    public function toHttpResponse() : \OCP\AppFramework\Http\Response;
}
/**
 * @since 21.0.0
 */
final class GenericResponse implements \OCP\Http\WellKnown\IResponse
{
    /**
     * @since 21.0.0
     */
    public function __construct(\OCP\AppFramework\Http\Response $response)
    {
    }
    /**
     * @since 21.0.0
     */
    public function toHttpResponse() : \OCP\AppFramework\Http\Response
    {
    }
}
/**
 * Interface for an app handler that reacts to requests to Nextcloud's well
 * known URLs, e.g. to a WebFinger
 *
 * @ref https://tools.ietf.org/html/rfc5785
 *
 * @since 21.0.0
 */
interface IHandler
{
    /**
     * @param string $service the name of the well known service, e.g. 'webfinger'
     * @param IRequestContext $context
     * @param IResponse|null $previousResponse the response of the previous handler, if any
     *
     * @return IResponse|null a response object if the request could be handled, null otherwise
     *
     * @since 21.0.0
     */
    public function handle(string $service, \OCP\Http\WellKnown\IRequestContext $context, ?\OCP\Http\WellKnown\IResponse $previousResponse) : ?\OCP\Http\WellKnown\IResponse;
}
/**
 * The context object for \OCP\Http\IWellKnownHandler::handle
 *
 * Objects of this type will transport any optional information, e.g. the request
 * object through which the app well known handler can obtain URL parameters
 *
 * @since 21.0.0
 */
interface IRequestContext
{
    /**
     * @return IRequest
     *
     * @since 21.0.0
     */
    public function getHttpRequest() : \OCP\IRequest;
}
/**
 * A JSON Document Format (JDF) response to a well-known request
 *
 * @ref https://tools.ietf.org/html/rfc6415#appendix-A
 * @ref https://tools.ietf.org/html/rfc7033#section-4.4
 *
 * @since 21.0.0
 */
final class JrdResponse implements \OCP\Http\WellKnown\IResponse
{
    /**
     * @param string $subject https://tools.ietf.org/html/rfc7033#section-4.4.1
     *
     * @since 21.0.0
     */
    public function __construct(string $subject)
    {
    }
    /**
     * @param string $expires
     *
     * @return $this
     *
     * @since 21.0.0
     */
    public function setExpires(string $expires) : self
    {
    }
    /**
     * Add an alias
     *
     * @ref https://tools.ietf.org/html/rfc7033#section-4.4.2
     *
     * @param string $alias
     *
     * @return $this
     *
     * @since 21.0.0
     */
    public function addAlias(string $alias) : self
    {
    }
    /**
     * Add a property
     *
     * @ref https://tools.ietf.org/html/rfc7033#section-4.4.3
     *
     * @param string $property
     * @param string|null $value
     *
     * @return $this
     *
     * @since 21.0.0
     */
    public function addProperty(string $property, ?string $value) : self
    {
    }
    /**
     * Add a link
     *
     * @ref https://tools.ietf.org/html/rfc7033#section-8.4
     *
     * @param string $rel https://tools.ietf.org/html/rfc7033#section-4.4.4.1
     * @param string|null $type https://tools.ietf.org/html/rfc7033#section-4.4.4.2
     * @param string|null $href https://tools.ietf.org/html/rfc7033#section-4.4.4.3
     * @param string[]|null $titles https://tools.ietf.org/html/rfc7033#section-4.4.4.4
     * @param string|null $properties https://tools.ietf.org/html/rfc7033#section-4.4.4.5
     *
     * @psalm-param array<string,(string|null)>|null $properties https://tools.ietf.org/html/rfc7033#section-4.4.4.5
     *
     * @return JrdResponse
     * @since 21.0.0
     */
    public function addLink(string $rel, ?string $type, ?string $href, ?array $titles = [], ?array $properties = []) : self
    {
    }
    /**
     * @since 21.0.0
     */
    public function toHttpResponse() : \OCP\AppFramework\Http\Response
    {
    }
    /**
     * Does this response have any data attached to it?
     *
     * @since 21.0.0
     */
    public function isEmpty() : bool
    {
    }
}
namespace OCP;

/**
 * Service that find the binary path for a program.
 *
 * This interface should be injected via depency injection and must
 * not be implemented in applications.
 *
 * @since 25.0.0
 */
interface IBinaryFinder
{
    /**
     * Try to find a program
     *
     * @return false|string
     * @since 25.0.0
     */
    public function findBinaryPath(string $program);
}
/**
 * Interface ICacheFactory
 *
 * @since 7.0.0
 */
interface ICacheFactory
{
    /**
     * Check if any memory cache backend is available
     *
     * @return bool
     * @since 7.0.0
     */
    public function isAvailable() : bool;
    /**
     * Check if a local memory cache backend is available
     *
     * @return bool
     * @since 14.0.0
     */
    public function isLocalCacheAvailable() : bool;
    /**
     * create a cache instance for storing locks
     *
     * @param string $prefix
     * @return IMemcache
     * @since 13.0.0
     */
    public function createLocking(string $prefix = '') : \OCP\IMemcache;
    /**
     * create a distributed cache instance
     *
     * @param string $prefix
     * @return ICache
     * @since 13.0.0
     */
    public function createDistributed(string $prefix = '') : \OCP\ICache;
    /**
     * create a local cache instance
     *
     * @param string $prefix
     * @return ICache
     * @since 13.0.0
     */
    public function createLocal(string $prefix = '') : \OCP\ICache;
}
/**
 * Interface ICertificate
 *
 * @since 8.0.0
 */
interface ICertificate
{
    /**
     * @return string
     * @since 8.0.0
     */
    public function getName() : string;
    /**
     * @return string|null
     * @since 8.0.0
     */
    public function getCommonName() : ?string;
    /**
     * @return string|null
     * @since 8.0.0
     */
    public function getOrganization() : ?string;
    /**
     * @return \DateTime
     * @since 8.0.0
     */
    public function getIssueDate() : \DateTime;
    /**
     * @return \DateTime
     * @since 8.0.0
     */
    public function getExpireDate() : \DateTime;
    /**
     * @return bool
     * @since 8.0.0
     */
    public function isExpired() : bool;
    /**
     * @return string|null
     * @since 8.0.0
     */
    public function getIssuerName() : ?string;
    /**
     * @return string|null
     * @since 8.0.0
     */
    public function getIssuerOrganization() : ?string;
}
/**
 * Manage trusted certificates
 * @since 8.0.0
 */
interface ICertificateManager
{
    /**
     * Returns all certificates trusted by the system
     *
     * @return \OCP\ICertificate[]
     * @since 8.0.0
     */
    public function listCertificates() : array;
    /**
     * @param string $certificate the certificate data
     * @param string $name the filename for the certificate
     * @return \OCP\ICertificate
     * @throws \Exception If the certificate could not get added
     * @since 8.0.0 - since 8.1.0 throws exception instead of returning false
     */
    public function addCertificate(string $certificate, string $name) : \OCP\ICertificate;
    /**
     * @param string $name
     * @return bool
     * @since 8.0.0
     */
    public function removeCertificate(string $name) : bool;
    /**
     * Get the path to the certificate bundle
     *
     * @return string
     * @since 8.0.0
     */
    public function getCertificateBundle() : string;
    /**
     * Get the full local path to the certificate bundle
     *
     * @return string
     * @since 9.0.0
     */
    public function getAbsoluteBundlePath() : string;
}
/**
 * Access to all the configuration options Nextcloud offers.
 * @since 6.0.0
 */
interface IConfig
{
    /**
     * @since 8.2.0
     */
    public const SENSITIVE_VALUE = '***REMOVED SENSITIVE VALUE***';
    /**
     * Sets and deletes system wide values
     *
     * @param array $configs Associative array with `key => value` pairs
     *                       If value is null, the config key will be deleted
     * @throws HintException if config file is read-only
     * @since 8.0.0
     */
    public function setSystemValues(array $configs);
    /**
     * Sets a new system wide value
     *
     * @param string $key the key of the value, under which will be saved
     * @param mixed $value the value that should be stored
     * @throws HintException if config file is read-only
     * @since 8.0.0
     */
    public function setSystemValue($key, $value);
    /**
     * Looks up a system wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @param mixed $default the default value to be returned if the value isn't set
     * @return mixed the value or $default
     * @since 6.0.0 - parameter $default was added in 7.0.0
     */
    public function getSystemValue($key, $default = '');
    /**
     * Looks up a boolean system wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @param bool $default the default value to be returned if the value isn't set
     * @return bool the value or $default
     * @since 16.0.0
     */
    public function getSystemValueBool(string $key, bool $default = false) : bool;
    /**
     * Looks up an integer system wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @param int $default the default value to be returned if the value isn't set
     * @return int the value or $default
     * @since 16.0.0
     */
    public function getSystemValueInt(string $key, int $default = 0) : int;
    /**
     * Looks up a string system wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @param string $default the default value to be returned if the value isn't set
     * @return string the value or $default
     * @since 16.0.0
     */
    public function getSystemValueString(string $key, string $default = '') : string;
    /**
     * Looks up a system wide defined value and filters out sensitive data
     *
     * @param string $key the key of the value, under which it was saved
     * @param mixed $default the default value to be returned if the value isn't set
     * @return mixed the value or $default
     * @since 8.2.0
     */
    public function getFilteredSystemValue($key, $default = '');
    /**
     * Delete a system wide defined value
     *
     * @param string $key the key of the value, under which it was saved
     * @since 8.0.0
     */
    public function deleteSystemValue($key);
    /**
     * Get all keys stored for an app
     *
     * @param string $appName the appName that we stored the value under
     * @return string[] the keys stored for the app
     * @since 8.0.0
     */
    public function getAppKeys($appName);
    /**
     * Writes a new app wide value
     *
     * @param string $appName the appName that we want to store the value under
     * @param string|float|int $key the key of the value, under which will be saved
     * @param string $value the value that should be stored
     * @return void
     * @since 6.0.0
     */
    public function setAppValue($appName, $key, $value);
    /**
     * Looks up an app wide defined value
     *
     * @param string $appName the appName that we stored the value under
     * @param string $key the key of the value, under which it was saved
     * @param string $default the default value to be returned if the value isn't set
     * @return string the saved value
     * @since 6.0.0 - parameter $default was added in 7.0.0
     */
    public function getAppValue($appName, $key, $default = '');
    /**
     * Delete an app wide defined value
     *
     * @param string $appName the appName that we stored the value under
     * @param string $key the key of the value, under which it was saved
     * @since 8.0.0
     */
    public function deleteAppValue($appName, $key);
    /**
     * Removes all keys in appconfig belonging to the app
     *
     * @param string $appName the appName the configs are stored under
     * @since 8.0.0
     */
    public function deleteAppValues($appName);
    /**
     * Set a user defined value
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $appName the appName that we want to store the value under
     * @param string $key the key under which the value is being stored
     * @param string $value the value that you want to store
     * @param string $preCondition only update if the config value was previously the value passed as $preCondition
     * @throws \OCP\PreConditionNotMetException if a precondition is specified and is not met
     * @throws \UnexpectedValueException when trying to store an unexpected value
     * @since 6.0.0 - parameter $precondition was added in 8.0.0
     */
    public function setUserValue($userId, $appName, $key, $value, $preCondition = null);
    /**
     * Shortcut for getting a user defined value
     *
     * @param ?string $userId the userId of the user that we want to store the value under
     * @param string $appName the appName that we stored the value under
     * @param string $key the key under which the value is being stored
     * @param mixed $default the default value to be returned if the value isn't set
     * @return string
     * @since 6.0.0 - parameter $default was added in 7.0.0
     */
    public function getUserValue($userId, $appName, $key, $default = '');
    /**
     * Fetches a mapped list of userId -> value, for a specified app and key and a list of user IDs.
     *
     * @param string $appName app to get the value for
     * @param string $key the key to get the value for
     * @param array $userIds the user IDs to fetch the values for
     * @return array Mapped values: userId => value
     * @since 8.0.0
     */
    public function getUserValueForUsers($appName, $key, $userIds);
    /**
     * Get the keys of all stored by an app for the user
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $appName the appName that we stored the value under
     * @return string[]
     * @since 8.0.0
     */
    public function getUserKeys($userId, $appName);
    /**
     * Get all user configs sorted by app of one user
     *
     * @param string $userId the userId of the user that we want to get all values from
     * @psalm-return array<string, array<string, string>>
     * @return array[] - 2 dimensional array with the following structure:
     *     [ $appId =>
     *         [ $key => $value ]
     *     ]
     * @since 24.0.0
     */
    public function getAllUserValues(string $userId) : array;
    /**
     * Delete a user value
     *
     * @param string $userId the userId of the user that we want to store the value under
     * @param string $appName the appName that we stored the value under
     * @param string $key the key under which the value is being stored
     * @since 8.0.0
     */
    public function deleteUserValue($userId, $appName, $key);
    /**
     * Delete all user values
     *
     * @param string $userId the userId of the user that we want to remove all values from
     * @since 8.0.0
     */
    public function deleteAllUserValues($userId);
    /**
     * Delete all user related values of one app
     *
     * @param string $appName the appName of the app that we want to remove all values from
     * @since 8.0.0
     */
    public function deleteAppFromAllUsers($appName);
    /**
     * Determines the users that have the given value set for a specific app-key-pair
     *
     * @param string $appName the app to get the user for
     * @param string $key the key to get the user for
     * @param string $value the value to get the user for
     * @return array of user IDs
     * @since 8.0.0
     */
    public function getUsersForUserValue($appName, $key, $value);
}
/**
 * Interface IDateTimeFormatter
 *
 * @since 8.0.0
 */
interface IDateTimeFormatter
{
    /**
     * Formats the date of the given timestamp
     *
     * @param int|\DateTime		$timestamp
     * @param string	$format			Either 'full', 'long', 'medium' or 'short'
     * 				full:	e.g. 'EEEE, MMMM d, y'	=> 'Wednesday, August 20, 2014'
     * 				long:	e.g. 'MMMM d, y'		=> 'August 20, 2014'
     * 				medium:	e.g. 'MMM d, y'			=> 'Aug 20, 2014'
     * 				short:	e.g. 'M/d/yy'			=> '8/20/14'
     * 				The exact format is dependent on the language
     * @param \DateTimeZone|null	$timeZone	The timezone to use
     * @param \OCP\IL10N|null	$l			The locale to use
     * @return string Formatted date string
     * @since 8.0.0
     */
    public function formatDate($timestamp, $format = 'long', \DateTimeZone $timeZone = null, \OCP\IL10N $l = null);
    /**
     * Formats the date of the given timestamp
     *
     * @param int|\DateTime		$timestamp
     * @param string	$format			Either 'full', 'long', 'medium' or 'short'
     * 				full:	e.g. 'EEEE, MMMM d, y'	=> 'Wednesday, August 20, 2014'
     * 				long:	e.g. 'MMMM d, y'		=> 'August 20, 2014'
     * 				medium:	e.g. 'MMM d, y'			=> 'Aug 20, 2014'
     * 				short:	e.g. 'M/d/yy'			=> '8/20/14'
     * 				The exact format is dependent on the language
     * 					Uses 'Today', 'Yesterday' and 'Tomorrow' when applicable
     * @param \DateTimeZone|null	$timeZone	The timezone to use
     * @param \OCP\IL10N|null	$l			The locale to use
     * @return string Formatted relative date string
     * @since 8.0.0
     */
    public function formatDateRelativeDay($timestamp, $format = 'long', \DateTimeZone $timeZone = null, \OCP\IL10N $l = null);
    /**
     * Gives the relative date of the timestamp
     * Only works for past dates
     *
     * @param int|\DateTime	$timestamp
     * @param int|\DateTime|null	$baseTimestamp	Timestamp to compare $timestamp against, defaults to current time
     * @param \OCP\IL10N|null		$l			The locale to use
     * @return string	Dates returned are:
     * 				<  1 month	=> Today, Yesterday, n days ago
     * 				< 13 month	=> last month, n months ago
     * 				>= 13 month	=> last year, n years ago
     * @since 8.0.0
     */
    public function formatDateSpan($timestamp, $baseTimestamp = null, \OCP\IL10N $l = null);
    /**
     * Formats the time of the given timestamp
     *
     * @param int|\DateTime $timestamp
     * @param string	$format			Either 'full', 'long', 'medium' or 'short'
     * 				full:	e.g. 'h:mm:ss a zzzz'	=> '11:42:13 AM GMT+0:00'
     * 				long:	e.g. 'h:mm:ss a z'		=> '11:42:13 AM GMT'
     * 				medium:	e.g. 'h:mm:ss a'		=> '11:42:13 AM'
     * 				short:	e.g. 'h:mm a'			=> '11:42 AM'
     * 				The exact format is dependent on the language
     * @param \DateTimeZone|null	$timeZone	The timezone to use
     * @param \OCP\IL10N|null		$l			The locale to use
     * @return string Formatted time string
     * @since 8.0.0
     */
    public function formatTime($timestamp, $format = 'medium', \DateTimeZone $timeZone = null, \OCP\IL10N $l = null);
    /**
     * Gives the relative past time of the timestamp
     *
     * @param int|\DateTime	$timestamp
     * @param int|\DateTime|null	$baseTimestamp	Timestamp to compare $timestamp against, defaults to current time
     * @param \OCP\IL10N|null		$l			The locale to use
     * @return string	Dates returned are:
     * 				< 60 sec	=> seconds ago
     * 				<  1 hour	=> n minutes ago
     * 				<  1 day	=> n hours ago
     * 				<  1 month	=> Yesterday, n days ago
     * 				< 13 month	=> last month, n months ago
     * 				>= 13 month	=> last year, n years ago
     * @since 8.0.0
     */
    public function formatTimeSpan($timestamp, $baseTimestamp = null, \OCP\IL10N $l = null);
    /**
     * Formats the date and time of the given timestamp
     *
     * @param int|\DateTime $timestamp
     * @param string	$formatDate		See formatDate() for description
     * @param string	$formatTime		See formatTime() for description
     * @param \DateTimeZone|null	$timeZone	The timezone to use
     * @param \OCP\IL10N|null		$l			The locale to use
     * @return string Formatted date and time string
     * @since 8.0.0
     */
    public function formatDateTime($timestamp, $formatDate = 'long', $formatTime = 'medium', \DateTimeZone $timeZone = null, \OCP\IL10N $l = null);
    /**
     * Formats the date and time of the given timestamp
     *
     * @param int|\DateTime $timestamp
     * @param string	$formatDate		See formatDate() for description
     * 					Uses 'Today', 'Yesterday' and 'Tomorrow' when applicable
     * @param string	$formatTime		See formatTime() for description
     * @param \DateTimeZone|null	$timeZone	The timezone to use
     * @param \OCP\IL10N|null		$l			The locale to use
     * @return string Formatted relative date and time string
     * @since 8.0.0
     */
    public function formatDateTimeRelativeDay($timestamp, $formatDate = 'long', $formatTime = 'medium', \DateTimeZone $timeZone = null, \OCP\IL10N $l = null);
}
/**
 * Interface IDateTimeZone
 *
 * @since 8.0.0
 */
interface IDateTimeZone
{
    /**
     * @param bool|int $timestamp
     * @return \DateTimeZone
     * @since 8.0.0 - parameter $timestamp was added in 8.1.0
     */
    public function getTimeZone($timestamp = false);
}
/**
 * @since 24.0.0
 */
interface IEmojiHelper
{
    /**
     * @since 24.0.0
     */
    public function doesPlatformSupportEmoji() : bool;
    /**
     * @since 24.0.0
     */
    public function isValidSingleEmoji(string $emoji) : bool;
}
/**
 * wrapper for server side events (http://en.wikipedia.org/wiki/Server-sent_events)
 * includes a fallback for older browsers and IE
 *
 * use server side events with caution, to many open requests can hang the server
 *
 * The event source will initialize the connection to the client when the first data is sent
 * @since 8.0.0
 */
interface IEventSource
{
    /**
     * send a message to the client
     *
     * @param string $type One of success, notice, error, failure and done. Used in core/js/update.js
     * @param mixed $data
     *
     * if only one parameter is given, a typeless message will be send with that parameter as data
     * @since 8.0.0
     */
    public function send($type, $data = null);
    /**
     * close the connection of the event source
     * @since 8.0.0
     */
    public function close();
}
/**
 * @since 16.0.0
 * @deprecated 21 Use OCP\AppFramework\Services\IInitialState or OCP\AppFramework\Services\InitialStateProvider
 * @see \OCP\AppFramework\Services\IInitialState
 */
interface IInitialStateService
{
    /**
     * Allows an app to provide its initial state to the template system.
     * Use this if you know your initial state sill be used for example if
     * you are in the render function of you controller.
     *
     * @since 16.0.0
     *
     * @param string $appName
     * @param string $key
     * @param bool|int|float|string|array|\JsonSerializable $data
     *
     * @deprecated 21 Use OCP\AppFramework\Services\IInitialState or OCP\AppFramework\Services\InitialStateProvider
     * @see \OCP\AppFramework\Services\IInitialState::provideInitialState()
     */
    public function provideInitialState(string $appName, string $key, $data) : void;
    /**
     * Allows an app to provide its initial state via a lazy method.
     * This will call the closure when the template is being generated.
     * Use this if your app is injected into pages. Since then the render method
     * is not called explicitly. But we do not want to load the state on webdav
     * requests for example.
     *
     * @since 16.0.0
     *
     * @param string $appName
     * @param string $key
     * @param Closure $closure returns a primitive or an object that implements JsonSerializable
     *
     * @deprecated 21 Use OCP\AppFramework\Services\IInitialState or OCP\AppFramework\Services\InitialStateProvider
     * @see \OCP\AppFramework\Services\IInitialState::provideLazyInitialState()
     */
    public function provideLazyInitialState(string $appName, string $key, \Closure $closure) : void;
}
/**
 * Interface IL10N
 *
 * @since 6.0.0
 */
interface IL10N
{
    /**
     * Translating
     * @param string $text The text we need a translation for
     * @param array|string $parameters default:array() Parameters for sprintf
     * @return string Translation or the same text
     *
     * Returns the translation. If no translation is found, $text will be
     * returned.
     * @since 6.0.0
     */
    public function t(string $text, $parameters = []) : string;
    /**
     * Translating
     * @param string $text_singular the string to translate for exactly one object
     * @param string $text_plural the string to translate for n objects
     * @param integer $count Number of objects
     * @param array $parameters default:array() Parameters for sprintf
     * @return string Translation or the same text
     *
     * Returns the translation. If no translation is found, $text will be
     * returned. %n will be replaced with the number of objects.
     *
     * The correct plural is determined by the plural_forms-function
     * provided by the po file.
     * @since 6.0.0
     *
     */
    public function n(string $text_singular, string $text_plural, int $count, array $parameters = []) : string;
    /**
     * Localization
     * @param string $type Type of localization
     * @param \DateTime|int|string $data parameters for this localization
     * @param array $options currently supports following options:
     * 			- 'width': handed into \Punic\Calendar::formatDate as second parameter
     * @return string|int|false
     *
     * Returns the localized data.
     *
     * Implemented types:
     *  - date
     *    - Creates a date
     *    - l10n-field: date
     *    - params: timestamp (int/string)
     *  - datetime
     *    - Creates date and time
     *    - l10n-field: datetime
     *    - params: timestamp (int/string)
     *  - time
     *    - Creates a time
     *    - l10n-field: time
     *    - params: timestamp (int/string)
     * @since 6.0.0 - parameter $options was added in 8.0.0
     */
    public function l(string $type, $data, array $options = []);
    /**
     * The code (en, de, ...) of the language that is used for this IL10N object
     *
     * @return string language
     * @since 7.0.0
     */
    public function getLanguageCode() : string;
    /**
     * * The code (en_US, fr_CA, ...) of the locale that is used for this IL10N object
     *
     * @return string locale
     * @since 14.0.0
     */
    public function getLocaleCode() : string;
}
/**
 * Interface ILogger
 * @since 7.0.0
 *
 * This logger interface follows the design guidelines of PSR-3
 * https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md#3-psrlogloggerinterface
 * @deprecated 20.0.0 use the PSR-3 logger \Psr\Log\LoggerInterface
 */
interface ILogger
{
    /**
     * @since 14.0.0
     * @deprecated 20.0.0
     */
    public const DEBUG = 0;
    /**
     * @since 14.0.0
     * @deprecated 20.0.0
     */
    public const INFO = 1;
    /**
     * @since 14.0.0
     * @deprecated 20.0.0
     */
    public const WARN = 2;
    /**
     * @since 14.0.0
     * @deprecated 20.0.0
     */
    public const ERROR = 3;
    /**
     * @since 14.0.0
     * @deprecated 20.0.0
     */
    public const FATAL = 4;
    /**
     * System is unusable.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::emergency
     */
    public function emergency(string $message, array $context = []);
    /**
     * Action must be taken immediately.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::alert
     */
    public function alert(string $message, array $context = []);
    /**
     * Critical conditions.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::critical
     */
    public function critical(string $message, array $context = []);
    /**
     * Runtime errors that do not require immediate action but should typically
     * be logged and monitored.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::error
     */
    public function error(string $message, array $context = []);
    /**
     * Exceptional occurrences that are not errors.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::warning
     */
    public function warning(string $message, array $context = []);
    /**
     * Normal but significant events.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::notice
     */
    public function notice(string $message, array $context = []);
    /**
     * Interesting events.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::info
     */
    public function info(string $message, array $context = []);
    /**
     * Detailed debug information.
     *
     * @param string $message
     * @param array $context
     * @return null
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::debug
     */
    public function debug(string $message, array $context = []);
    /**
     * Logs with an arbitrary level.
     *
     * @param int $level
     * @param string $message
     * @param array $context
     * @return mixed
     * @since 7.0.0
     * @deprecated 20.0.0 use \Psr\Log\LoggerInterface::log
     */
    public function log(int $level, string $message, array $context = []);
    /**
     * Logs an exception very detailed
     * An additional message can we written to the log by adding it to the
     * context.
     *
     * <code>
     * $logger->logException($ex, [
     *     'message' => 'Exception during background job execution'
     * ]);
     * </code>
     *
     * @param \Exception|\Throwable $exception
     * @param array $context
     * @return void
     * @since 8.2.0
     * @deprecated 20.0.0 use the `exception` entry in the context of any method in \Psr\Log\LoggerInterface
     */
    public function logException(\Throwable $exception, array $context = []);
}
/**
 * This interface defines method for accessing the file based user cache.
 *
 * @since 8.1.0
 */
interface IMemcache extends \OCP\ICache
{
    /**
     * Set a value in the cache if it's not already stored
     *
     * @param string $key
     * @param mixed $value
     * @param int $ttl Time To Live in seconds. Defaults to 60*60*24
     * @return bool
     * @since 8.1.0
     */
    public function add($key, $value, $ttl = 0);
    /**
     * Increase a stored number
     *
     * @param string $key
     * @param int $step
     * @return int | bool
     * @since 8.1.0
     */
    public function inc($key, $step = 1);
    /**
     * Decrease a stored number
     *
     * @param string $key
     * @param int $step
     * @return int | bool
     * @since 8.1.0
     */
    public function dec($key, $step = 1);
    /**
     * Compare and set
     *
     * @param string $key
     * @param mixed $old
     * @param mixed $new
     * @return bool
     * @since 8.1.0
     */
    public function cas($key, $old, $new);
    /**
     * Compare and delete
     *
     * @param string $key
     * @param mixed $old
     * @return bool
     * @since 8.1.0
     */
    public function cad($key, $old);
}
/**
 * Interface for memcache backends that support setting ttl after the value is set
 *
 * @since 8.2.2
 */
interface IMemcacheTTL extends \OCP\IMemcache
{
    /**
     * Set the ttl for an existing value
     *
     * @param string $key
     * @param int $ttl time to live in seconds
     * @since 8.2.2
     */
    public function setTTL($key, $ttl);
}
/**
 * @since 24.0.0
 */
interface IRequestId
{
    /**
     * Returns an ID for the request, value is not guaranteed to be unique and is mostly meant for logging
     * If `mod_unique_id` is installed this value will be taken.
     *
     * @return string
     * @since 24.0.0
     */
    public function getId() : string;
}
/**
 * Class for basic image manipulation
 * @since 8.1.0
 */
interface IImage
{
    /**
     * Determine whether the object contains an image resource.
     *
     * @since 8.1.0
     */
    public function valid() : bool;
    /**
     * Returns the MIME type of the image or null if no image is loaded.
     *
     * @since 8.1.0
     */
    public function mimeType() : ?string;
    /**
     * Returns the width of the image or -1 if no image is loaded.
     *
     * @since 8.1.0
     */
    public function width() : int;
    /**
     * Returns the height of the image or -1 if no image is loaded.
     *
     * @since 8.1.0
     */
    public function height() : int;
    /**
     * Returns the width when the image orientation is top-left.
     *
     * @since 8.1.0
     */
    public function widthTopLeft() : int;
    /**
     * Returns the height when the image orientation is top-left.
     *
     * @since 8.1.0
     */
    public function heightTopLeft() : int;
    /**
     * Outputs the image.
     *
     * @since 8.1.0
     */
    public function show(?string $mimeType = null) : bool;
    /**
     * Saves the image.
     *
     * @param string $filePath
     * @param string $mimeType
     * @since 8.1.0
     */
    public function save(?string $filePath = null, ?string $mimeType = null) : bool;
    /**
     * @return false|resource|\GdImage Returns the image resource if any
     * @since 8.1.0
     */
    public function resource();
    /**
     * @return string Returns the mimetype of the data. Returns null
     * if the data is not valid.
     * @since 13.0.0
     */
    public function dataMimeType() : ?string;
    /**
     * @return string Returns the raw image data.
     * @since 8.1.0
     */
    public function data() : ?string;
    /**
     * (I'm open for suggestions on better method name ;)
     * Get the orientation based on EXIF data.
     *
     * @return int The orientation or -1 if no EXIF data is available.
     * @since 8.1.0
     */
    public function getOrientation() : int;
    /**
     * (I'm open for suggestions on better method name ;)
     * Fixes orientation based on EXIF data.
     *
     * @since 8.1.0
     */
    public function fixOrientation() : bool;
    /**
     * Resizes the image preserving ratio.
     *
     * @param integer $maxSize The maximum size of either the width or height.
     * @since 8.1.0
     */
    public function resize(int $maxSize) : bool;
    /**
     * @param int $width
     * @param int $height
     * @return bool
     * @since 8.1.0
     */
    public function preciseResize(int $width, int $height) : bool;
    /**
     * Crops the image to the middle square. If the image is already square it just returns.
     *
     * @param int $size maximum size for the result (optional)
     * @return bool for success or failure
     * @since 8.1.0
     */
    public function centerCrop(int $size = 0) : bool;
    /**
     * Crops the image from point $x$y with dimension $wx$h.
     *
     * @param int $x Horizontal position
     * @param int $y Vertical position
     * @param int $w Width
     * @param int $h Height
     * @return bool for success or failure
     * @since 8.1.0
     */
    public function crop(int $x, int $y, int $w, int $h) : bool;
    /**
     * Resizes the image to fit within a boundary while preserving ratio.
     *
     * Warning: Images smaller than $maxWidth x $maxHeight will end up being scaled up
     *
     * @param int $maxWidth
     * @param int $maxHeight
     * @since 8.1.0
     */
    public function fitIn(int $maxWidth, int $maxHeight) : bool;
    /**
     * Shrinks the image to fit within a boundary while preserving ratio.
     *
     * @param int $maxWidth
     * @param int $maxHeight
     * @since 8.1.0
     */
    public function scaleDownToFit(int $maxWidth, int $maxHeight) : bool;
    /**
     * create a copy of this image
     *
     * @return IImage
     * @since 19.0.0
     */
    public function copy() : \OCP\IImage;
    /**
     * create a new cropped copy of this image
     *
     * @param int $x Horizontal position
     * @param int $y Vertical position
     * @param int $w Width
     * @param int $h Height
     * @return IImage
     * @since 19.0.0
     */
    public function cropCopy(int $x, int $y, int $w, int $h) : \OCP\IImage;
    /**
     * create a new resized copy of this image
     *
     * @param int $width
     * @param int $height
     * @return IImage
     * @since 19.0.0
     */
    public function preciseResizeCopy(int $width, int $height) : \OCP\IImage;
    /**
     * Resizes the image preserving ratio, returning a new copy
     *
     * @param int $maxSize The maximum size of either the width or height.
     * @return IImage
     * @since 19.0.0
     */
    public function resizeCopy(int $maxSize) : \OCP\IImage;
}
/**
 * @since 24.0.0
 */
interface IStreamImage extends \OCP\IImage
{
}
/**
 * Interface ITempManager
 *
 * @since 8.0.0
 */
interface ITempManager
{
    /**
     * Create a temporary file and return the path
     *
     * @param string $postFix
     * @return string
     * @since 8.0.0
     */
    public function getTemporaryFile($postFix = '');
    /**
     * Create a temporary folder and return the path
     *
     * @param string $postFix
     * @return string
     * @since 8.0.0
     */
    public function getTemporaryFolder($postFix = '');
    /**
     * Remove the temporary files and folders generated during this request
     * @since 8.0.0
     */
    public function clean();
    /**
     * Remove old temporary files and folders that were failed to be cleaned
     * @since 8.0.0
     */
    public function cleanOld();
    /**
     * Get the temporary base directory
     *
     * @return string
     * @since 8.2.0
     */
    public function getTempBaseDir();
}
/**
 * User session
 * @since 6.0.0
 */
interface IUserSession
{
    /**
     * Do a user login
     *
     * @param string $uid the username
     * @param string $password the password
     * @return bool true if successful
     * @since 6.0.0
     */
    public function login($uid, $password);
    /**
     * Logs the user out including all the session data
     * Logout, destroys session
     *
     * @return void
     * @since 6.0.0
     */
    public function logout();
    /**
     * set the currently active user
     *
     * @param \OCP\IUser|null $user
     * @since 8.0.0
     */
    public function setUser($user);
    /**
     * get the current active user
     *
     * @return \OCP\IUser|null Current user, otherwise null
     * @since 8.0.0
     */
    public function getUser();
    /**
     * Checks whether the user is logged in
     *
     * @return bool if logged in
     * @since 8.0.0
     */
    public function isLoggedIn();
    /**
     * get getImpersonatingUserID
     *
     * @return string|null
     * @since 18.0.0
     */
    public function getImpersonatingUserID() : ?string;
    /**
     * set setImpersonatingUserID
     *
     * @since 18.0.0
     */
    public function setImpersonatingUserID(bool $useCurrentUser = true) : void;
}
/**
 * This class provides functions to handle images
 * @since 6.0.0
 */
class Image extends \OC_Image
{
}
namespace OCP\L10N;

/**
 * @since 8.2.0
 */
interface IFactory
{
    /**
     * Get a language instance
     *
     * @param string $app
     * @param string|null $lang
     * @param string|null $locale
     * @return \OCP\IL10N
     * @since 8.2.0
     */
    public function get($app, $lang = null, $locale = null);
    /**
     * Find the best language for the context of the current user
     *
     * This method will try to find the most specific language based on info
     * from the user who is logged into the current process and will fall
     * back to system settings and heuristics otherwise.
     *
     * @param string|null $appId specify if you only want a language a specific app supports
     *
     * @return string language code, defaults to 'en' if no other matches are found
     * @since 9.0.0
     */
    public function findLanguage(?string $appId = null) : string;
    /**
     * Try to find the best language for generic tasks
     *
     * This method will try to find the most generic language based on system
     * settings, independent of the user logged into the current process. This
     * is useful for tasks that are run for another user. E.g. the current user
     * sends an email to someone else, then we don't want the current user's
     * language to be picked but rather a instance-wide default that likely fits
     * the target user
     *
     * @param string|null $appId specify if you only want a language a specific app supports
     *
     * @return string language code, defaults to 'en' if no other matches are found
     * @since 23.0.0
     */
    public function findGenericLanguage(string $appId = null) : string;
    /**
     * @param string|null $lang user language as default locale
     * @return string locale If nothing works it returns 'en_US'
     * @since 14.0.0
     */
    public function findLocale($lang = null);
    /**
     * find the matching lang from the locale
     *
     * @param string $app
     * @param string $locale
     * @return null|string
     * @since 14.0.1
     */
    public function findLanguageFromLocale(string $app = 'core', string $locale = null);
    /**
     * Find all available languages for an app
     *
     * @param string|null $app App id or null for core
     * @return string[] an array of available languages
     * @since 9.0.0
     */
    public function findAvailableLanguages($app = null) : array;
    /**
     * @return array an array of available
     * @since 14.0.0
     */
    public function findAvailableLocales();
    /**
     * @param string|null $app App id or null for core
     * @param string $lang
     * @return bool
     * @since 9.0.0
     */
    public function languageExists($app, $lang);
    /**
     * @param string $locale
     * @return bool
     * @since 14.0.0
     */
    public function localeExists($locale);
    /**
     * iterate through language settings (if provided) in this order:
     * 1. returns the forced language or:
     * 2. if applicable, the trunk of 1 (e.g. "fu" instead of "fu_BAR"
     * 3. returns the user language or:
     * 4. if applicable, the trunk of 3
     * 5. returns the system default language or:
     * 6. if applicable, the trunk of 5
     * 7+∞. returns 'en'
     *
     * Hint: in most cases findLanguage() suits you fine
     *
     * @since 14.0.0
     */
    public function getLanguageIterator(\OCP\IUser $user = null) : \OCP\L10N\ILanguageIterator;
    /**
     * returns the common language and other languages in an
     * associative array
     *
     * @since 23.0.0
     */
    public function getLanguages() : array;
    /**
     * Return the language to use when sending something to a user
     *
     * @param IUser|null $user
     * @return string
     * @since 20.0.0
     */
    public function getUserLanguage(\OCP\IUser $user = null) : string;
}
/**
 * Interface ILanguageIterator
 *
 * iterator across language settings (if provided) in this order:
 * 1. returns the forced language or:
 * 2. if applicable, the trunk of 1 (e.g. "fu" instead of "fu_BAR"
 * 3. returns the user language or:
 * 4. if applicable, the trunk of 3
 * 5. returns the system default language or:
 * 6. if applicable, the trunk of 5
 * 7+∞. returns 'en'
 *
 * if settings are not present or truncating is not applicable, the iterator
 * skips to the next valid item itself
 *
 *
 * @since 14.0.0
 */
interface ILanguageIterator extends \Iterator
{
    /**
     * Return the current element
     *
     * @since 14.0.0
     */
    public function current() : string;
    /**
     * Move forward to next element
     *
     * @since 14.0.0
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function next();
    /**
     * Return the key of the current element
     *
     * @since 14.0.0
     */
    public function key() : int;
    /**
     * Checks if current position is valid
     *
     * @since 14.0.0
     */
    public function valid() : bool;
}
namespace OCP\LDAP;

/**
 * Interface IDeletionFlagSupport
 *
 * @since 11.0.0
 */
interface IDeletionFlagSupport
{
    /**
     * Flag record for deletion.
     * @param string $uid user id
     * @since 11.0.0
     */
    public function flagRecord($uid);
    /**
     * Unflag record for deletion.
     * @param string $uid user id
     * @since 11.0.0
     */
    public function unflagRecord($uid);
}
/**
 * Interface ILDAPProviderFactory
 *
 * This class is responsible for instantiating and returning an ILDAPProvider
 * instance.
 *
 * @since 11.0.0
 */
interface ILDAPProviderFactory
{
    /**
     * Constructor for the LDAP provider factory
     *
     * @param IServerContainer $serverContainer server container
     * @since 11.0.0
     */
    public function __construct(\OCP\IServerContainer $serverContainer);
    /**
     * creates and returns an instance of the ILDAPProvider
     *
     * @return ILDAPProvider
     * @since 11.0.0
     */
    public function getLDAPProvider();
    /**
     * Check if an ldap provider is available
     *
     * @return bool
     * @since 21.0.0
     */
    public function isAvailable() : bool;
}
/**
 * Interface ILDAPProvider
 *
 * @since 11.0.0
 */
interface ILDAPProvider
{
    /**
     * Translate a user id to LDAP DN.
     * @param string $uid user id
     * @return string
     * @since 11.0.0
     */
    public function getUserDN($uid);
    /**
     * Translate a group id to LDAP DN.
     * @param string $gid group id
     * @return string
     * @since 13.0.0
     */
    public function getGroupDN($gid);
    /**
     * Translate a LDAP DN to an internal user name.
     * @param string $dn LDAP DN
     * @return string with the internal user name
     * @throws \Exception if translation was unsuccessful
     * @since 11.0.0
     */
    public function getUserName($dn);
    /**
     * Convert a stored DN so it can be used as base parameter for LDAP queries.
     * @param string $dn the DN
     * @return string
     * @since 11.0.0
     */
    public function DNasBaseParameter($dn);
    /**
     * Sanitize a DN received from the LDAP server.
     * @param array $dn the DN in question
     * @return array the sanitized DN
     * @since 11.0.0
     */
    public function sanitizeDN($dn);
    /**
     * Return a new LDAP connection resource for the specified user.
     * @param string $uid user id
     * @return \LDAP\Connection|resource
     * @since 11.0.0
     */
    public function getLDAPConnection($uid);
    /**
     * Return a new LDAP connection resource for the specified group.
     * @param string $gid group id
     * @return \LDAP\Connection|resource
     * @since 13.0.0
     */
    public function getGroupLDAPConnection($gid);
    /**
     * Get the LDAP base for users.
     * @param string $uid user id
     * @return string the base for users
     * @throws \Exception if user id was not found in LDAP
     * @since 11.0.0
     */
    public function getLDAPBaseUsers($uid);
    /**
     * Get the LDAP base for groups.
     * @param string $uid user id
     * @return string the base for groups
     * @throws \Exception if user id was not found in LDAP
     * @since 11.0.0
     */
    public function getLDAPBaseGroups($uid);
    /**
     * Check whether a LDAP DN exists
     * @param string $dn LDAP DN
     * @return bool whether the DN exists
     * @since 11.0.0
     */
    public function dnExists($dn);
    /**
     * Clear the cache if a cache is used, otherwise do nothing.
     * @param string $uid user id
     * @since 11.0.0
     */
    public function clearCache($uid);
    /**
     * Clear the cache if a cache is used, otherwise do nothing.
     * @param string $gid group id
     * @since 13.0.0
     */
    public function clearGroupCache($gid);
    /**
     * Get the LDAP attribute name for the user's display name
     * @param string $uid user id
     * @return string the display name field
     * @throws \Exception if user id was not found in LDAP
     * @since 12.0.0
     */
    public function getLDAPDisplayNameField($uid);
    /**
     * Get the LDAP attribute name for the email
     * @param string $uid user id
     * @return string the email field
     * @throws \Exception if user id was not found in LDAP
     * @since 12.0.0
     */
    public function getLDAPEmailField($uid);
    /**
     * Get the LDAP attribute name for the type of association between users and groups
     * @param string $gid group id
     * @return string the configuration, one of: 'memberUid', 'uniqueMember', 'member', 'gidNumber', ''
     * @throws \Exception if group id was not found in LDAP
     * @since 13.0.0
     */
    public function getLDAPGroupMemberAssoc($gid);
    /**
     * Get an LDAP attribute for a nextcloud user
     *
     * @throws \Exception if user id was not found in LDAP
     * @since 21.0.0
     */
    public function getUserAttribute(string $uid, string $attribute) : ?string;
    /**
     * Get a multi-value LDAP attribute for a nextcloud user
     *
     * @throws \Exception if user id was not found in LDAP
     * @since 22.0.0
     */
    public function getMultiValueUserAttribute(string $uid, string $attribute) : array;
}
namespace OCP\Lock;

/**
 * This interface allows locking and unlocking filesystem paths
 *
 * This interface should be used directly and not implemented by an application.
 * The implementation is provided by the server.
 *
 * @since 8.1.0
 */
interface ILockingProvider
{
    /**
     * @since 8.1.0
     */
    public const LOCK_SHARED = 1;
    /**
     * @since 8.1.0
     */
    public const LOCK_EXCLUSIVE = 2;
    /**
     * @psalm-param self::LOCK_SHARED|self::LOCK_EXCLUSIVE $type
     * @since 8.1.0
     */
    public function isLocked(string $path, int $type) : bool;
    /**
     * @psalm-param self::LOCK_SHARED|self::LOCK_EXCLUSIVE $type
     * @param ?string $readablePath A human-readable path to use in error messages, since 20.0.0
     * @throws LockedException
     * @since 8.1.0
     */
    public function acquireLock(string $path, int $type, ?string $readablePath = null) : void;
    /**
     * @psalm-param self::LOCK_SHARED|self::LOCK_EXCLUSIVE $type
     * @since 8.1.0
     */
    public function releaseLock(string $path, int $type) : void;
    /**
     * Change the target type of an existing lock
     *
     * @psalm-param self::LOCK_SHARED|self::LOCK_EXCLUSIVE $targetType
     * @throws LockedException
     * @since 8.1.0
     */
    public function changeLock(string $path, int $targetType) : void;
    /**
     * Release all lock acquired by this instance
     * @since 8.1.0
     */
    public function releaseAll() : void;
}
/**
 * Class ManuallyLockedException
 *
 * @since 18.0.0
 */
class ManuallyLockedException extends \OCP\Lock\LockedException
{
    /**
     * ManuallyLockedException constructor.
     *
     * @param string $path locked path
     * @param \Exception|null $previous previous exception for cascading
     * @param string $existingLock
     * @param string|null $owner
     * @param int $timeout
     *
     * @since 18.0.0
     */
    public function __construct(string $path, \Exception $previous = null, ?string $existingLock = null, ?string $owner = null, int $timeout = -1)
    {
    }
    /**
     * @return int
     * @since 18.0.0
     */
    public function getTimeout() : int
    {
    }
    /**
     * @return string|null
     * @since 18.0.0
     */
    public function getOwner() : ?string
    {
    }
}
namespace OCP\Lockdown;

/**
 * @since 9.2
 */
interface ILockdownManager
{
    /**
     * Enable the lockdown restrictions
     *
     * @since 9.2
     */
    public function enable();
    /**
     * Set the active token to get the restrictions from and enable the lockdown
     *
     * @param IToken $token
     * @since 9.2
     */
    public function setToken(\OC\Authentication\Token\IToken $token);
    /**
     * Check whether or not filesystem access is allowed
     *
     * @return bool
     * @since 9.2
     */
    public function canAccessFilesystem();
}
namespace OCP\Log\Audit;

/**
 * Emitted when the admin_audit app should log an entry
 *
 * @since 22.0.0
 */
class CriticalActionPerformedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param string $logMessage
     * @param array $parameters
     * @param bool $obfuscateParameters
     * @since 22.0.0
     */
    public function __construct(string $logMessage, array $parameters = [], bool $obfuscateParameters = false)
    {
    }
    /**
     * @return string
     * @since 22.0.0
     */
    public function getLogMessage() : string
    {
    }
    /**
     * @return array
     * @since 22.0.0
     */
    public function getParameters() : array
    {
    }
    /**
     * @return bool
     * @since 22.0.0
     */
    public function getObfuscateParameters() : bool
    {
    }
}
namespace OCP\Log;

/**
 * Interface IFileBased
 *
 *
 * @since 14.0.0
 */
interface IFileBased
{
    /**
     * @since 14.0.0
     */
    public function getLogFilePath() : string;
    /**
     * @since 14.0.0
     */
    public function getEntries(int $limit = 50, int $offset = 0) : array;
}
/**
 * Interface ILogFactory
 *
 * @since 14.0.0
 */
interface ILogFactory
{
    /**
     * @param string $type - one of: file, errorlog, syslog, systemd
     * @return IWriter
     * @since 14.0.0
     */
    public function get(string $type) : \OCP\Log\IWriter;
    /**
     * @param string $path
     * @return ILogger
     * @since 14.0.0
     * @deprecated 22.0.0 Use \OCP\Log\ILogFactory::getCustomPsrLogger
     * @see \OCP\Log\ILogFactory::getCustomPsrLogger
     */
    public function getCustomLogger(string $path) : \OCP\ILogger;
    /**
     * @param string $path
     * @param string $type
     * @param string $tag
     * @return LoggerInterface
     * @since 22.0.0 - Parameters $type and $tag were added in 24.0.0
     */
    public function getCustomPsrLogger(string $path, string $type = 'file', string $tag = 'Nextcloud') : \Psr\Log\LoggerInterface;
}
/**
 * Interface IWriter
 *
 * @since 14.0.0
 */
interface IWriter
{
    /**
     * @since 14.0.0
     *
     * @param string $app
     * @param string|array $message
     * @param int $level
     */
    public function write(string $app, $message, int $level);
}
/**
 * Interface IDataLogger
 *
 * @since 18.0.1
 */
interface IDataLogger
{
    /**
     * allows to log custom data, similar to how logException works
     *
     * @since 18.0.1
     */
    public function logData(string $message, array $data, array $context = []) : void;
}
/**
 * Trait RotationTrait
 *
 *
 * @since 14.0.0
 */
trait RotationTrait
{
    /**
     * @var string
     * @since 14.0.0
     */
    protected $filePath;
    /**
     * @var int
     * @since 14.0.0
     */
    protected $maxSize;
    /**
     * @return string the resulting new filepath
     * @since 14.0.0
     */
    protected function rotate() : string
    {
    }
    /**
     * @return bool
     * @since 14.0.0
     */
    protected function shouldRotateBySize() : bool
    {
    }
}
/**
 * Even for when a log item is being logged
 *
 * @since 27.0.1
 */
class BeforeMessageLoggedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 27.0.1
     */
    public function __construct(string $app, int $level, $message)
    {
    }
    /**
     * Get the level of the log item
     *
     * @return int
     * @since 27.0.1
     */
    public function getLevel() : int
    {
    }
    /**
     * Get the app context of the log item
     *
     * @return string
     * @since 27.0.1
     */
    public function getApp() : string
    {
    }
    /**
     * Get the message of the log item
     *
     * @return array
     * @since 27.0.1
     */
    public function getMessage() : array
    {
    }
}
namespace OCP\Mail\Events;

/**
 * Emitted before a system mail is sent. It can be used to alter the message.
 *
 * @since 19.0.0
 */
class BeforeMessageSent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IMessage $message
     * @since 19.0.0
     */
    public function __construct(\OCP\Mail\IMessage $message)
    {
    }
    /**
     * @return IMessage
     * @since 19.0.0
     */
    public function getMessage() : \OCP\Mail\IMessage
    {
    }
}
namespace OCP\Mail\Headers;

/**
 * Keyword values for the Auto-Submitted email header, as per RFC 3834.
 *
 * The value "auto-notified" as per RFC 5436 is deliberately omitted as it is
 * meant of notification of the sieve system.
 *
 * @link https://www.iana.org/assignments/auto-submitted-keywords/auto-submitted-keywords.xhtml
 *
 * @since 26.0.0
 */
final class AutoSubmitted
{
    /**
     * Name of the Header as used in the final message later
     *
     * @var string
     * @since 26.0.0
     */
    public const HEADER = 'Auto-Submitted';
    /**
     * Indicates that a message was NOT automatically generated, but was
     * created by a human (or following human interaction). It is the equivalent
     * to the absence of an Auto-Submitted header altogether.
     *
     * @var string
     * @since 26.0.0
     */
    public const VALUE_NO = 'no';
    /**
     * Indicates that a message was generated by an automatic process, and is
     * not a direct response to another message
     *
     * @var string
     * @since 26.0.0
     */
    public const VALUE_AUTO_GENERATED = 'auto-generated';
    /**
     * Indicates that a message was automatically generated as a direct response
     * to another message.
     *
     * @var string
     * @since 26.0.0
     */
    public const VALUE_AUTO_REPLIED = 'auto-replied';
}
namespace OCP\Mail;

/**
 * Interface IAttachment
 *
 * @since 13.0.0
 */
interface IAttachment
{
    /**
     * @param string $filename
     * @return IAttachment
     * @since 13.0.0
     */
    public function setFilename(string $filename) : \OCP\Mail\IAttachment;
    /**
     * @param string $contentType
     * @return IAttachment
     * @since 13.0.0
     */
    public function setContentType(string $contentType) : \OCP\Mail\IAttachment;
    /**
     * @param string $body
     * @return IAttachment
     * @since 13.0.0
     */
    public function setBody(string $body) : \OCP\Mail\IAttachment;
}
/**
 * Interface IEMailTemplate
 *
 * Interface to a class that allows to build HTML emails
 *
 * Example:
 *
 * <?php
 *
 * $emailTemplate = new EMailTemplate($this->defaults, $this->urlGenerator, $this->l10n);
 *
 * $emailTemplate->addHeader();
 * $emailTemplate->addHeading('Welcome aboard');
 * $emailTemplate->addBodyText('Welcome to your Nextcloud account, you can add, protect, and share your data.');
 *
 * $emailTemplate->addBodyButtonGroup(
 *     'Set your password', 'https://example.org/resetPassword/q1234567890qwertz',
 *     'Install Client', 'https://nextcloud.com/install/#install-clients'
 * );
 *
 * $emailTemplate->addFooter('Optional footer text');
 *
 * $htmlContent = $emailTemplate->renderHtml();
 * $plainContent = $emailTemplate->renderText();
 *
 * @since 12.0.0
 */
interface IEMailTemplate
{
    /**
     * Sets the subject of the email
     *
     * @param string $subject
     *
     * @since 13.0.0
     */
    public function setSubject(string $subject);
    /**
     * Adds a header to the email
     *
     * @since 12.0.0
     */
    public function addHeader();
    /**
     * Adds a heading to the email
     *
     * @param string $title
     * @param string|bool $plainTitle Title that is used in the plain text email
     *   if empty the $title is used, if false none will be used
     *
     * @since 12.0.0
     */
    public function addHeading(string $title, $plainTitle = '');
    /**
     * Adds a paragraph to the body of the email
     *
     * @param string $text; Note: When $plainText falls back to this, HTML is automatically escaped in the HTML email
     * @param string|bool $plainText Text that is used in the plain text email
     *   if empty the $text is used, if false none will be used
     *
     * @since 12.0.0
     */
    public function addBodyText(string $text, $plainText = '');
    /**
     * Adds a list item to the body of the email
     *
     * @param string $text; Note: When $plainText falls back to this, HTML is automatically escaped in the HTML email
     * @param string $metaInfo; Note: When $plainMetaInfo falls back to this, HTML is automatically escaped in the HTML email
     * @param string $icon Absolute path, must be 16*16 pixels
     * @param string|bool $plainText Text that is used in the plain text email
     *   if empty the $text is used, if false none will be used
     * @param string|bool $plainMetaInfo Meta info that is used in the plain text email
     *   if empty the $metaInfo is used, if false none will be used
     * @param integer plainIndent If > 0, Indent plainText by this amount.
     * @since 12.0.0
     */
    public function addBodyListItem(string $text, string $metaInfo = '', string $icon = '', $plainText = '', $plainMetaInfo = '', $plainIndent = 0);
    /**
     * Adds a button group of two buttons to the body of the email
     *
     * @param string $textLeft Text of left button; Note: When $plainTextLeft falls back to this, HTML is automatically escaped in the HTML email
     * @param string $urlLeft URL of left button
     * @param string $textRight Text of right button; Note: When $plainTextRight falls back to this, HTML is automatically escaped in the HTML email
     * @param string $urlRight URL of right button
     * @param string $plainTextLeft Text of left button that is used in the plain text version - if empty the $textLeft is used
     * @param string $plainTextRight Text of right button that is used in the plain text version - if empty the $textRight is used
     *
     * @since 12.0.0
     */
    public function addBodyButtonGroup(string $textLeft, string $urlLeft, string $textRight, string $urlRight, string $plainTextLeft = '', string $plainTextRight = '');
    /**
     * Adds a button to the body of the email
     *
     * @param string $text Text of button; Note: When $plainText falls back to this, HTML is automatically escaped in the HTML email
     * @param string $url URL of button
     * @param string|false $plainText Text of button in plain text version
     * 		if empty the $text is used, if false none will be used
     *
     * @since 12.0.0
     */
    public function addBodyButton(string $text, string $url, $plainText = '');
    /**
     * Adds a logo and a text to the footer. <br> in the text will be replaced by new lines in the plain text email
     *
     * @param string $text If the text is empty the default "Name - Slogan<br>This is an automatically sent email" will be used
     * @param string $lang Optional language to set the default footer in
     *
     * @since 12.0.0
     */
    public function addFooter(string $text = '', ?string $lang = null);
    /**
     * Returns the rendered email subject as string
     *
     * @return string
     *
     * @since 13.0.0
     */
    public function renderSubject() : string;
    /**
     * Returns the rendered HTML email as string
     *
     * @return string
     *
     * @since 12.0.0
     */
    public function renderHtml() : string;
    /**
     * Returns the rendered plain text email as string
     *
     * @return string
     *
     * @since 12.0.0
     */
    public function renderText() : string;
}
/**
 * Class IMailer provides some basic functions to create a mail message that can be used in combination with
 * \OC\Mail\Message.
 *
 * Example usage:
 *
 * 	$mailer = \OC::$server->getMailer();
 * 	$message = $mailer->createMessage();
 * 	$message->setSubject('Your Subject');
 * 	$message->setFrom(['cloud@domain.org' => 'Nextcloud Notifier']);
 * 	$message->setTo(['recipient@domain.org' => 'Recipient']);
 * 	$message->setPlainBody('The message text');
 * 	$message->setHtmlBody('The <strong>message</strong> text');
 * 	$mailer->send($message);
 *
 * This message can then be passed to send() of \OC\Mail\Mailer
 *
 * @since 8.1.0
 */
interface IMailer
{
    /**
     * Creates a new message object that can be passed to send()
     *
     * @return IMessage
     * @since 8.1.0
     */
    public function createMessage() : \OCP\Mail\IMessage;
    /**
     * @param string|null $data
     * @param string|null $filename
     * @param string|null $contentType
     * @return IAttachment
     * @since 13.0.0
     */
    public function createAttachment($data = null, $filename = null, $contentType = null) : \OCP\Mail\IAttachment;
    /**
     * @param string $path
     * @param string|null $contentType
     * @return IAttachment
     * @since 13.0.0
     */
    public function createAttachmentFromPath(string $path, $contentType = null) : \OCP\Mail\IAttachment;
    /**
     * Creates a new email template object
     *
     * @param string $emailId
     * @param array $data
     * @return IEMailTemplate
     * @since 12.0.0 Parameters added in 12.0.3
     */
    public function createEMailTemplate(string $emailId, array $data = []) : \OCP\Mail\IEMailTemplate;
    /**
     * Send the specified message. Also sets the from address to the value defined in config.php
     * if no-one has been passed.
     *
     * @param IMessage $message Message to send
     * @return string[] Array with failed recipients. Be aware that this depends on the used mail backend and
     * therefore should be considered
     * @throws \Exception In case it was not possible to send the message. (for example if an invalid mail address
     * has been supplied.)
     * @since 8.1.0
     */
    public function send(\OCP\Mail\IMessage $message) : array;
    /**
     * @param string $email Email address to be validated
     * @return bool True if the mail address is valid, false otherwise
     * @since 8.1.0
     */
    public function validateMailAddress(string $email) : bool;
}
/**
 * Interface IMessage
 *
 * @since 13.0.0
 */
interface IMessage
{
    /**
     * @param IAttachment $attachment
     * @return IMessage
     * @since 13.0.0
     */
    public function attach(\OCP\Mail\IAttachment $attachment) : \OCP\Mail\IMessage;
    /**
     * Can be used to "attach content inline" as message parts with specific MIME type and encoding.
     *
     * @param string $body body of the MIME part
     * @param string $name the file name
     * @param string|null $contentType MIME Content-Type (e.g. text/plain or text/calendar)
     *
     * @return IMessage
     * @since 27.0.0
     */
    public function attachInline(string $body, string $name, string $contentType = null) : \OCP\Mail\IMessage;
    /**
     * Set the from address of this message.
     *
     * If no "From" address is used \OC\Mail\Mailer will use mail_from_address and mail_domain from config.php
     *
     * @param array $addresses Example: array('sender@domain.org', 'other@domain.org' => 'A name')
     * @return IMessage
     * @since 13.0.0
     */
    public function setFrom(array $addresses) : \OCP\Mail\IMessage;
    /**
     * Set the Reply-To address of this message
     *
     * @param array $addresses
     * @return IMessage
     * @since 13.0.0
     */
    public function setReplyTo(array $addresses) : \OCP\Mail\IMessage;
    /**
     * Set the to addresses of this message.
     *
     * @param array $recipients Example: array('recipient@domain.org', 'other@domain.org' => 'A name')
     * @return IMessage
     * @since 13.0.0
     */
    public function setTo(array $recipients) : \OCP\Mail\IMessage;
    /**
     * Set the CC recipients of this message.
     *
     * @param array $recipients Example: array('recipient@domain.org', 'other@domain.org' => 'A name')
     * @return IMessage
     * @since 13.0.0
     */
    public function setCc(array $recipients) : \OCP\Mail\IMessage;
    /**
     * Set the BCC recipients of this message.
     *
     * @param array $recipients Example: array('recipient@domain.org', 'other@domain.org' => 'A name')
     * @return IMessage
     * @since 13.0.0
     */
    public function setBcc(array $recipients) : \OCP\Mail\IMessage;
    /**
     * @param IEMailTemplate $emailTemplate
     * @return IMessage
     * @since 13.0.0
     */
    public function useTemplate(\OCP\Mail\IEMailTemplate $emailTemplate) : \OCP\Mail\IMessage;
    /**
     * Add the Auto-Submitted header to the email, preventing most automated
     * responses to automated messages.
     *
     * @param Headers\AutoSubmitted::VALUE_* $value (one of AutoSubmitted::VALUE_NO, AutoSubmitted::VALUE_AUTO_GENERATED, AutoSubmitted::VALUE_AUTO_REPLIED)
     * @return IMessage
     * @since 26.0.0
     */
    public function setAutoSubmitted(string $value) : \OCP\Mail\IMessage;
}
namespace OCP\Migration;

/**
 * @since 13.0.0
 */
interface IMigrationStep
{
    /**
     * Human-readable name of the migration step
     *
     * @return string
     * @since 14.0.0
     */
    public function name() : string;
    /**
     * Human-readable description of the migration step
     *
     * @return string
     * @since 14.0.0
     */
    public function description() : string;
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @since 13.0.0
     */
    public function preSchemaChange(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options);
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @return null|ISchemaWrapper
     * @since 13.0.0
     */
    public function changeSchema(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options);
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @since 13.0.0
     */
    public function postSchemaChange(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options);
}
/**
 * @since 13.0.0
 */
abstract class SimpleMigrationStep implements \OCP\Migration\IMigrationStep
{
    /**
     * Human-readable name of the migration step
     *
     * @return string
     * @since 14.0.0
     */
    public function name() : string
    {
    }
    /**
     * Human-readable description of the migration step
     *
     * @return string
     * @since 14.0.0
     */
    public function description() : string
    {
    }
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @since 13.0.0
     */
    public function preSchemaChange(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options)
    {
    }
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @return null|ISchemaWrapper
     * @since 13.0.0
     */
    public function changeSchema(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options)
    {
    }
    /**
     * @param IOutput $output
     * @param Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @psalm-param Closure():ISchemaWrapper $schemaClosure
     * @param array $options
     * @since 13.0.0
     */
    public function postSchemaChange(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options)
    {
    }
}
/**
 * @since 13.0.0
 */
abstract class BigIntMigration extends \OCP\Migration\SimpleMigrationStep
{
    /**
     * @return array Returns an array with the following structure
     * ['table1' => ['column1', 'column2'], ...]
     * @since 13.0.0
     */
    protected abstract function getColumnsByTable();
    /**
     * @param IOutput $output
     * @param \Closure $schemaClosure The `\Closure` returns a `ISchemaWrapper`
     * @param array $options
     * @return null|ISchemaWrapper
     * @since 13.0.0
     */
    public function changeSchema(\OCP\Migration\IOutput $output, \Closure $schemaClosure, array $options)
    {
    }
}
/**
 * Interface IOutput
 *
 * @since 9.1.0
 */
interface IOutput
{
    /**
     * @param string $message
     * @return void
     * @since 9.1.0
     */
    public function info($message);
    /**
     * @param string $message
     * @return void
     * @since 9.1.0
     */
    public function warning($message);
    /**
     * @param int $max
     * @return void
     * @since 9.1.0
     */
    public function startProgress($max = 0);
    /**
     * @param int $step
     * @param string $description
     * @return void
     * @since 9.1.0
     */
    public function advance($step = 1, $description = '');
    /**
     * @return void
     * @since 9.1.0
     */
    public function finishProgress();
}
/**
 * Repair step
 * @since 9.1.0
 */
interface IRepairStep
{
    /**
     * Returns the step's name
     *
     * @return string
     * @since 9.1.0
     */
    public function getName();
    /**
     * Run repair step.
     * Must throw exception on error.
     *
     * @param IOutput $output
     * @throws \Exception in case of failure
     * @since 9.1.0
     */
    public function run(\OCP\Migration\IOutput $output);
}
namespace OCP\Notification;

/**
 * Interface IApp
 *
 * @since 9.0.0
 */
interface IApp
{
    /**
     * @param INotification $notification
     * @throws \InvalidArgumentException When the notification is not valid
     * @since 9.0.0
     */
    public function notify(\OCP\Notification\INotification $notification) : void;
    /**
     * @param INotification $notification
     * @since 9.0.0
     */
    public function markProcessed(\OCP\Notification\INotification $notification) : void;
    /**
     * @param INotification $notification
     * @return int
     * @since 9.0.0
     */
    public function getCount(\OCP\Notification\INotification $notification) : int;
}
/**
 * Interface IDeferrableApp
 *
 * @since 20.0.0
 */
interface IDeferrableApp extends \OCP\Notification\IApp
{
    /**
     * Start deferring notifications until `flush()` is called
     *
     * @since 20.0.0
     */
    public function defer() : void;
    /**
     * Send all deferred notifications that have been stored since `defer()` was called
     *
     * @since 20.0.0
     */
    public function flush() : void;
}
/**
 * @since 17.0.0
 */
class AlreadyProcessedException extends \RuntimeException
{
    /**
     * @since 17.0.0
     */
    public function __construct()
    {
    }
}
/**
 * Interface IAction
 *
 * @since 9.0.0
 */
interface IAction
{
    /**
     * @since 17.0.0
     */
    public const TYPE_GET = 'GET';
    /**
     * @since 17.0.0
     */
    public const TYPE_POST = 'POST';
    /**
     * @since 17.0.0
     */
    public const TYPE_PUT = 'PUT';
    /**
     * @since 17.0.0
     */
    public const TYPE_DELETE = 'DELETE';
    /**
     * @since 17.0.0
     */
    public const TYPE_WEB = 'WEB';
    /**
     * @param string $label
     * @return $this
     * @throws \InvalidArgumentException if the label is invalid
     * @since 9.0.0
     */
    public function setLabel(string $label) : \OCP\Notification\IAction;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getLabel() : string;
    /**
     * @param string $label
     * @return $this
     * @throws \InvalidArgumentException if the label is invalid
     * @since 9.0.0
     */
    public function setParsedLabel(string $label) : \OCP\Notification\IAction;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getParsedLabel() : string;
    /**
     * @param bool $primary
     * @return $this
     * @throws \InvalidArgumentException if $primary is invalid
     * @since 9.0.0
     */
    public function setPrimary(bool $primary) : \OCP\Notification\IAction;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function isPrimary() : bool;
    /**
     * @param string $link
     * @param string $requestType
     * @return $this
     * @throws \InvalidArgumentException if the link is invalid
     * @since 9.0.0
     */
    public function setLink(string $link, string $requestType) : \OCP\Notification\IAction;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getLink() : string;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getRequestType() : string;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function isValid() : bool;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function isValidParsed() : bool;
}
/**
 * Interface INotifier
 *
 * @since 9.0.0
 */
interface INotifier
{
    /**
     * Identifier of the notifier, only use [a-z0-9_]
     *
     * @return string
     * @since 17.0.0
     */
    public function getID() : string;
    /**
     * Human readable name describing the notifier
     *
     * @return string
     * @since 17.0.0
     */
    public function getName() : string;
    /**
     * @param INotification $notification
     * @param string $languageCode The code of the language that should be used to prepare the notification
     * @return INotification
     * @throws \InvalidArgumentException When the notification was not prepared by a notifier
     * @throws AlreadyProcessedException When the notification is not needed anymore and should be deleted
     * @since 9.0.0
     */
    public function prepare(\OCP\Notification\INotification $notification, string $languageCode) : \OCP\Notification\INotification;
}
/**
 * Interface INotifier classes should implement if they want to process notifications
 * that are dismissed by the user.
 *
 * This can be useful if dismissing the notification will leave it in an incomplete
 * state. The handler can chose to for example do some default action.
 *
 * @since 18.0.0
 */
interface IDismissableNotifier extends \OCP\Notification\INotifier
{
    /**
     * @param INotification $notification
     * @throws \InvalidArgumentException In case the handler can't handle the notification
     *
     * @since 18.0.0
     */
    public function dismissNotification(\OCP\Notification\INotification $notification) : void;
}
/**
 * Interface IManager
 *
 * @since 9.0.0
 */
interface IManager extends \OCP\Notification\IApp, \OCP\Notification\INotifier
{
    /**
     * @param string $appClass The service must implement IApp, otherwise a
     *                          \InvalidArgumentException is thrown later
     * @since 17.0.0
     */
    public function registerApp(string $appClass) : void;
    /**
     * @param \Closure $service The service must implement INotifier, otherwise a
     *                          \InvalidArgumentException is thrown later
     * @param \Closure $info    An array with the keys 'id' and 'name' containing
     *                          the app id and the app name
     * @deprecated 17.0.0 use registerNotifierService instead.
     * @since 8.2.0 - Parameter $info was added in 9.0.0
     */
    public function registerNotifier(\Closure $service, \Closure $info);
    /**
     * @param string $notifierService The service must implement INotifier, otherwise a
     *                          \InvalidArgumentException is thrown later
     * @since 17.0.0
     * @deprecated 22.0.0 use the IBootStrap registration context
     */
    public function registerNotifierService(string $notifierService) : void;
    /**
     * @return INotifier[]
     * @since 9.0.0
     */
    public function getNotifiers() : array;
    /**
     * @return INotification
     * @since 9.0.0
     */
    public function createNotification() : \OCP\Notification\INotification;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function hasNotifiers() : bool;
    /**
     * @param bool $preparingPushNotification
     * @since 14.0.0
     */
    public function setPreparingPushNotification(bool $preparingPushNotification) : void;
    /**
     * @return bool
     * @since 14.0.0
     */
    public function isPreparingPushNotification() : bool;
    /**
     * @since 18.0.0
     */
    public function dismissNotification(\OCP\Notification\INotification $notification) : void;
    /**
     * Start deferring notifications until `flush()` is called
     *
     * The calling app should only "flush" when it got returned true on the defer call,
     * otherwise another app is deferring the sending already.
     * @return bool
     * @since 20.0.0
     */
    public function defer() : bool;
    /**
     * Send all deferred notifications that have been stored since `defer()` was called
     *
     * @since 20.0.0
     */
    public function flush() : void;
    /**
     * Whether the server can use the hosted push notification service
     *
     * We want to keep offering our push notification service for free, but large
     * users overload our infrastructure. For this reason we have to rate-limit the
     * use of push notifications. If you need this feature, consider using Nextcloud Enterprise.
     *
     * @since 23.0.0
     */
    public function isFairUseOfFreePushService() : bool;
}
/**
 * Interface INotification
 *
 * @since 9.0.0
 */
interface INotification
{
    /**
     * @param string $app
     * @return $this
     * @throws \InvalidArgumentException if the app id is invalid
     * @since 9.0.0
     */
    public function setApp(string $app) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getApp() : string;
    /**
     * @param string $user
     * @return $this
     * @throws \InvalidArgumentException if the user id is invalid
     * @since 9.0.0
     */
    public function setUser(string $user) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getUser() : string;
    /**
     * @param \DateTime $dateTime
     * @return $this
     * @throws \InvalidArgumentException if the $dateTime is invalid
     * @since 9.0.0
     */
    public function setDateTime(\DateTime $dateTime) : \OCP\Notification\INotification;
    /**
     * @return \DateTime
     * @since 9.0.0
     */
    public function getDateTime() : \DateTime;
    /**
     * @param string $type
     * @param string $id
     * @return $this
     * @throws \InvalidArgumentException if the object type or id is invalid
     * @since 9.0.0
     */
    public function setObject(string $type, string $id) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getObjectType() : string;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getObjectId() : string;
    /**
     * @param string $subject
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the subject or parameters are invalid
     * @since 9.0.0
     */
    public function setSubject(string $subject, array $parameters = []) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getSubject() : string;
    /**
     * @return array
     * @since 9.0.0
     */
    public function getSubjectParameters() : array;
    /**
     * Set a parsed subject
     *
     * HTML is not allowed in the parsed subject and will be escaped
     * automatically by the clients. You can use the RichObjectString system
     * provided by the Nextcloud server to highlight important parameters via
     * the setRichSubject method.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $subject
     * @return $this
     * @throws \InvalidArgumentException if the subject is invalid
     * @since 9.0.0
     */
    public function setParsedSubject(string $subject) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getParsedSubject() : string;
    /**
     * Set a RichObjectString subject
     *
     * HTML is not allowed in the rich subject and will be escaped automatically
     * by the clients, but you can use the RichObjectString system provided by
     * the Nextcloud server to highlight important parameters.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $subject
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the subject or parameters are invalid
     * @since 11.0.0
     */
    public function setRichSubject(string $subject, array $parameters = []) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getRichSubject() : string;
    /**
     * @return array[]
     * @since 11.0.0
     */
    public function getRichSubjectParameters() : array;
    /**
     * @param string $message
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the message or parameters are invalid
     * @since 9.0.0
     */
    public function setMessage(string $message, array $parameters = []) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getMessage() : string;
    /**
     * @return array
     * @since 9.0.0
     */
    public function getMessageParameters() : array;
    /**
     * Set a parsed message
     *
     * HTML is not allowed in the parsed message and will be escaped
     * automatically by the clients. You can use the RichObjectString system
     * provided by the Nextcloud server to highlight important parameters via
     * the setRichMessage method.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $message
     * @return $this
     * @throws \InvalidArgumentException if the message is invalid
     * @since 9.0.0
     */
    public function setParsedMessage(string $message) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getParsedMessage() : string;
    /**
     * Set a RichObjectString message
     *
     * HTML is not allowed in the rich message and will be escaped automatically
     * by the clients, but you can use the RichObjectString system provided by
     * the Nextcloud server to highlight important parameters.
     *
     * See https://github.com/nextcloud/server/issues/1706 for more information.
     *
     * @param string $message
     * @param array $parameters
     * @return $this
     * @throws \InvalidArgumentException if the message or parameters are invalid
     * @since 11.0.0
     */
    public function setRichMessage(string $message, array $parameters = []) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getRichMessage() : string;
    /**
     * @return array[]
     * @since 11.0.0
     */
    public function getRichMessageParameters() : array;
    /**
     * @param string $link
     * @return $this
     * @throws \InvalidArgumentException if the link is invalid
     * @since 9.0.0
     */
    public function setLink(string $link) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 9.0.0
     */
    public function getLink() : string;
    /**
     * @param string $icon
     * @return $this
     * @throws \InvalidArgumentException if the icon is invalid
     * @since 11.0.0
     */
    public function setIcon(string $icon) : \OCP\Notification\INotification;
    /**
     * @return string
     * @since 11.0.0
     */
    public function getIcon() : string;
    /**
     * @return IAction
     * @since 9.0.0
     */
    public function createAction() : \OCP\Notification\IAction;
    /**
     * @param IAction $action
     * @return $this
     * @throws \InvalidArgumentException if the action is invalid
     * @since 9.0.0
     */
    public function addAction(\OCP\Notification\IAction $action) : \OCP\Notification\INotification;
    /**
     * @return IAction[]
     * @since 9.0.0
     */
    public function getActions() : array;
    /**
     * @param IAction $action
     * @return $this
     * @throws \InvalidArgumentException if the action is invalid
     * @since 9.0.0
     */
    public function addParsedAction(\OCP\Notification\IAction $action) : \OCP\Notification\INotification;
    /**
     * @return IAction[]
     * @since 9.0.0
     */
    public function getParsedActions() : array;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function isValid() : bool;
    /**
     * @return bool
     * @since 9.0.0
     */
    public function isValidParsed() : bool;
}
namespace OCP\OCS;

/**
 * Interface IDiscoveryService
 *
 * Allows you to discover OCS end-points on a remote server
 *
 * @since 12.0.0
 */
interface IDiscoveryService
{
    /**
     * Discover OCS end-points
     *
     * If no valid discovery data is found the defaults are returned
     *
     * @since 12.0.0
     *
     * @param string $remote
     * @param string $service the service you want to discover
     * @param bool $skipCache We won't check if the data is in the cache. This is useful if a background job is updating the status - Added in 14.0.0
     * @return array
     */
    public function discover(string $remote, string $service, bool $skipCache = false) : array;
}
namespace OCP;

/**
 * Exception if the precondition of the config update method isn't met
 * @since 8.0.0
 */
class PreConditionNotMetException extends \Exception
{
}
namespace OCP\Preview;

/**
 * Interface IProvider
 *
 * @since 8.1.0
 * @deprecated 17.0.0 use IProviderV2 instead
 */
interface IProvider
{
    /**
     * @return string Regex with the mimetypes that are supported by this provider
     * @since 8.1.0
     */
    public function getMimeType();
    /**
     * Check if a preview can be generated for $path
     *
     * @param \OCP\Files\FileInfo $file
     * @return bool
     * @since 8.1.0
     */
    public function isAvailable(\OCP\Files\FileInfo $file);
    /**
     * get thumbnail for file at path $path
     *
     * @param string $path Path of file
     * @param int $maxX The maximum X size of the thumbnail. It can be smaller depending on the shape of the image
     * @param int $maxY The maximum Y size of the thumbnail. It can be smaller depending on the shape of the image
     * @param bool $scalingup Disable/Enable upscaling of previews
     * @param \OC\Files\View $fileview fileview object of user folder
     * @return bool|\OCP\IImage false if no preview was generated
     * @since 8.1.0
     */
    public function getThumbnail($path, $maxX, $maxY, $scalingup, $fileview);
}
/**
 * @since 17.0.0
 */
interface IProviderV2
{
    /**
     * @return string Regex with the mimetypes that are supported by this provider
     * @since 17.0.0
     */
    public function getMimeType() : string;
    /**
     * Check if a preview can be generated for $path
     *
     * @param FileInfo $file
     * @return bool
     * @since 17.0.0
     */
    public function isAvailable(\OCP\Files\FileInfo $file) : bool;
    /**
     * get thumbnail for file at path $path
     *
     * @param File $file
     * @param int $maxX The maximum X size of the thumbnail. It can be smaller depending on the shape of the image
     * @param int $maxY The maximum Y size of the thumbnail. It can be smaller depending on the shape of the image
     * @return null|\OCP\IImage null if no preview was generated
     * @since 17.0.0
     */
    public function getThumbnail(\OCP\Files\File $file, int $maxX, int $maxY) : ?\OCP\IImage;
}
/**
 * Marks files that should keep multiple preview "versions" for the same file id
 *
 * Examples of this are files where the storage backend provides versioning, for those
 * files, we dont have fileids for the different versions but still need to be able to generate
 * previews for all versions
 *
 * @since 17.0.0
 */
interface IVersionedPreviewFile
{
    /**
     * @return string
     * @since 17.0.0
     */
    public function getPreviewVersion() : string;
}
/**
 * @since 25.0.1
 */
class BeforePreviewFetchedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 25.0.1
     */
    public function __construct(\OCP\Files\Node $node)
    {
    }
    /**
     * @since 25.0.1
     */
    public function getNode() : \OCP\Files\Node
    {
    }
}
namespace OCP\Profile;

/**
 * Emitted before the rendering step of the public profile page happens.
 *
 * @since 25.0.0
 */
class BeforeTemplateRenderedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 25.0.0
     */
    public function __construct(string $userId)
    {
    }
    /**
     * @since 25.0.0
     */
    public function getUserId() : string
    {
    }
}
/**
 * @since 23.0.0
 */
interface ILinkAction
{
    /**
     * Preload the user specific value required by the action
     *
     * e.g. the email is loaded for the email action and the userId for the Talk action
     *
     * @since 23.0.0
     */
    public function preload(\OCP\IUser $targetUser) : void;
    /**
     * Returns the app ID of the action
     *
     * e.g. 'spreed'
     *
     * @since 23.0.0
     */
    public function getAppId() : string;
    /**
     * Returns the unique ID of the action
     *
     * *For account properties this is the constant defined in lib/public/Accounts/IAccountManager.php*
     *
     * e.g. 'email'
     *
     * @since 23.0.0
     */
    public function getId() : string;
    /**
     * Returns the translated unique display ID of the action
     *
     * Should be something short and descriptive of the action
     * as this is seen by the end-user when configuring actions
     *
     * e.g. 'Email'
     *
     * @since 23.0.0
     */
    public function getDisplayId() : string;
    /**
     * Returns the translated title
     *
     * e.g. 'Mail user@domain.com'
     *
     * Use the L10N service to translate it
     *
     * @since 23.0.0
     */
    public function getTitle() : string;
    /**
     * Returns the priority
     *
     * *Actions are sorted in ascending order*
     *
     * e.g. 60
     *
     * @since 23.0.0
     */
    public function getPriority() : int;
    /**
     * Returns the URL link to the 16*16 SVG icon
     *
     * @since 23.0.0
     */
    public function getIcon() : string;
    /**
     * Returns the target of the action,
     * if null is returned the action won't be registered
     *
     * e.g. 'mailto:user@domain.com'
     *
     * @since 23.0.0
     */
    public function getTarget() : ?string;
}
/**
 * @since 23.0.0
 */
class ParameterDoesNotExistException extends \Exception
{
    /**
     * @since 23.0.0
     */
    public function __construct($parameter)
    {
    }
}
namespace OCP\Profiler;

/**
 * This interface store the results of the profiling of one
 * request. You can get the saved profiles from the @see IProfiler.
 *
 * ```php
 * <?php
 * $profiler = \OC::$server->get(IProfiler::class);
 * $profiles = $profiler->find('/settings/users', 10);
 * ```
 *
 * This interface is meant to be used directly and not extended.
 * @since 24.0.0
 */
interface IProfile
{
    /**
     * Get the token of the profile
     * @since 24.0.0
     */
    public function getToken() : string;
    /**
     * Set the token of the profile
     * @since 24.0.0
     */
    public function setToken(string $token) : void;
    /**
     * Get the time of the profile
     * @since 24.0.0
     */
    public function getTime() : ?int;
    /**
     * Set the time of the profile
     * @since 24.0.0
     */
    public function setTime(int $time) : void;
    /**
     * Get the url of the profile
     * @since 24.0.0
     */
    public function getUrl() : ?string;
    /**
     * Set the url of the profile
     * @since 24.0.0
     */
    public function setUrl(string $url) : void;
    /**
     * Get the method of the profile
     * @since 24.0.0
     */
    public function getMethod() : ?string;
    /**
     * Set the method of the profile
     * @since 24.0.0
     */
    public function setMethod(string $method) : void;
    /**
     * Get the status code of the profile
     * @since 24.0.0
     */
    public function getStatusCode() : ?int;
    /**
     * Set the status code of the profile
     * @since 24.0.0
     */
    public function setStatusCode(int $statusCode) : void;
    /**
     * Add a data collector to the profile
     * @since 24.0.0
     */
    public function addCollector(\OCP\DataCollector\IDataCollector $collector);
    /**
     * Get the parent profile to this profile
     * @since 24.0.0
     */
    public function getParent() : ?\OCP\Profiler\IProfile;
    /**
     * Set the parent profile to this profile
     * @since 24.0.0
     */
    public function setParent(?\OCP\Profiler\IProfile $parent) : void;
    /**
     * Get the parent token to this profile
     * @since 24.0.0
     */
    public function getParentToken() : ?string;
    /**
     * Get the profile's children
     * @return IProfile[]
     * @since 24.0.0
     **/
    public function getChildren() : array;
    /**
     * Set the profile's children
     * @param IProfile[] $children
     * @since 24.0.0
     */
    public function setChildren(array $children) : void;
    /**
     * Add the child profile
     * @since 24.0.0
     */
    public function addChild(\OCP\Profiler\IProfile $profile) : void;
    /**
     * Get all the data collectors
     * @return IDataCollector[]
     * @since 24.0.0
     */
    public function getCollectors() : array;
    /**
     * Set all the data collectors
     * @param IDataCollector[] $collectors
     * @since 24.0.0
     */
    public function setCollectors(array $collectors) : void;
    /**
     * Get a data collector by name
     * @since 24.0.0
     */
    public function getCollector(string $collectorName) : ?\OCP\DataCollector\IDataCollector;
}
/**
 * This interface allows to interact with the built-in Nextcloud profiler.
 * @since 24.0.0
 */
interface IProfiler
{
    /**
     * Add a new data collector to the profiler. This allows to later on
     * collect all the data from every registered collector.
     *
     * @see IDataCollector
     * @since 24.0.0
     */
    public function add(\OCP\DataCollector\IDataCollector $dataCollector) : void;
    /**
     * Load a profile from a response object
     * @since 24.0.0
     */
    public function loadProfileFromResponse(\OCP\AppFramework\Http\Response $response) : ?\OCP\Profiler\IProfile;
    /**
     * Load a profile from the response token
     * @since 24.0.0
     */
    public function loadProfile(string $token) : ?\OCP\Profiler\IProfile;
    /**
     * Save a profile on the disk. This allows to later load it again in the
     * profiler user interface.
     * @since 24.0.0
     */
    public function saveProfile(\OCP\Profiler\IProfile $profile) : bool;
    /**
     * Find a profile from various search parameters
     * @since 24.0.0
     */
    public function find(?string $url, ?int $limit, ?string $method, ?int $start, ?int $end, string $statusCode = null) : array;
    /**
     * Get the list of data providers by identifier
     * @return string[]
     * @since 24.0.0
     */
    public function dataProviders() : array;
    /**
     * Check if the profiler is enabled.
     *
     * If it is not enabled, data provider shouldn't be created and
     * shouldn't collect any data.
     * @since 24.0.0
     */
    public function isEnabled() : bool;
    /**
     * Set if the profiler is enabled.
     * @see isEnabled
     * @since 24.0.0
     */
    public function setEnabled(bool $enabled) : void;
    /**
     * Collect all the information from the current request and construct
     * a IProfile from it.
     * @since 24.0.0
     */
    public function collect(\OC\AppFramework\Http\Request $request, \OCP\AppFramework\Http\Response $response) : \OCP\Profiler\IProfile;
    /**
     * Clear the stored profiles
     * @since 25.0.0
     */
    public function clear() : void;
}
namespace OCP\Remote\Api;

/**
 * Provides access to the various apis of a remote instance
 *
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IApiCollection
{
    /**
     * @return IUserApi
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUserApi();
    /**
     * @return ICapabilitiesApi
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getCapabilitiesApi();
}
/**
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IApiFactory
{
    /**
     * @param IInstance $instance
     * @param ICredentials $credentials
     * @return IApiCollection
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getApiCollection(\OCP\Remote\IInstance $instance, \OCP\Remote\ICredentials $credentials);
}
/**
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface ICapabilitiesApi
{
    /**
     * @return array The capabilities in the form of [$appId => [$capability => $value]]
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getCapabilities();
}
/**
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IUserApi
{
    /**
     * @param string $userId
     * @return IUser
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUser($userId);
}
namespace OCP\Remote;

/**
 * The credentials for a remote user
 *
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface ICredentials
{
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUsername();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getPassword();
}
/**
 * Provides some basic info about a remote Nextcloud instance
 *
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IInstance
{
    /**
     * @return string The url of the remote server without protocol
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUrl();
    /**
     * @return string The of of the remote server with protocol
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getFullUrl();
    /**
     * @return string The full version string in '13.1.2.3' format
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getVersion();
    /**
     * @return string 'http' or 'https'
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getProtocol();
    /**
     * Check that the remote server is installed and not in maintenance mode
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     *
     * @return bool
     */
    public function isActive();
}
/**
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IInstanceFactory
{
    /**
     * @param string $url
     * @return IInstance
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getInstance($url);
}
/**
 * User info for a remote user
 *
 * @since 13.0.0
 * @deprecated 23.0.0
 */
interface IUser
{
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUserId();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getEmail();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getDisplayName();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getPhone();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getAddress();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getWebsite();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getTwitter();
    /**
     * @return string[]
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getGroups();
    /**
     * @return string
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getLanguage();
    /**
     * @return int
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getUsedSpace();
    /**
     * @return int
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getFreeSpace();
    /**
     * @return int
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getTotalSpace();
    /**
     * @return int
     *
     * @since 13.0.0
     * @deprecated 23.0.0
     */
    public function getQuota();
}
namespace OCP\RichObjectStrings;

/**
 * Class InvalidObjectExeption
 *
 * @since 11.0.0
 */
class InvalidObjectExeption extends \InvalidArgumentException
{
}
/**
 * Class Validator
 *
 * @since 11.0.0
 */
interface IValidator
{
    /**
     * @param string $subject
     * @param array[] $parameters
     * @throws InvalidObjectExeption
     * @since 11.0.0
     */
    public function validate($subject, array $parameters);
}
/**
 * Class Definitions
 *
 * @since 11.0.0
 */
class Definitions
{
    /**
     * @var array
     * @since 11.0.0
     */
    public $definitions = ['addressbook' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the addressbook on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the addressbook which should be used in the visual representation', 'example' => 'Contacts']]], 'addressbook-contact' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the contact on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the contact which should be used in the visual representation', 'example' => 'John Doe']]], 'announcement' => ['author' => 'Joas Schilling', 'app' => 'announcementcenter', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the announcement on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The announcement subject which should be used in the visual representation', 'example' => 'file.txt'], 'link' => ['since' => '11.0.0', 'required' => false, 'description' => 'The full URL to the file', 'example' => 'http://localhost/index.php/apps/announcements/#23']]], 'app' => ['author' => 'Nextcloud', 'app' => 'updatenotification', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The app id', 'example' => 'updatenotification'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The name of the app which should be used in the visual representation', 'example' => 'Update notification']]], 'calendar' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the calendar on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the calendar which should be used in the visual representation', 'example' => 'Personal']]], 'calendar-event' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the event on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the event which should be used in the visual representation', 'example' => 'Workout'], 'link' => ['since' => '19.0.0', 'required' => false, 'description' => 'A link to the page displaying the calendar', 'example' => 'http://localhost/index.php/apps/calendar/dayGridMonth/2020-01-20/edit/sidebar/base64string/1579046400']]], 'call' => ['author' => 'Nextcloud', 'app' => 'spreed', 'since' => '11.0.2', 'parameters' => ['id' => ['since' => '11.0.2', 'required' => true, 'description' => 'The id used to identify the call on the instance', 'example' => '42'], 'name' => ['since' => '11.0.2', 'required' => true, 'description' => 'The display name of the call which should be used in the visual representation', 'example' => 'Company call'], 'call-type' => ['since' => '11.0.2', 'required' => true, 'description' => 'The type of the call: one2one, group or public', 'example' => 'one2one'], 'link' => ['since' => '19.0.0', 'required' => false, 'description' => 'The link to the conversation', 'example' => 'https://localhost/index.php/call/R4nd0mToken'], 'icon-url' => ['since' => '27.0.0', 'required' => false, 'description' => 'The icon url to use as avatar', 'example' => 'https://localhost/ocs/v2.php/apps/spreed/api/v1/room/R4nd0mToken/avatar'], 'message-id' => ['since' => '27.0.0', 'required' => false, 'description' => 'The id of a message that was referred to', 'example' => '12345']]], 'circle' => ['author' => 'Maxence Lange', 'app' => 'circles', 'since' => '12.0.0', 'parameters' => ['id' => ['since' => '12.0.0', 'required' => true, 'description' => 'The id used to identify the circle on the instance', 'example' => '42'], 'name' => ['since' => '12.0.0', 'required' => true, 'description' => 'The display name of the circle which should be used in the visual representation', 'example' => 'My friends'], 'link' => ['since' => '12.0.0', 'required' => true, 'description' => 'The full URL to the circle', 'example' => 'http://localhost/index.php/apps/circles/#42']]], 'deck-board' => ['author' => 'Nextcloud', 'app' => 'deck', 'since' => '21.0.0', 'parameters' => ['id' => ['since' => '21.0.0', 'required' => true, 'description' => 'The id used to identify the board on the instance', 'example' => '1'], 'name' => ['since' => '21.0.0', 'required' => true, 'description' => 'The display name of the deck board', 'example' => 'Personal'], 'link' => ['since' => '21.0.0', 'required' => true, 'description' => 'The full URL to the board', 'example' => 'http://localhost/index.php/apps/deck/#/board/1']]], 'deck-card' => ['author' => 'Nextcloud', 'app' => 'deck', 'since' => '21.0.0', 'parameters' => ['id' => ['since' => '21.0.0', 'required' => true, 'description' => 'The id used to identify the card on the instance', 'example' => '1'], 'name' => ['since' => '21.0.0', 'required' => true, 'description' => 'The title of the deck card', 'example' => 'Foo Bar'], 'boardname' => ['since' => '21.0.0', 'required' => true, 'description' => 'The display name of board which contains the card', 'example' => 'Personal'], 'stackname' => ['since' => '21.0.0', 'required' => true, 'description' => 'The display name of the stack which contains the card in the board', 'example' => 'To do'], 'link' => ['since' => '21.0.0', 'required' => true, 'description' => 'The full URL to the card directly', 'example' => 'https://nextcloud21.local/index.php/apps/deck/#/board/1/card/1']]], 'email' => ['author' => 'Nextcloud', 'app' => 'sharebymail', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The mail-address used to identify the event on the instance', 'example' => 'test@localhost'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of a matching contact or the email (fallback) which should be used in the visual representation', 'example' => 'Foo Bar']]], 'file' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the file on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The file name which should be used in the visual representation', 'example' => 'file.txt'], 'size' => ['since' => '21.0.0', 'required' => false, 'description' => 'The file size in bytes', 'example' => '3145728'], 'path' => ['since' => '11.0.0', 'required' => true, 'description' => 'The full path of the file for the user, should not start with a slash', 'example' => 'path/to/file.txt'], 'link' => ['since' => '11.0.0', 'required' => false, 'description' => 'The full URL to the file', 'example' => 'http://localhost/index.php/f/42'], 'mimetype' => ['since' => '16.0.0', 'required' => false, 'description' => 'The mimetype of the file/folder to allow clients to show a placeholder', 'example' => 'text/plain'], 'preview-available' => ['since' => '16.0.0', 'required' => false, 'description' => 'Whether or not a preview is available. If `no` the mimetype icon should be used', 'example' => 'yes'], 'mtime' => ['since' => '25.0.0', 'required' => false, 'description' => 'The mtime of the file/folder as unix timestamp', 'example' => '1661854213']]], 'forms-form' => ['author' => 'Nextcloud', 'app' => 'forms', 'since' => '21.0.1', 'parameters' => ['id' => ['since' => '21.0.1', 'required' => true, 'description' => 'The form-hash of the form', 'example' => 'q72GGqbfbLBC6xNB'], 'name' => ['since' => '21.0.1', 'required' => true, 'description' => 'The title of the form', 'example' => 'Nice Form'], 'link' => ['since' => '21.0.1', 'required' => true, 'description' => 'The full URL to the board', 'example' => 'http://localhost/index.php/apps/forms/q72GGqbfbLBC6xNB']]], 'guest' => ['author' => 'Nextcloud', 'app' => 'spreed', 'since' => '17.0.0', 'parameters' => ['id' => ['since' => '17.0.0', 'required' => true, 'description' => 'The id used to identify the guest user', 'example' => '42'], 'name' => ['since' => '17.0.0', 'required' => true, 'description' => 'Potential displayname of the guest user', 'example' => 'Foobar Cats']]], 'highlight' => ['author' => 'Nextcloud', 'app' => 'core', 'since' => '13.0.0', 'parameters' => ['id' => ['since' => '13.0.0', 'required' => true, 'description' => 'The id used to identify the highlighted object on the instance', 'example' => '42'], 'name' => ['since' => '13.0.0', 'required' => true, 'description' => 'The string that should be highlighted.', 'example' => 'Hello World'], 'link' => ['since' => '13.0.0', 'required' => false, 'description' => 'The full URL that should be opened when clicking the highlighted text.', 'example' => 'http://localhost/index.php/f/42']]], 'geo-location' => ['author' => 'Nextcloud', 'app' => 'core', 'since' => '22.0.0', 'parameters' => ['id' => ['since' => '22.0.0', 'required' => true, 'description' => 'The geo URI (https://en.wikipedia.org/wiki/Geo_URI_scheme) to identify the location', 'example' => 'geo:52.5450511,13.3741463'], 'name' => ['since' => '22.0.0', 'required' => true, 'description' => 'A description of the location', 'example' => 'Nextcloud Berlin Office'], 'latitude' => ['since' => '22.0.0', 'required' => true, 'description' => 'The latitude of the location MUST be the same as in the id', 'example' => '52.5450511'], 'longitude' => ['since' => '22.0.0', 'required' => true, 'description' => 'The longitude of the location MUST be the same as in the id', 'example' => '13.3741463']]], 'open-graph' => ['author' => 'Maxence Lange', 'app' => 'mood', 'since' => '12.0.0', 'parameters' => ['id' => ['since' => '12.0.0', 'required' => true, 'description' => 'The id used to identify the open graph data on the instance', 'example' => '42'], 'name' => ['since' => '12.0.0', 'required' => true, 'description' => 'The open graph title of the website', 'example' => 'This is a website'], 'description' => ['since' => '12.0.0', 'required' => false, 'description' => 'The open graph description from the website', 'example' => 'This is the description of the website'], 'thumb' => ['since' => '12.0.0', 'required' => false, 'description' => 'The full URL of the open graph thumbnail', 'example' => 'http://localhost/index.php/apps/mood/data/image?url=https%3A%2F%2Fthumb.example.com%2Fimage.png'], 'website' => ['since' => '12.0.0', 'required' => false, 'description' => 'The name of the described website', 'example' => 'Nextcloud - App Store'], 'link' => ['since' => '12.0.0', 'required' => false, 'description' => 'The full link to the website', 'example' => 'https://apps.nextcloud.com/apps/mood']]], 'pending-federated-share' => ['author' => 'Nextcloud', 'app' => 'dav', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the federated share on the instance', 'example' => '42'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The name of the shared item which should be used in the visual representation', 'example' => 'file.txt']]], 'systemtag' => ['author' => 'Nextcloud', 'app' => 'core', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the systemtag on the instance', 'example' => '23'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the systemtag which should be used in the visual representation', 'example' => 'Project 1'], 'visibility' => ['since' => '11.0.0', 'required' => true, 'description' => 'If the user can see the systemtag', 'example' => '1'], 'assignable' => ['since' => '11.0.0', 'required' => true, 'description' => 'If the user can assign the systemtag', 'example' => '0']]], 'talk-attachment' => ['author' => 'Nextcloud', 'app' => 'talk', 'since' => '18.0.0', 'parameters' => ['id' => ['since' => '18.0.0', 'required' => true, 'description' => 'The id used to identify the attachment on the instance', 'example' => '12345'], 'name' => ['since' => '18.0.0', 'required' => true, 'description' => 'The name of the attachment', 'example' => 'John Doe'], 'conversation' => ['since' => '18.0.0', 'required' => true, 'description' => 'The token of the conversation', 'example' => 'a1b2c3d4'], 'mimetype' => ['since' => '18.0.0', 'required' => false, 'description' => 'The mimetype of the file/folder to allow clients to show a placeholder', 'example' => 'text/plain'], 'preview-available' => ['since' => '18.0.0', 'required' => false, 'description' => 'Whether or not a preview is available. If `no` the mimetype icon should be used', 'example' => 'yes']]], 'talk-poll' => ['author' => 'Nextcloud', 'app' => 'talk', 'since' => '25.0.0', 'parameters' => ['id' => ['since' => '25.0.0', 'required' => true, 'description' => 'The id used to identify the poll on the instance', 'example' => '12345'], 'name' => ['since' => '25.0.0', 'required' => true, 'description' => 'The poll question', 'example' => 'What is the question?']]], 'user' => ['author' => 'Nextcloud', 'app' => 'core', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the user on the instance', 'example' => 'johndoe'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the user which should be used in the visual representation', 'example' => 'John Doe'], 'server' => ['since' => '11.0.0', 'required' => false, 'description' => 'The URL of the instance the user lives on', 'example' => 'localhost']]], 'user-group' => ['author' => 'Nextcloud', 'app' => 'core', 'since' => '11.0.0', 'parameters' => ['id' => ['since' => '11.0.0', 'required' => true, 'description' => 'The id used to identify the group on the instance', 'example' => 'supportteam'], 'name' => ['since' => '11.0.0', 'required' => true, 'description' => 'The display name of the group which should be used in the visual representation', 'example' => 'Support Team']]]];
    /**
     * @param string $type
     * @return array
     * @throws InvalidObjectExeption
     * @since 11.0.0
     */
    public function getDefinition($type)
    {
    }
}
namespace OCP\Route;

/**
 * Interface IRoute
 *
 * @since 7.0.0
 */
interface IRoute
{
    /**
     * Specify PATCH as the method to use with this route
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function patch();
    /**
     * Specify the method when this route is to be used
     *
     * @param string $method HTTP method (uppercase)
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function method($method);
    /**
     * The action to execute when this route matches, includes a file like
     * it is called directly
     *
     * @param string $file
     * @return void
     * @since 7.0.0
     */
    public function actionInclude($file);
    /**
     * Specify GET as the method to use with this route
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function get();
    /**
     * Specify POST as the method to use with this route
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function post();
    /**
     * Specify DELETE as the method to use with this route
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function delete();
    /**
     * The action to execute when this route matches
     *
     * @param string|callable $class the class or a callable
     * @param string $function the function to use with the class
     * @return \OCP\Route\IRoute
     *
     * This function is called with $class set to a callable or
     * to the class with $function
     * @since 7.0.0
     */
    public function action($class, $function = null);
    /**
     * Defaults to use for this route
     *
     * @param array $defaults The defaults
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function defaults($defaults);
    /**
     * Requirements for this route
     *
     * @param array $requirements The requirements
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function requirements($requirements);
    /**
     * Specify PUT as the method to use with this route
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     */
    public function put();
}
/**
 * Interface IRouter
 *
 * @since 7.0.0
 * @deprecated 9.0.0
 */
interface IRouter
{
    /**
     * Create a \OCP\Route\IRoute.
     *
     * @param string $name Name of the route to create.
     * @param string $pattern The pattern to match
     * @param array $defaults An array of default parameter values
     * @param array $requirements An array of requirements for parameters (regexes)
     * @return \OCP\Route\IRoute
     * @since 7.0.0
     * @deprecated 9.0.0
     */
    public function create($name, $pattern, array $defaults = [], array $requirements = []);
}
namespace OCP\Search;

/**
 * Interface for search providers
 *
 * These providers will be implemented in apps, so they can participate in the
 * global search results of Nextcloud. If an app provides more than one type of
 * resource, e.g. contacts and address books in Nextcloud Contacts, it should
 * register one provider per group.
 *
 * @since 20.0.0
 */
interface IProvider
{
    /**
     * Get the unique ID of this search provider
     *
     * Ideally this should be the app name or an identifier identified with the
     * app name, especially if the app registers more than one provider.
     *
     * Example: 'mail', 'mail_recipients', 'files_sharing'
     *
     * @return string
     *
     * @since 20.0.0
     */
    public function getId() : string;
    /**
     * Get the translated name of this search provider
     *
     * Example: 'Mail', 'Contacts'...
     *
     * @return string
     *
     * @since 20.0.0
     */
    public function getName() : string;
    /**
     * Get the search provider order
     * The lower the int, the higher it will be sorted (0 will be before 10)
     *
     * @param string $route the route the user is currently at, e.g. files.view.index
     * @param array $routeParameters the parameters of the route the user is currently at, e.g. [fileId = 982, dir = "/"]
     *
     * @return int
     *
     * @since 20.0.0
     */
    public function getOrder(string $route, array $routeParameters) : int;
    /**
     * Find matching search entries in an app
     *
     * Search results can either be a complete list of all the matches the app can
     * find, or ideally a paginated result set where more data can be fetched on
     * demand. To be able to tell where the next offset starts the search uses
     * "cursors" which are a property of the last result entry. E.g. search results
     * that show most recent entries first can look for entries older than the last
     * one of the first result set. This approach was chosen over a numeric limit/
     * offset approach as the offset moves as new data comes in. The cursor is
     * resistant to these changes and will still show results without overlaps or
     * gaps.
     *
     * See https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89
     * for the concept of cursors.
     *
     * Implementations that return result pages have to adhere to the limit
     * property of a search query.
     *
     * @param IUser $user
     * @param ISearchQuery $query
     *
     * @return SearchResult
     *
     * @since 20.0.0
     */
    public function search(\OCP\IUser $user, \OCP\Search\ISearchQuery $query) : \OCP\Search\SearchResult;
}
/**
 * Provides a template for search functionality throughout Nextcloud;
 * @since 7.0.0
 * @deprecated 20.0.0
 */
abstract class Provider
{
    /**
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public const OPTION_APPS = 'apps';
    /**
     * List of options
     * @var array
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    protected $options;
    /**
     * Constructor
     * @param array $options as key => value
     * @since 7.0.0 - default value for $options was added in 8.0.0
     * @deprecated 20.0.0
     */
    public function __construct($options = [])
    {
    }
    /**
     * get a value from the options array or null
     * @param string $key
     * @return mixed
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public function getOption($key)
    {
    }
    /**
     * checks if the given apps and the apps this provider has results for intersect
     * returns true if the given array is empty (all apps)
     * or if this provider does not have a list of apps it provides results for (legacy search providers)
     * or if the two above arrays have elements in common (intersect)
     * @param string[] $apps
     * @return bool
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public function providesResultsFor(array $apps = [])
    {
    }
    /**
     * Search for $query
     * @param string $query
     * @return array An array of OCP\Search\Result's
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public abstract function search($query);
}
/**
 * Provides a template for search functionality throughout ownCloud;
 * @since 8.0.0
 * @deprecated 20.0.0
 */
abstract class PagedProvider extends \OCP\Search\Provider
{
    /**
     * show all results
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public const SIZE_ALL = 0;
    /**
     * Constructor
     * @param array $options
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public function __construct($options)
    {
    }
    /**
     * Search for $query
     * @param string $query
     * @return array An array of OCP\Search\Result's
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public function search($query)
    {
    }
    /**
     * Search for $query
     * @param string $query
     * @param int $page pages start at page 1
     * @param int $size 0 = SIZE_ALL
     * @return array An array of OCP\Search\Result's
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public abstract function searchPaged($query, $page, $size);
}
/**
 * The generic result of a search
 * @since 7.0.0
 * @deprecated 20.0.0
 */
class Result
{
    /**
     * A unique identifier for the result, usually given as the item ID in its
     * corresponding application.
     * @var string
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public $id;
    /**
     * The name of the item returned; this will be displayed in the search
     * results.
     * @var string
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public $name;
    /**
     * URL to the application item.
     * @var string
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public $link;
    /**
     * The type of search result returned; for consistency, name this the same
     * as the class name (e.g. \OC\Search\File -> 'file') in lowercase.
     * @var string
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public $type = 'generic';
    /**
     * Create a new search result
     * @param string $id unique identifier from application: '[app_name]/[item_identifier_in_app]'
     * @param string $name displayed text of result
     * @param string $link URL to the result within its app
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public function __construct($id = null, $name = null, $link = null)
    {
    }
}
/**
 * @since 20.0.0
 */
final class SearchResult implements \JsonSerializable
{
    /**
     * @param SearchResultEntry[] $entries
     *
     * @return static
     *
     * @since 20.0.0
     */
    public static function complete(string $name, array $entries) : self
    {
    }
    /**
     * @param SearchResultEntry[] $entries
     * @param int|string $cursor
     *
     * @return static
     *
     * @since 20.0.0
     */
    public static function paginated(string $name, array $entries, $cursor) : self
    {
    }
    /**
     * @return array
     *
     * @since 20.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * Represents an entry in a list of results an app returns for a unified search
 * query.
 *
 * The app providing the results has to extend this class for customization. In
 * most cases apps do not have to add any additional code.
 *
 * @example ``class MailResultEntry extends SearchResultEntry {}`
 *
 * This approach was chosen over a final class as it allows Nextcloud to later
 * add new optional properties of an entry without having to break the usage of
 * this class in apps.
 *
 * @since 20.0.0
 */
class SearchResultEntry implements \JsonSerializable
{
    /**
     * @var string
     * @since 20.0.0
     */
    protected $thumbnailUrl;
    /**
     * @var string
     * @since 20.0.0
     */
    protected $title;
    /**
     * @var string
     * @since 20.0.0
     */
    protected $subline;
    /**
     * @var string
     * @since 20.0.0
     */
    protected $resourceUrl;
    /**
     * @var string
     * @since 20.0.0
     */
    protected $icon;
    /**
     * @var boolean
     * @since 20.0.0
     */
    protected $rounded;
    /**
     * @var string[]
     * @psalm-var array<string, string>
     * @since 20.0.0
     */
    protected $attributes = [];
    /**
     * @param string $thumbnailUrl a relative or absolute URL to the thumbnail or icon of the entry
     * @param string $title a main title of the entry
     * @param string $subline the secondary line of the entry
     * @param string $resourceUrl the URL where the user can find the detail, like a deep link inside the app
     * @param string $icon the icon class or url to the icon
     * @param boolean $rounded is the thumbnail rounded
     *
     * @since 20.0.0
     */
    public function __construct(string $thumbnailUrl, string $title, string $subline, string $resourceUrl, string $icon = '', bool $rounded = false)
    {
    }
    /**
     * Add optional attributes to the result entry, e.g. an ID or some other
     * context information that can be read by the client application
     *
     * @param string $key
     * @param string $value
     *
     * @since 20.0.0
     */
    public function addAttribute(string $key, string $value) : void
    {
    }
    /**
     * @return array
     *
     * @since 20.0.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * The query objected passed into \OCP\Search\IProvider::search
 *
 * This mainly wraps the search term, but will ensure that Nextcloud can add new
 * optional properties to a search request without having break the interface of
 * \OCP\Search\IProvider::search.
 *
 * @see \OCP\Search\IProvider::search
 *
 * @since 20.0.0
 */
interface ISearchQuery
{
    /**
     * @since 20.0.0
     */
    public const SORT_DATE_DESC = 1;
    /**
     * Get the user-entered search term to find matches for
     *
     * @return string the search term
     * @since 20.0.0
     */
    public function getTerm() : string;
    /**
     * Get the sort order of results as defined as SORT_* constants on this interface
     *
     * @return int
     * @since 20.0.0
     */
    public function getSortOrder() : int;
    /**
     * Get the number of items to return for a paginated result
     *
     * @return int
     * @see \OCP\Search\IProvider for details
     * @since 20.0.0
     */
    public function getLimit() : int;
    /**
     * Get the app-specific cursor of the tail of the previous result entries
     *
     * @return int|string|null
     * @see \OCP\Search\IProvider for details
     * @since 20.0.0
     */
    public function getCursor();
    /**
     * @return string
     * @since 20.0.0
     */
    public function getRoute() : string;
    /**
     * @return array
     * @since 20.0.0
     */
    public function getRouteParameters() : array;
}
namespace OCP\Security\Bruteforce;

/**
 * Class Throttler implements the bruteforce protection for security actions in
 * Nextcloud.
 *
 * It is working by logging invalid login attempts to the database and slowing
 * down all login attempts from the same subnet. The max delay is 30 seconds and
 * the starting delay are 200 milliseconds. (after the first failed login)
 *
 * This is based on Paragonie's AirBrake for Airship CMS. You can find the original
 * code at https://github.com/paragonie/airship/blob/7e5bad7e3c0fbbf324c11f963fd1f80e59762606/src/Engine/Security/AirBrake.php
 *
 * @package OC\Security\Bruteforce
 * @since 25.0.0
 */
interface IThrottler
{
    /**
     * @since 25.0.0
     */
    public const MAX_DELAY = 25;
    /**
     * @since 25.0.0
     */
    public const MAX_DELAY_MS = 25000;
    // in milliseconds
    /**
     * @since 25.0.0
     */
    public const MAX_ATTEMPTS = 10;
    /**
     * Register a failed attempt to bruteforce a security control
     *
     * @param string $action
     * @param string $ip
     * @param array $metadata Optional metadata logged to the database
     * @since 25.0.0
     */
    public function registerAttempt(string $action, string $ip, array $metadata = []) : void;
    /**
     * Get the throttling delay (in milliseconds)
     *
     * @param string $ip
     * @param string $action optionally filter by action
     * @param float $maxAgeHours
     * @return int
     * @since 25.0.0
     */
    public function getAttempts(string $ip, string $action = '', float $maxAgeHours = 12) : int;
    /**
     * Get the throttling delay (in milliseconds)
     *
     * @param string $ip
     * @param string $action optionally filter by action
     * @return int
     * @since 25.0.0
     */
    public function getDelay(string $ip, string $action = '') : int;
    /**
     * Reset the throttling delay for an IP address, action and metadata
     *
     * @param string $ip
     * @param string $action
     * @param array $metadata
     * @since 25.0.0
     */
    public function resetDelay(string $ip, string $action, array $metadata) : void;
    /**
     * Reset the throttling delay for an IP address
     *
     * @param string $ip
     * @since 25.0.0
     */
    public function resetDelayForIP(string $ip) : void;
    /**
     * Will sleep for the defined amount of time
     *
     * @param string $ip
     * @param string $action optionally filter by action
     * @return int the time spent sleeping
     * @since 25.0.0
     */
    public function sleepDelay(string $ip, string $action = '') : int;
    /**
     * Will sleep for the defined amount of time unless maximum was reached in the last 30 minutes
     * In this case a "429 Too Many Request" exception is thrown
     *
     * @param string $ip
     * @param string $action optionally filter by action
     * @return int the time spent sleeping
     * @throws MaxDelayReached when reached the maximum
     * @since 25.0.0
     */
    public function sleepDelayOrThrowOnMax(string $ip, string $action = '') : int;
}
/**
 * Class MaxDelayReached
 * @since 19.0
 */
class MaxDelayReached extends \RuntimeException
{
}
namespace OCP\Security\CSP;

/**
 * Allows to inject something into the default content policy. This is for
 * example useful when you're injecting Javascript code into a view belonging
 * to another controller and cannot modify its Content-Security-Policy itself.
 * Note that the adjustment is only applied to applications that use AppFramework
 * controllers.
 *
 * WARNING: Using this API incorrectly may make the instance more insecure.
 * Do think twice before adding whitelisting resources. Please do also note
 * that it is not possible to use the `disallowXYZ` functions.
 *
 * @since 17.0.0
 */
class AddContentSecurityPolicyEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 17.0.0
     */
    public function __construct(\OC\Security\CSP\ContentSecurityPolicyManager $policyManager)
    {
    }
    /**
     * @since 17.0.0
     */
    public function addPolicy(\OCP\AppFramework\Http\EmptyContentSecurityPolicy $csp) : void
    {
    }
}
namespace OCP\Security\Events;

/**
 * @since 18.0.0
 */
class GenerateSecurePasswordEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function getPassword() : ?string
    {
    }
    /**
     * @since 18.0.0
     */
    public function setPassword(string $password) : void
    {
    }
}
/**
 * @since 18.0.0
 */
class ValidatePasswordPolicyEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(string $password)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
}
namespace OCP\Security\FeaturePolicy;

/**
 * Event that allows to register a feature policy header to a request.
 *
 * @since 17.0.0
 */
class AddFeaturePolicyEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 17.0.0
     */
    public function __construct(\OC\Security\FeaturePolicy\FeaturePolicyManager $policyManager)
    {
    }
    /**
     * @since 17.0.0
     */
    public function addPolicy(\OCP\AppFramework\Http\EmptyFeaturePolicy $policy)
    {
    }
}
namespace OCP\Security;

/**
 * Used for Content Security Policy manipulations
 *
 * @since 9.0.0
 * @deprecated 17.0.0 listen to the AddContentSecurityPolicyEvent to add a policy
 */
interface IContentSecurityPolicyManager
{
    /**
     * Allows to inject something into the default content policy. This is for
     * example useful when you're injecting Javascript code into a view belonging
     * to another controller and cannot modify its Content-Security-Policy itself.
     * Note that the adjustment is only applied to applications that use AppFramework
     * controllers.
     *
     * To use this from your `app.php` use `\OC::$server->getContentSecurityPolicyManager()->addDefaultPolicy($policy)`,
     * $policy has to be of type `\OCP\AppFramework\Http\ContentSecurityPolicy`.
     *
     * WARNING: Using this API incorrectly may make the instance more insecure.
     * Do think twice before adding whitelisting resources. Please do also note
     * that it is not possible to use the `disallowXYZ` functions.
     *
     * @param EmptyContentSecurityPolicy $policy
     * @since 9.0.0
     * @deprecated 17.0.0 listen to the AddContentSecurityPolicyEvent to add a policy
     */
    public function addDefaultPolicy(\OCP\AppFramework\Http\EmptyContentSecurityPolicy $policy);
}
/**
 * Class Hasher provides some basic hashing functions. Furthermore, it supports legacy hashes
 * used by previous versions of ownCloud and helps migrating those hashes to newer ones.
 *
 * The hashes generated by this class are prefixed (version|hash) with a version parameter to allow possible
 * updates in the future.
 * Possible versions:
 * 	- 1 (Initial version)
 *
 * Usage:
 * // Hashing a message
 * $hash = \OC::$server->getHasher()->hash('MessageToHash');
 * // Verifying a message - $newHash will contain the newly calculated hash
 * $newHash = null;
 * var_dump(\OC::$server->getHasher()->verify('a', '86f7e437faa5a7fce15d1ddcb9eaeaea377667b8', $newHash));
 * var_dump($newHash);
 *
 * @since 8.0.0
 */
interface IHasher
{
    /**
     * Hashes a message using PHP's `password_hash` functionality.
     * Please note that the size of the returned string is not guaranteed
     * and can be up to 255 characters.
     *
     * @param string $message Message to generate hash from
     * @return string Hash of the message with appended version parameter
     * @since 8.0.0
     */
    public function hash(string $message) : string;
    /**
     * @param string $message Message to verify
     * @param string $hash Assumed hash of the message
     * @param null|string &$newHash Reference will contain the updated hash if necessary. Update the existing hash with this one.
     * @return bool Whether $hash is a valid hash of $message
     * @since 8.0.0
     */
    public function verify(string $message, string $hash, &$newHash = null) : bool;
}
/**
 * Allows checking domains and full URLs against the list of trusted domains for
 * this server in the config file.
 *
 * @package OCP\Security
 * @since 23.0.0
 */
interface ITrustedDomainHelper
{
    /**
     * Checks whether a given URL is considered as trusted from the list
     * of trusted domains in the server's config file. If no trusted domains
     * have been configured and the url is valid, returns true.
     *
     * @param string $url
     * @return bool
     * @since 23.0.0
     */
    public function isTrustedUrl(string $url) : bool;
    /**
     * Checks whether a given domain is considered as trusted from the list
     * of trusted domains in the server's config file. If no trusted domains
     * have been configured, returns true.
     * This is used to prevent Host Header Poisoning.
     *
     * @param string $domainWithPort
     * @return bool
     * @since 23.0.0
     */
    public function isTrustedDomain(string $domainWithPort) : bool;
}
namespace OCP\Security\VerificationToken;

/**
 * @since 23.0.0
 */
interface IVerificationToken
{
    /**
     * Checks whether the a provided tokent matches a stored token and its
     * constraints. An InvalidTokenException is thrown on issues, otherwise
     * the check is successful.
     *
     * null can be passed as $user, but mind that this is for conveniently
     * passing the return of IUserManager::getUser() to this method. When
     * $user is null, InvalidTokenException is thrown for all the issued
     * tokens are user related.
     *
     * @throws InvalidTokenException
     * @since 23.0.0
     */
    public function check(string $token, ?\OCP\IUser $user, string $subject, string $passwordPrefix = '', bool $expiresWithLogin = false) : void;
    /**
     * @since 23.0.0
     */
    public function create(\OCP\IUser $user, string $subject, string $passwordPrefix = '') : string;
    /**
     * Deletes the token identified by the provided parameters
     *
     * @since 23.0.0
     */
    public function delete(string $token, \OCP\IUser $user, string $subject) : void;
}
/** @since 23.0.0 */
class InvalidTokenException extends \Exception
{
    /**
     * @since 23.0.0
     */
    public function __construct(int $code)
    {
    }
    /**
     * @var int
     * @since 23.0.0
     */
    public const USER_UNKNOWN = 1;
    /**
     * @var int
     * @since 23.0.0
     */
    public const TOKEN_NOT_FOUND = 2;
    /**
     * @var int
     * @since 23.0.0
     */
    public const TOKEN_DECRYPTION_ERROR = 3;
    /**
     * @var int
     * @since 23.0.0
     */
    public const TOKEN_INVALID_FORMAT = 4;
    /**
     * @var int
     * @since 23.0.0
     */
    public const TOKEN_EXPIRED = 5;
    /**
     * @var int
     * @since 23.0.0
     */
    public const TOKEN_MISMATCH = 6;
}
namespace OCP\Security;

/**
 * Store and retrieve credentials for external services
 *
 * @since 8.2.0
 */
interface ICredentialsManager
{
    /**
     * Store a set of credentials
     *
     * @param string $userId empty string for system-wide credentials
     * @param string $identifier
     * @param mixed $credentials
     * @since 8.2.0
     */
    public function store(string $userId, string $identifier, $credentials) : void;
    /**
     * Retrieve a set of credentials
     *
     * @param string $userId empty string for system-wide credentials
     * @param string $identifier
     * @return mixed
     * @since 8.2.0
     */
    public function retrieve(string $userId, string $identifier);
    /**
     * Delete a set of credentials
     *
     * @param string $userId empty string for system-wide credentials
     * @param string $identifier
     * @return int rows removed
     * @since 8.2.0
     */
    public function delete(string $userId, string $identifier) : int;
    /**
     * Erase all credentials stored for a user
     *
     * @param string $userId
     * @return int rows removed
     * @since 8.2.0
     */
    public function erase(string $userId) : int;
}
/**
 * Class Crypto provides a high-level encryption layer using AES-CBC. If no key has been provided
 * it will use the secret defined in config.php as key. Additionally the message will be HMAC'd.
 *
 * Usage:
 * $encryptWithDefaultPassword = \OC::$server->getCrypto()->encrypt('EncryptedText');
 * $encryptWithCustomPassword = \OC::$server->getCrypto()->encrypt('EncryptedText', 'password');
 *
 * @since 8.0.0
 */
interface ICrypto
{
    /**
     * @param string $message The message to authenticate
     * @param string $password Password to use (defaults to `secret` in config.php)
     * @return string Calculated HMAC
     * @since 8.0.0
     */
    public function calculateHMAC(string $message, string $password = '') : string;
    /**
     * Encrypts a value and adds an HMAC (Encrypt-Then-MAC)
     * @param string $plaintext
     * @param string $password Password to encrypt, if not specified the secret from config.php will be taken
     * @return string Authenticated ciphertext
     * @since 8.0.0
     */
    public function encrypt(string $plaintext, string $password = '') : string;
    /**
     * Decrypts a value and verifies the HMAC (Encrypt-Then-Mac)
     * @param string $authenticatedCiphertext
     * @param string $password Password to encrypt, if not specified the secret from config.php will be taken
     * @return string plaintext
     * @throws \Exception If the HMAC does not match
     * @throws \Exception If the decryption failed
     * @since 8.0.0
     */
    public function decrypt(string $authenticatedCiphertext, string $password = '') : string;
}
/**
 * Validator for remote hosts
 *
 * @since 26.0.0
 */
interface IRemoteHostValidator
{
    /**
     * Validate if a host may be connected to
     *
     * By default, Nextcloud does not connect to any local servers. That is neither
     * localhost nor any host in the local network.
     *
     * Admins can overwrite this behavior with the global `allow_local_remote_servers`
     * settings flag. If the flag is set to `true`, local hosts will be considered
     * valid.
     *
     * @param string $host hostname of the remote server, IPv4 or IPv6 address
     *
     * @return bool
     * @since 26.0.0
     */
    public function isValid(string $host) : bool;
}
/**
 * Class SecureRandom provides a wrapper around the random_int function to generate
 * secure random strings. For PHP 7 the native CSPRNG is used, older versions do
 * use a fallback.
 *
 * Usage:
 * \OC::$server->getSecureRandom()->generate(10);
 *
 * @since 8.0.0
 */
interface ISecureRandom
{
    /**
     * Flags for characters that can be used for <code>generate($length, $characters)</code>
     */
    public const CHAR_UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    public const CHAR_LOWER = 'abcdefghijklmnopqrstuvwxyz';
    public const CHAR_DIGITS = '0123456789';
    public const CHAR_SYMBOLS = '!\\"#$%&\\\'()*+,-./:;<=>?@[\\]^_`{|}~';
    public const CHAR_ALPHANUMERIC = self::CHAR_UPPER . self::CHAR_LOWER . self::CHAR_DIGITS;
    /**
     * Characters that can be used for <code>generate($length, $characters)</code>, to
     * generate human readable random strings. Lower- and upper-case characters and digits
     * are included. Characters which are ambiguous are excluded, such as I, l, and 1 and so on.
     */
    public const CHAR_HUMAN_READABLE = 'abcdefgijkmnopqrstwxyzABCDEFGHJKLMNPQRSTWXYZ23456789';
    /**
     * Generate a random string of specified length.
     * @param int $length The length of the generated string
     * @param string $characters An optional list of characters to use if no character list is
     * 							specified all valid base64 characters are used.
     * @return string
     * @since 8.0.0
     */
    public function generate(int $length, string $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/') : string;
}
namespace OCP\Session\Exceptions;

/**
 * @since 9.1.0
 */
class SessionNotAvailableException extends \Exception
{
}
namespace OCP\Settings;

/**
 * @since 9.1
 */
interface ISettings
{
    /**
     * @return TemplateResponse returns the instance with all parameters set, ready to be rendered
     * @since 9.1
     */
    public function getForm();
    /**
     * @return string|null the section ID, e.g. 'sharing' or null to not show the setting
     * @since 9.1
     */
    public function getSection();
    /**
     * @return int whether the form should be rather on the top or bottom of
     * the admin section. The forms are arranged in ascending order of the
     * priority values. It is required to return a value between 0 and 100.
     *
     * E.g.: 70
     * @since 9.1
     */
    public function getPriority();
}
/**
 * Special cases of settings that can be allowed to use by member of special
 * groups.
 * @since 23.0.0
 */
interface IDelegatedSettings extends \OCP\Settings\ISettings
{
    /**
     * Get the name of the settings to differentiate settings inside a section or
     * null if only the section name should be displayed.
     * @since 23.0.0
     */
    public function getName() : ?string;
    /**
     * Get a list of authorized app config that this setting is allowed to modify.
     * The format of the array is the following:
     * ```php
     * <?php
     * [
     * 		'app_name' => [
     * 			'/simple_key/', # value
     * 			'/s[a-z]*ldap/', # regex
     * 		],
     * 		'another_app_name => [ ... ],
     * ]
     * ```
     * @since 23.0.0
     */
    public function getAuthorizedAppConfig() : array;
}
/**
 * @since 12
 */
interface IIconSection
{
    /**
     * returns the ID of the section. It is supposed to be a lower case string,
     * e.g. 'ldap'
     *
     * @return string
     * @since 9.1
     */
    public function getID();
    /**
     * returns the translated name as it should be displayed, e.g. 'LDAP / AD
     * integration'. Use the L10N service to translate it.
     *
     * @return string
     * @since 9.1
     */
    public function getName();
    /**
     * @return int whether the form should be rather on the top or bottom of
     * the settings navigation. The sections are arranged in ascending order of
     * the priority values. It is required to return a value between 0 and 99.
     *
     * E.g.: 70
     * @since 9.1
     */
    public function getPriority();
    /**
     * returns the relative path to an 16*16 icon describing the section.
     * e.g. '/core/img/places/files.svg'
     *
     * @return string
     * @since 12
     */
    public function getIcon();
}
/**
 * @since 9.1
 */
interface IManager
{
    /**
     * @since 9.1.0
     */
    public const KEY_ADMIN_SETTINGS = 'admin';
    /**
     * @since 9.1.0
     */
    public const KEY_ADMIN_SECTION = 'admin-section';
    /**
     * @since 13.0.0
     */
    public const KEY_PERSONAL_SETTINGS = 'personal';
    /**
     * @since 13.0.0
     */
    public const KEY_PERSONAL_SECTION = 'personal-section';
    /**
     * @param string $type 'admin-section' or 'personal-section'
     * @param string $section Class must implement OCP\Settings\ISection
     * @since 14.0.0
     */
    public function registerSection(string $type, string $section);
    /**
     * @param string $type 'admin' or 'personal'
     * @param string $setting Class must implement OCP\Settings\ISettings
     * @since 14.0.0
     */
    public function registerSetting(string $type, string $setting);
    /**
     * returns a list of the admin sections
     *
     * @return array<int, array<int, IIconSection>> array from IConSection[] where key is the priority
     * @since 9.1.0
     */
    public function getAdminSections() : array;
    /**
     * returns a list of the personal sections
     *
     * @return array array of ISection[] where key is the priority
     * @since 13.0.0
     */
    public function getPersonalSections() : array;
    /**
     * returns a list of the admin settings
     *
     * @param string $section the section id for which to load the settings
     * @param bool $subAdminOnly only return settings sub admins are supposed to see (since 17.0.0)
     * @return array<int, array<int, ISettings>> array of ISettings[] where key is the priority
     * @since 9.1.0
     */
    public function getAdminSettings($section, bool $subAdminOnly = false) : array;
    /**
     * Returns a list of admin settings that the given user can use for the give section
     *
     * @return array<int, list<ISettings>> The array of admin settings there admin delegation is allowed.
     * @since 23.0.0
     */
    public function getAllowedAdminSettings(string $section, \OCP\IUser $user) : array;
    /**
     * Returns a list of admin settings that the given user can use.
     *
     * @return array<int, list<ISettings>> The array of admin settings there admin delegation is allowed.
     * @since 23.0.0
     */
    public function getAllAllowedAdminSettings(\OCP\IUser $user) : array;
    /**
     * returns a list of the personal  settings
     *
     * @param string $section the section id for which to load the settings
     * @return array array of ISettings[] where key is the priority
     * @since 13.0.0
     */
    public function getPersonalSettings($section) : array;
    /**
     * Get a specific section by type and id
     * @since 25.0.0
     */
    public function getSection(string $type, string $sectionId) : ?\OCP\Settings\IIconSection;
}
/**
 * Tagging interface for settings that should be shown to sub admins
 *
 * @since 17.0.0
 */
interface ISubAdminSettings extends \OCP\Settings\ISettings
{
}
namespace OCP\Share\Events;

/**
 * @since 18.0.0
 */
class ShareCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\Share\IShare $share)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getShare() : \OCP\Share\IShare
    {
    }
}
/**
 * @since 21.0.0
 */
class ShareDeletedEvent extends \OCP\EventDispatcher\Event
{
    /**
     *
     * @param IShare $share
     * @param IShare[] $children
     *
     * @since 21.0.0
     */
    public function __construct(\OCP\Share\IShare $share)
    {
    }
    /**
     * @return IShare
     * @since 21.0.0
     */
    public function getShare() : \OCP\Share\IShare
    {
    }
}
/**
 * @since 19.0.0
 */
class VerifyMountPointEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 19.0.0
     */
    public function __construct(\OCP\Share\IShare $share, \OC\Files\View $view, string $parent)
    {
    }
    /**
     * @since 19.0.0
     */
    public function getShare() : \OCP\Share\IShare
    {
    }
    /**
     * @since 19.0.0
     */
    public function getView() : \OC\Files\View
    {
    }
    /**
     * @since 19.0.0
     */
    public function getParent() : string
    {
    }
    /**
     * @since 19.0.0
     */
    public function setParent(string $parent) : void
    {
    }
}
namespace OCP\Share\Exceptions;

/**
 * Class GenericEncryptionException
 *
 * @since 9.0.0
 */
class GenericShareException extends \OCP\HintException
{
    /**
     * @param string $message
     * @param string $hint
     * @param int $code
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', $hint = '', $code = 0, \Exception $previous = null)
    {
    }
}
/**
 * @since 22.0.0
 */
class AlreadySharedException extends \OCP\Share\Exceptions\GenericShareException
{
    /**
     * @since 22.0.0
     */
    public function __construct(string $message, \OCP\Share\IShare $existingShare)
    {
    }
    /**
     * @since 22.0.0
     */
    public function getExistingShare() : \OCP\Share\IShare
    {
    }
}
/**
 * Exception for illegal attempts to modify an id of a share
 * @since 9.1.0
 */
class IllegalIDChangeException extends \OCP\Share\Exceptions\GenericShareException
{
}
/**
 * Class ShareNotFound
 *
 * @since 9.0.0
 */
class ShareNotFound extends \OCP\Share\Exceptions\GenericShareException
{
    /**
     * @param string $message
     * @param string $hint
     * @param int $code
     * @param \Exception|null $previous
     * @since 9.0.0
     */
    public function __construct($message = '', ...$arguments)
    {
    }
}
namespace OCP\Share;

/**
 * Interface IAttributes
 *
 * @package OCP\Share
 * @since 25.0.0
 */
interface IAttributes
{
    /**
     * Sets an attribute enabled/disabled. If the key did not exist before it will be created.
     *
     * @param string $scope scope
     * @param string $key key
     * @param bool $enabled enabled
     * @return IAttributes The modified object
     * @since 25.0.0
     */
    public function setAttribute($scope, $key, $enabled);
    /**
     * Returns if attribute is enabled/disabled for given scope id and key.
     * If attribute does not exist, returns null
     *
     * @param string $scope scope
     * @param string $key key
     * @return bool|null
     * @since 25.0.0
     */
    public function getAttribute($scope, $key);
    /**
     * Formats the IAttributes object to array with the following format:
     * [
     * 	0 => [
     * 			"scope" => <string>,
     * 			"key" => <string>,
     * 			"enabled" => <bool>
     * 		],
     * 	...
     * ]
     *
     * @return array formatted IAttributes
     * @since 25.0.0
     */
    public function toArray();
}
/**
 * This interface allows to manage sharing files between users and groups.
 *
 * This interface must not be implemented in your application but
 * instead should be used as a service and injected in your code with
 * dependency injection.
 *
 * @since 9.0.0
 */
interface IManager
{
    /**
     * Create a Share
     *
     * @param IShare $share
     * @return IShare The share object
     * @throws \Exception
     * @since 9.0.0
     */
    public function createShare(\OCP\Share\IShare $share);
    /**
     * Update a share.
     * The target of the share can't be changed this way: use moveShare
     * The share can't be removed this way (permission 0): use deleteShare
     * The state can't be changed this way: use acceptShare
     *
     * @param IShare $share
     * @return IShare The share object
     * @throws \InvalidArgumentException
     * @since 9.0.0
     */
    public function updateShare(\OCP\Share\IShare $share);
    /**
     * Accept a share.
     *
     * @param IShare $share
     * @param string $recipientId
     * @return IShare The share object
     * @throws \InvalidArgumentException
     * @since 18.0.0
     */
    public function acceptShare(\OCP\Share\IShare $share, string $recipientId) : \OCP\Share\IShare;
    /**
     * Delete a share
     *
     * @param IShare $share
     * @throws ShareNotFound
     * @throws \InvalidArgumentException
     * @since 9.0.0
     */
    public function deleteShare(\OCP\Share\IShare $share);
    /**
     * Unshare a file as the recipient.
     * This can be different from a regular delete for example when one of
     * the users in a groups deletes that share. But the provider should
     * handle this.
     *
     * @param IShare $share
     * @param string $recipientId
     * @since 9.0.0
     */
    public function deleteFromSelf(\OCP\Share\IShare $share, $recipientId);
    /**
     * Restore the share when it has been deleted
     * Certain share types can be restored when they have been deleted
     * but the provider should properly handle this\
     *
     * @param IShare $share The share to restore
     * @param string $recipientId The user to restore the share for
     * @return IShare The restored share object
     * @throws GenericShareException In case restoring the share failed
     *
     * @since 14.0.0
     */
    public function restoreShare(\OCP\Share\IShare $share, string $recipientId) : \OCP\Share\IShare;
    /**
     * Move the share as a recipient of the share.
     * This is updating the share target. So where the recipient has the share mounted.
     *
     * @param IShare $share
     * @param string $recipientId
     * @return IShare
     * @throws \InvalidArgumentException If $share is a link share or the $recipient does not match
     * @since 9.0.0
     */
    public function moveShare(\OCP\Share\IShare $share, $recipientId);
    /**
     * Get all shares shared by (initiated) by the provided user in a folder.
     *
     * @param string $userId
     * @param Folder $node
     * @param bool $reshares
     * @param bool $shallow Whether the method should stop at the first level, or look into sub-folders.
     * @return IShare[][] [$fileId => IShare[], ...]
     * @since 11.0.0
     */
    public function getSharesInFolder($userId, \OCP\Files\Folder $node, $reshares = false, $shallow = true);
    /**
     * Get shares shared by (initiated) by the provided user.
     *
     * @param string $userId
     * @param int $shareType
     * @param Node|null $path
     * @param bool $reshares
     * @param int $limit The maximum number of returned results, -1 for all results
     * @param int $offset
     * @return IShare[]
     * @since 9.0.0
     */
    public function getSharesBy($userId, $shareType, $path = null, $reshares = false, $limit = 50, $offset = 0);
    /**
     * Get shares shared with $user.
     * Filter by $node if provided
     *
     * @param string $userId
     * @param int $shareType
     * @param Node|null $node
     * @param int $limit The maximum number of shares returned, -1 for all
     * @param int $offset
     * @return IShare[]
     * @since 9.0.0
     */
    public function getSharedWith($userId, $shareType, $node = null, $limit = 50, $offset = 0);
    /**
     * Get deleted shares shared with $user.
     * Filter by $node if provided
     *
     * @param string $userId
     * @param int $shareType
     * @param Node|null $node
     * @param int $limit The maximum number of shares returned, -1 for all
     * @param int $offset
     * @return IShare[]
     * @since 14.0.0
     */
    public function getDeletedSharedWith($userId, $shareType, $node = null, $limit = 50, $offset = 0);
    /**
     * Retrieve a share by the share id.
     * If the recipient is set make sure to retrieve the file for that user.
     * This makes sure that if a user has moved/deleted a group share this
     * is reflected.
     *
     * @param string $id
     * @param string|null $recipient userID of the recipient
     * @return IShare
     * @throws ShareNotFound
     * @since 9.0.0
     */
    public function getShareById($id, $recipient = null);
    /**
     * Get the share by token possible with password
     *
     * @param string $token
     * @return IShare
     * @throws ShareNotFound
     * @since 9.0.0
     */
    public function getShareByToken($token);
    /**
     * Verify the password of a public share
     *
     * @param IShare $share
     * @param ?string $password
     * @return bool
     * @since 9.0.0
     */
    public function checkPassword(\OCP\Share\IShare $share, $password);
    /**
     * The user with UID is deleted.
     * All share providers have to cleanup the shares with this user as well
     * as shares owned by this user.
     * Shares only initiated by this user are fine.
     *
     * @param string $uid
     * @since 9.1.0
     */
    public function userDeleted($uid);
    /**
     * The group with $gid is deleted
     * We need to clear up all shares to this group
     *
     * @param string $gid
     * @since 9.1.0
     */
    public function groupDeleted($gid);
    /**
     * The user $uid is deleted from the group $gid
     * All user specific group shares have to be removed
     *
     * @param string $uid
     * @param string $gid
     * @since 9.1.0
     */
    public function userDeletedFromGroup($uid, $gid);
    /**
     * Get access list to a path. This means
     * all the users that can access a given path.
     *
     * Consider:
     * -root
     * |-folder1 (23)
     *  |-folder2 (32)
     *   |-fileA (42)
     *
     * fileA is shared with user1 and user1@server1
     * folder2 is shared with group2 (user4 is a member of group2)
     * folder1 is shared with user2 (renamed to "folder (1)") and user2@server2
     *
     * Then the access list to '/folder1/folder2/fileA' with $currentAccess is:
     * [
     *  users  => [
     *      'user1' => ['node_id' => 42, 'node_path' => '/fileA'],
     *      'user4' => ['node_id' => 32, 'node_path' => '/folder2'],
     *      'user2' => ['node_id' => 23, 'node_path' => '/folder (1)'],
     *  ],
     *  remote => [
     *      'user1@server1' => ['node_id' => 42, 'token' => 'SeCr3t'],
     *      'user2@server2' => ['node_id' => 23, 'token' => 'FooBaR'],
     *  ],
     *  public => bool
     *  mail => bool
     * ]
     *
     * The access list to '/folder1/folder2/fileA' **without** $currentAccess is:
     * [
     *  users  => ['user1', 'user2', 'user4'],
     *  remote => bool,
     *  public => bool
     *  mail => bool
     * ]
     *
     * This is required for encryption/activity
     *
     * @param \OCP\Files\Node $path
     * @param bool $recursive Should we check all parent folders as well
     * @param bool $currentAccess Should the user have currently access to the file
     * @return array
     * @since 12
     */
    public function getAccessList(\OCP\Files\Node $path, $recursive = true, $currentAccess = false);
    /**
     * Instantiates a new share object. This is to be passed to
     * createShare.
     *
     * @return IShare
     * @since 9.0.0
     */
    public function newShare();
    /**
     * Is the share API enabled
     *
     * @return bool
     * @since 9.0.0
     */
    public function shareApiEnabled();
    /**
     * Is public link sharing enabled
     *
     * @return bool
     * @since 9.0.0
     */
    public function shareApiAllowLinks();
    /**
     * Is password on public link requires
     *
     * @param bool $checkGroupMembership Check group membership exclusion
     * @return bool
     * @since 9.0.0
     * @since 24.0.0 Added optional $checkGroupMembership parameter
     */
    public function shareApiLinkEnforcePassword(bool $checkGroupMembership = true);
    /**
     * Is default expire date enabled
     *
     * @return bool
     * @since 9.0.0
     */
    public function shareApiLinkDefaultExpireDate();
    /**
     * Is default expire date enforced
     *`
     * @return bool
     * @since 9.0.0
     */
    public function shareApiLinkDefaultExpireDateEnforced();
    /**
     * Number of default expire days
     *
     * @return int
     * @since 9.0.0
     */
    public function shareApiLinkDefaultExpireDays();
    /**
     * Is default internal expire date enabled
     *
     * @return bool
     * @since 22.0.0
     */
    public function shareApiInternalDefaultExpireDate() : bool;
    /**
     * Is default remote expire date enabled
     *
     * @return bool
     * @since 22.0.0
     */
    public function shareApiRemoteDefaultExpireDate() : bool;
    /**
     * Is default expire date enforced
     *
     * @return bool
     * @since 22.0.0
     */
    public function shareApiInternalDefaultExpireDateEnforced() : bool;
    /**
     * Is default expire date enforced for remote shares
     *
     * @return bool
     * @since 22.0.0
     */
    public function shareApiRemoteDefaultExpireDateEnforced() : bool;
    /**
     * Number of default expire days
     *
     * @return int
     * @since 22.0.0
     */
    public function shareApiInternalDefaultExpireDays() : int;
    /**
     * Number of default expire days for remote shares
     *
     * @return int
     * @since 22.0.0
     */
    public function shareApiRemoteDefaultExpireDays() : int;
    /**
     * Allow public upload on link shares
     *
     * @return bool
     * @since 9.0.0
     */
    public function shareApiLinkAllowPublicUpload();
    /**
     * check if user can only share with group members
     * @return bool
     * @since 9.0.0
     */
    public function shareWithGroupMembersOnly();
    /**
     * Check if users can share with groups
     * @return bool
     * @since 9.0.1
     */
    public function allowGroupSharing();
    /**
     * Check if user enumeration is allowed
     *
     * @return bool
     * @since 19.0.0
     */
    public function allowEnumeration() : bool;
    /**
     * Check if user enumeration is limited to the users groups
     *
     * @return bool
     * @since 19.0.0
     */
    public function limitEnumerationToGroups() : bool;
    /**
     * Check if user enumeration is limited to the phonebook matches
     *
     * @return bool
     * @since 21.0.1
     */
    public function limitEnumerationToPhone() : bool;
    /**
     * Check if user enumeration is allowed to return on full match
     *
     * @return bool
     * @since 21.0.1
     */
    public function allowEnumerationFullMatch() : bool;
    /**
     * Check if the search should match the email
     *
     * @return bool
     * @since 25.0.0
     */
    public function matchEmail() : bool;
    /**
     * Check if the search should ignore the second in parentheses display name if there is any
     *
     * @return bool
     * @since 25.0.0
     */
    public function ignoreSecondDisplayName() : bool;
    /**
     * Check if the current user can enumerate the target user
     *
     * @param IUser|null $currentUser
     * @param IUser $targetUser
     * @return bool
     * @since 23.0.0
     */
    public function currentUserCanEnumerateTargetUser(?\OCP\IUser $currentUser, \OCP\IUser $targetUser) : bool;
    /**
     * Check if sharing is disabled for the given user
     *
     * @param string $userId
     * @return bool
     * @since 9.0.0
     */
    public function sharingDisabledForUser($userId);
    /**
     * Check if outgoing server2server shares are allowed
     * @return bool
     * @since 9.0.0
     */
    public function outgoingServer2ServerSharesAllowed();
    /**
     * Check if outgoing server2server shares are allowed
     * @return bool
     * @since 14.0.0
     */
    public function outgoingServer2ServerGroupSharesAllowed();
    /**
     * Check if a given share provider exists
     * @param int $shareType
     * @return bool
     * @since 11.0.0
     */
    public function shareProviderExists($shareType);
    /**
     * @param string $shareProviderClass
     * @since 21.0.0
     */
    public function registerShareProvider(string $shareProviderClass) : void;
    /**
     * @Internal
     *
     * Get all the shares as iterable to reduce memory overhead
     * Note, since this opens up database cursors the iterable should
     * be fully itterated.
     *
     * @return iterable
     * @since 18.0.0
     */
    public function getAllShares() : iterable;
}
/**
 * Interface IProviderFactory
 *
 * @since 9.0.0
 */
interface IProviderFactory
{
    /**
     * @param string $id
     * @return IShareProvider
     * @throws ProviderException
     * @since 9.0.0
     */
    public function getProvider($id);
    /**
     * @param int $shareType
     * @return IShareProvider
     * @throws ProviderException
     * @since 9.0.0
     */
    public function getProviderForType($shareType);
    /**
     * @return IShareProvider[]
     * @since 11.0.0
     */
    public function getAllProviders();
    /**
     * @since 21.0.0
     * @param string $shareProvier
     */
    public function registerProvider(string $shareProvier) : void;
}
/**
 * @since 26.0.0
 */
interface IPublicShareTemplateFactory
{
    /**
     * Returns a provider that is willing to respond for given share.
     * @since 26.0.0
     */
    public function getProvider(\OCP\Share\IShare $share) : \OCP\Share\IPublicShareTemplateProvider;
}
/**
 * @since 26.0.0
 */
interface IPublicShareTemplateProvider
{
    /**
     * Returns whether the provider can respond for the given share.
     * @since 26.0.0
     */
    public function shouldRespond(\OCP\Share\IShare $share) : bool;
    /**
     * Returns the a template for a given share.
     * @since 26.0.0
     */
    public function renderPage(\OCP\Share\IShare $share, string $token, string $path) : \OCP\AppFramework\Http\TemplateResponse;
}
/**
 * This interface allows to represent a share object.
 *
 * This interface must not be implemented in your application.
 *
 * @since 9.0.0
 */
interface IShare
{
    /**
     * @since 17.0.0
     */
    public const TYPE_USER = 0;
    /**
     * @since 17.0.0
     */
    public const TYPE_GROUP = 1;
    /**
     * @internal
     * @since 18.0.0
     */
    public const TYPE_USERGROUP = 2;
    /**
     * @since 17.0.0
     */
    public const TYPE_LINK = 3;
    /**
     * @since 17.0.0
     */
    public const TYPE_EMAIL = 4;
    /**
     * ToDo Check if it is still in use otherwise remove it
     * @since 17.0.0
     */
    // public const TYPE_CONTACT = 5;
    /**
     * @since 17.0.0
     */
    public const TYPE_REMOTE = 6;
    /**
     * @since 17.0.0
     */
    public const TYPE_CIRCLE = 7;
    /**
     * @since 17.0.0
     */
    public const TYPE_GUEST = 8;
    /**
     * @since 17.0.0
     */
    public const TYPE_REMOTE_GROUP = 9;
    /**
     * @since 17.0.0
     */
    public const TYPE_ROOM = 10;
    /**
     * Internal type used by RoomShareProvider
     * @since 17.0.0
     */
    // const TYPE_USERROOM = 11;
    /**
     * @since 21.0.0
     */
    public const TYPE_DECK = 12;
    /**
     * @internal
     * @since 21.0.0
     */
    public const TYPE_DECK_USER = 13;
    /**
     * @since 26.0.0
     */
    public const TYPE_SCIENCEMESH = 15;
    /**
     * @since 18.0.0
     */
    public const STATUS_PENDING = 0;
    /**
     * @since 18.0.0
     */
    public const STATUS_ACCEPTED = 1;
    /**
     * @since 18.0.0
     */
    public const STATUS_REJECTED = 2;
    /**
     * Set the internal id of the share
     * It is only allowed to set the internal id of a share once.
     * Attempts to override the internal id will result in an IllegalIDChangeException
     *
     * @param string $id
     * @return \OCP\Share\IShare
     * @throws IllegalIDChangeException
     * @throws \InvalidArgumentException
     * @since 9.1.0
     */
    public function setId($id);
    /**
     * Get the internal id of the share.
     *
     * @return string
     * @since 9.0.0
     */
    public function getId();
    /**
     * Get the full share id. This is the <providerid>:<internalid>.
     * The full id is unique in the system.
     *
     * @return string
     * @since 9.0.0
     * @throws \UnexpectedValueException If the fullId could not be constructed
     */
    public function getFullId();
    /**
     * Set the provider id of the share
     * It is only allowed to set the provider id of a share once.
     * Attempts to override the provider id will result in an IllegalIDChangeException
     *
     * @param string $id
     * @return \OCP\Share\IShare
     * @throws IllegalIDChangeException
     * @throws \InvalidArgumentException
     * @since 9.1.0
     */
    public function setProviderId($id);
    /**
     * Set the node of the file/folder that is shared
     *
     * @param Node $node
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setNode(\OCP\Files\Node $node);
    /**
     * Get the node of the file/folder that is shared
     *
     * @return File|Folder
     * @since 9.0.0
     * @throws NotFoundException
     */
    public function getNode();
    /**
     * Set file id for lazy evaluation of the node
     * @param int $fileId
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setNodeId($fileId);
    /**
     * Get the fileid of the node of this share
     * @return int
     * @since 9.0.0
     * @throws NotFoundException
     */
    public function getNodeId();
    /**
     * Set the type of node (file/folder)
     *
     * @param string $type
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setNodeType($type);
    /**
     * Get the type of node (file/folder)
     *
     * @return string
     * @since 9.0.0
     * @throws NotFoundException
     */
    public function getNodeType();
    /**
     * Set the shareType
     *
     * @param int $shareType
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setShareType($shareType);
    /**
     * Get the shareType
     *
     * @return int
     * @since 9.0.0
     */
    public function getShareType();
    /**
     * Set the receiver of this share.
     *
     * @param string $sharedWith
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setSharedWith($sharedWith);
    /**
     * Get the receiver of this share.
     *
     * @return string
     * @since 9.0.0
     */
    public function getSharedWith();
    /**
     * Set the display name of the receiver of this share.
     *
     * @param string $displayName
     * @return \OCP\Share\IShare The modified object
     * @since 14.0.0
     */
    public function setSharedWithDisplayName($displayName);
    /**
     * Get the display name of the receiver of this share.
     *
     * @return string
     * @since 14.0.0
     */
    public function getSharedWithDisplayName();
    /**
     * Set the avatar of the receiver of this share.
     *
     * @param string $src
     * @return \OCP\Share\IShare The modified object
     * @since 14.0.0
     */
    public function setSharedWithAvatar($src);
    /**
     * Get the avatar of the receiver of this share.
     *
     * @return string
     * @since 14.0.0
     */
    public function getSharedWithAvatar();
    /**
     * Set the permissions.
     * See \OCP\Constants::PERMISSION_*
     *
     * @param int $permissions
     * @return IShare The modified object
     * @since 9.0.0
     */
    public function setPermissions($permissions);
    /**
     * Get the share permissions
     * See \OCP\Constants::PERMISSION_*
     *
     * @return int
     * @since 9.0.0
     */
    public function getPermissions();
    /**
     * Create share attributes object
     *
     * @since 25.0.0
     * @return IAttributes
     */
    public function newAttributes() : \OCP\Share\IAttributes;
    /**
     * Set share attributes
     *
     * @param ?IAttributes $attributes
     * @since 25.0.0
     * @return IShare The modified object
     */
    public function setAttributes(?\OCP\Share\IAttributes $attributes);
    /**
     * Get share attributes
     *
     * @since 25.0.0
     * @return ?IAttributes
     */
    public function getAttributes() : ?\OCP\Share\IAttributes;
    /**
     * Set the accepted status
     * See self::STATUS_*
     *
     * @param int $status
     * @return IShare The modified object
     * @since 18.0.0
     */
    public function setStatus(int $status) : \OCP\Share\IShare;
    /**
     * Get the accepted status
     * See self::STATUS_*
     *
     * @return int
     * @since 18.0.0
     */
    public function getStatus() : int;
    /**
     * Attach a note to a share
     *
     * @param string $note
     * @return \OCP\Share\IShare The modified object
     * @since 14.0.0
     */
    public function setNote($note);
    /**
     * Get note attached to a share
     *
     * @return string
     * @since 14.0.0
     */
    public function getNote();
    /**
     * Set the expiration date
     *
     * @param null|\DateTime $expireDate
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setExpirationDate($expireDate);
    /**
     * Get the expiration date
     *
     * @return \DateTime
     * @since 9.0.0
     */
    public function getExpirationDate();
    /**
     * Is the share expired ?
     *
     * @return boolean
     * @since 18.0.0
     */
    public function isExpired();
    /**
     * set a label for a share, some shares, e.g. public links can have a label
     *
     * @param string $label
     * @return \OCP\Share\IShare The modified object
     * @since 15.0.0
     */
    public function setLabel($label);
    /**
     * get label for the share, some shares, e.g. public links can have a label
     *
     * @return string
     * @since 15.0.0
     */
    public function getLabel();
    /**
     * Set the sharer of the path.
     *
     * @param string $sharedBy
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setSharedBy($sharedBy);
    /**
     * Get share sharer
     *
     * @return string
     * @since 9.0.0
     */
    public function getSharedBy();
    /**
     * Set the original share owner (who owns the path that is shared)
     *
     * @param string $shareOwner
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setShareOwner($shareOwner);
    /**
     * Get the original share owner (who owns the path that is shared)
     *
     * @return string
     * @since 9.0.0
     */
    public function getShareOwner();
    /**
     * Set the password for this share.
     * When the share is passed to the share manager to be created
     * or updated the password will be hashed.
     *
     * @param string|null $password
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setPassword($password);
    /**
     * Get the password of this share.
     * If this share is obtained via a shareprovider the password is
     * hashed.
     *
     * @return string
     * @since 9.0.0
     */
    public function getPassword();
    /**
     * Set the password's expiration time of this share.
     *
     * @return self The modified object
     * @since 24.0.0
     */
    public function setPasswordExpirationTime(?\DateTimeInterface $passwordExpirationTime = null) : \OCP\Share\IShare;
    /**
     * Get the password's expiration time of this share.
     * @since 24.0.0
     */
    public function getPasswordExpirationTime() : ?\DateTimeInterface;
    /**
     * Set if the recipient can start a conversation with the owner to get the
     * password using Nextcloud Talk.
     *
     * @param bool $sendPasswordByTalk
     * @return \OCP\Share\IShare The modified object
     * @since 14.0.0
     */
    public function setSendPasswordByTalk(bool $sendPasswordByTalk);
    /**
     * Get if the recipient can start a conversation with the owner to get the
     * password using Nextcloud Talk.
     * The returned value does not take into account other factors, like Talk
     * being enabled for the owner of the share or not; it just cover whether
     * the option is enabled for the share itself or not.
     *
     * @return bool
     * @since 14.0.0
     */
    public function getSendPasswordByTalk() : bool;
    /**
     * Set the public link token.
     *
     * @param string $token
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setToken($token);
    /**
     * Get the public link token.
     *
     * @return string
     * @since 9.0.0
     */
    public function getToken();
    /**
     * Set the target path of this share relative to the recipients user folder.
     *
     * @param string $target
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setTarget($target);
    /**
     * Get the target path of this share relative to the recipients user folder.
     *
     * @return string
     * @since 9.0.0
     */
    public function getTarget();
    /**
     * Set the time this share was created
     *
     * @param \DateTime $shareTime
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setShareTime(\DateTime $shareTime);
    /**
     * Get the timestamp this share was created
     *
     * @return \DateTime
     * @since 9.0.0
     */
    public function getShareTime();
    /**
     * Set if the recipient is informed by mail about the share.
     *
     * @param bool $mailSend
     * @return \OCP\Share\IShare The modified object
     * @since 9.0.0
     */
    public function setMailSend($mailSend);
    /**
     * Get if the recipient informed by mail about the share.
     *
     * @return bool
     * @since 9.0.0
     */
    public function getMailSend();
    /**
     * Set the cache entry for the shared node
     *
     * @param ICacheEntry $entry
     * @since 11.0.0
     */
    public function setNodeCacheEntry(\OCP\Files\Cache\ICacheEntry $entry);
    /**
     * Get the cache entry for the shared node
     *
     * @return null|ICacheEntry
     * @since 11.0.0
     */
    public function getNodeCacheEntry();
    /**
     * Sets a shares hide download state
     * This is mainly for public shares. It will signal that the share page should
     * hide download buttons etc.
     *
     * @param bool $hide
     * @return IShare
     * @since 15.0.0
     */
    public function setHideDownload(bool $hide) : \OCP\Share\IShare;
    /**
     * Gets a shares hide download state
     * This is mainly for public shares. It will signal that the share page should
     * hide download buttons etc.
     *
     * @return bool
     * @since 15.0.0
     */
    public function getHideDownload() : bool;
}
/**
 * Interface IShareHelper
 *
 * @since 12
 */
interface IShareHelper
{
    /**
     * @param Node $node
     * @return array [ users => [Mapping $uid => $pathForUser], remotes => [Mapping $cloudId => $pathToMountRoot]]
     * @since 12
     */
    public function getPathsForAccessList(\OCP\Files\Node $node);
}
/**
 * Interface IShareProvider
 *
 * @since 9.0.0
 */
interface IShareProvider
{
    /**
     * Return the identifier of this provider.
     *
     * @return string Containing only [a-zA-Z0-9]
     * @since 9.0.0
     */
    public function identifier();
    /**
     * Create a share
     *
     * @param \OCP\Share\IShare $share
     * @return \OCP\Share\IShare The share object
     * @since 9.0.0
     */
    public function create(\OCP\Share\IShare $share);
    /**
     * Update a share
     *
     * @param \OCP\Share\IShare $share
     * @return \OCP\Share\IShare The share object
     * @since 9.0.0
     */
    public function update(\OCP\Share\IShare $share);
    /**
     * Accept a share.
     *
     * @param IShare $share
     * @param string $recipient
     * @return IShare The share object
     * @since 17.0.0
     */
    //	public function acceptShare(IShare $share, string $recipient): IShare;
    /**
     * Delete a share
     *
     * @param \OCP\Share\IShare $share
     * @since 9.0.0
     */
    public function delete(\OCP\Share\IShare $share);
    /**
     * Unshare a file from self as recipient.
     * This may require special handling. If a user unshares a group
     * share from their self then the original group share should still exist.
     *
     * @param \OCP\Share\IShare $share
     * @param string $recipient UserId of the recipient
     * @since 9.0.0
     */
    public function deleteFromSelf(\OCP\Share\IShare $share, $recipient);
    /**
     * Restore a share for a given recipient. The implementation could be provider independant.
     *
     * @param IShare $share
     * @param string $recipient
     * @return IShare The restored share object
     *
     * @since 14.0.0
     * @throws GenericShareException In case the share could not be restored
     */
    public function restore(\OCP\Share\IShare $share, string $recipient) : \OCP\Share\IShare;
    /**
     * Move a share as a recipient.
     * This is updating the share target. Thus the mount point of the recipient.
     * This may require special handling. If a user moves a group share
     * the target should only be changed for them.
     *
     * @param \OCP\Share\IShare $share
     * @param string $recipient userId of recipient
     * @return \OCP\Share\IShare
     * @since 9.0.0
     */
    public function move(\OCP\Share\IShare $share, $recipient);
    /**
     * Get all shares by the given user in a folder
     *
     * @param string $userId
     * @param Folder $node
     * @param bool $reshares Also get the shares where $user is the owner instead of just the shares where $user is the initiator
     * @param bool $shallow Whether the method should stop at the first level, or look into sub-folders.
     * @return \OCP\Share\IShare[][]
     * @since 11.0.0
     */
    public function getSharesInFolder($userId, \OCP\Files\Folder $node, $reshares, $shallow = true);
    /**
     * Get all shares by the given user
     *
     * @param string $userId
     * @param int $shareType
     * @param Node|null $node
     * @param bool $reshares Also get the shares where $user is the owner instead of just the shares where $user is the initiator
     * @param int $limit The maximum number of shares to be returned, -1 for all shares
     * @param int $offset
     * @return \OCP\Share\IShare[]
     * @since 9.0.0
     */
    public function getSharesBy($userId, $shareType, $node, $reshares, $limit, $offset);
    /**
     * Get share by id
     *
     * @param int $id
     * @param string|null $recipientId
     * @return \OCP\Share\IShare
     * @throws ShareNotFound
     * @since 9.0.0
     */
    public function getShareById($id, $recipientId = null);
    /**
     * Get shares for a given path
     *
     * @param Node $path
     * @return \OCP\Share\IShare[]
     * @since 9.0.0
     */
    public function getSharesByPath(\OCP\Files\Node $path);
    /**
     * Get shared with the given user
     *
     * @param string $userId get shares where this user is the recipient
     * @param int $shareType
     * @param Node|null $node
     * @param int $limit The max number of entries returned, -1 for all
     * @param int $offset
     * @return \OCP\Share\IShare[]
     * @since 9.0.0
     */
    public function getSharedWith($userId, $shareType, $node, $limit, $offset);
    /**
     * Get a share by token
     *
     * @param string $token
     * @return \OCP\Share\IShare
     * @throws ShareNotFound
     * @since 9.0.0
     */
    public function getShareByToken($token);
    /**
     * A user is deleted from the system
     * So clean up the relevant shares.
     *
     * @param string $uid
     * @param int $shareType
     * @since 9.1.0
     */
    public function userDeleted($uid, $shareType);
    /**
     * A group is deleted from the system.
     * We have to clean up all shares to this group.
     * Providers not handling group shares should just return
     *
     * @param string $gid
     * @since 9.1.0
     */
    public function groupDeleted($gid);
    /**
     * A user is deleted from a group
     * We have to clean up all the related user specific group shares
     * Providers not handling group shares should just return
     *
     * @param string $uid
     * @param string $gid
     * @since 9.1.0
     */
    public function userDeletedFromGroup($uid, $gid);
    /**
     * Get the access list to the array of provided nodes.
     *
     * @see IManager::getAccessList() for sample docs
     *
     * @param Node[] $nodes The list of nodes to get access for
     * @param bool $currentAccess If current access is required (like for removed shares that might get revived later)
     * @return array
     * @since 12
     */
    public function getAccessList($nodes, $currentAccess);
    /**
     * Get all the shares in this provider returned as iterable to reduce memory
     * overhead
     *
     * @return iterable
     * @since 18.0.0
     */
    public function getAllShares() : iterable;
}
namespace OCP;

/**
 * Interface that apps must implement to share content.
 * @since 5.0.0
 */
interface Share_Backend
{
    /**
     * Check if this $itemSource exist for the user
     * @param string $itemSource
     * @param string $uidOwner Owner of the item
     * @return boolean|null Source
     *
     * Return false if the item does not exist for the user
     * @since 5.0.0
     */
    public function isValidSource($itemSource, $uidOwner);
    /**
     * Get a unique name of the item for the specified user
     * @param string $itemSource
     * @param string|false $shareWith User the item is being shared with
     * @param array|null $exclude List of similar item names already existing as shared items @deprecated since version OC7
     * @return string Target name
     *
     * This function needs to verify that the user does not already have an item with this name.
     * If it does generate a new name e.g. name_#
     * @since 5.0.0
     */
    public function generateTarget($itemSource, $shareWith, $exclude = null);
    /**
     * Converts the shared item sources back into the item in the specified format
     * @param array $items Shared items
     * @param int $format
     * @return array
     *
     * The items array is a 3-dimensional array with the item_source as the
     * first key and the share id as the second key to an array with the share
     * info.
     *
     * The key/value pairs included in the share info depend on the function originally called:
     * If called by getItem(s)Shared: id, item_type, item, item_source,
     * share_type, share_with, permissions, stime, file_source
     *
     * If called by getItem(s)SharedWith: id, item_type, item, item_source,
     * item_target, share_type, share_with, permissions, stime, file_source,
     * file_target
     *
     * This function allows the backend to control the output of shared items with custom formats.
     * It is only called through calls to the public getItem(s)Shared(With) functions.
     * @since 5.0.0
     */
    public function formatItems($items, $format, $parameters = null);
    /**
     * Check if a given share type is allowed by the back-end
     *
     * @param int $shareType share type
     * @return boolean
     *
     * The back-end can enable/disable specific share types. Just return true if
     * the back-end doesn't provide any specific settings for it and want to allow
     * all share types defined by the share API
     * @since 8.0.0
     */
    public function isShareTypeAllowed($shareType);
}
/**
 * Interface for collections of of items implemented by another share backend.
 * Extends the Share_Backend interface.
 * @since 5.0.0
 */
interface Share_Backend_Collection extends \OCP\Share_Backend
{
    /**
     * Get the sources of the children of the item
     * @param string $itemSource
     * @return array Returns an array of children each inside an array with the keys: source, target, and file_path if applicable
     * @since 5.0.0
     */
    public function getChildren($itemSource);
}
/**
 * Interface for share backends that share content that is dependent on files.
 * Extends the Share_Backend interface.
 * @since 5.0.0
 */
interface Share_Backend_File_Dependent extends \OCP\Share_Backend
{
    /**
     * Get the file path of the item
     * @param string $itemSource
     * @param string $uidOwner User that is the owner of shared item
     * @return string|false
     * @since 5.0.0
     */
    public function getFilePath($itemSource, $uidOwner);
}
namespace OCP\Support\CrashReport;

/**
 * @since 13.0.0
 */
interface IReporter
{
    /**
     * Report an (unhandled) exception
     *
     * @since 13.0.0
     * @param Exception|Throwable $exception
     * @param array $context
     */
    public function report($exception, array $context = []);
}
/**
 * @since 15.0.0
 */
interface ICollectBreadcrumbs extends \OCP\Support\CrashReport\IReporter
{
    /**
     * Collect breadcrumbs for crash reports
     *
     * @param string $message
     * @param string $category
     * @param array $context
     *
     * @since 15.0.0
     */
    public function collect(string $message, string $category, array $context = []);
}
/**
 * @since 17.0.0
 */
interface IMessageReporter extends \OCP\Support\CrashReport\IReporter
{
    /**
     * Report a (error) message
     *
     * @param string $message
     * @param array $context
     *
     * @since 17.0.0
     */
    public function reportMessage(string $message, array $context = []) : void;
}
/**
 * @since 13.0.0
 * @deprecated used internally only
 */
interface IRegistry
{
    /**
     * Register a reporter instance
     *
     * @param IReporter $reporter
     *
     * @since 13.0.0
     * @deprecated 20.0.0 use IRegistrationContext::registerCrashReporter
     * @see IRegistrationContext::registerCrashReporter()
     */
    public function register(\OCP\Support\CrashReport\IReporter $reporter) : void;
    /**
     * Delegate breadcrumb collection to all registered reporters
     *
     * @param string $message
     * @param string $category
     * @param array $context
     *
     * @deprecated used internally only
     * @since 15.0.0
     */
    public function delegateBreadcrumb(string $message, string $category, array $context = []) : void;
    /**
     * Delegate crash reporting to all registered reporters
     *
     * @param Exception|Throwable $exception
     * @param array $context
     *
     * @deprecated used internally only
     * @since 13.0.0
     */
    public function delegateReport($exception, array $context = []);
    /**
     * Delegate a message to all reporters that implement IMessageReporter
     *
     * @param string $message
     * @param array $context
     *
     * @return void
     *
     * @deprecated used internally only
     * @since 17.0.0
     */
    public function delegateMessage(string $message, array $context = []) : void;
    /**
     * Check if any reporter has been registered to delegate to
     *
     * @return bool
     * @deprecated use internally only
     * @since 26.0.0
     */
    public function hasReporters() : bool;
}
namespace OCP\Support\Subscription\Exception;

/**
 * @since 17.0.0
 */
class AlreadyRegisteredException extends \Exception
{
}
namespace OCP\Support\Subscription;

/**
 * @since 26.0.0
 */
interface IAssertion
{
    /**
     * This method throws a localized exception when user limits are exceeded,
     * if applicable. Notifications are also created in that case. It is a
     * shorthand for a check against IRegistry::delegateIsHardUserLimitReached().
     *
     * @throws HintException
     * @since 26.0.0
     */
    public function createUserIsLegit() : void;
}
/**
 * @since 17.0.0
 */
interface IRegistry
{
    /**
     * Register a subscription instance. In case it is called multiple times an
     * exception is thrown
     *
     * @param ISubscription $subscription
     * @throws AlreadyRegisteredException
     *
     * @since 17.0.0
     * @deprecated 20.0.0 use registerService
     */
    public function register(\OCP\Support\Subscription\ISubscription $subscription) : void;
    /**
     * Register a subscription handler. The service has to implement the ISubscription interface.
     * In case this is called multiple times an exception is thrown.
     *
     * @param string $subscriptionService
     * @throws AlreadyRegisteredException
     *
     * @since 20.0.0
     */
    public function registerService(string $subscriptionService) : void;
    /**
     * Fetches the list of app IDs that are supported by the subscription
     *
     * @since 17.0.0
     */
    public function delegateGetSupportedApps() : array;
    /**
     * Indicates if a valid subscription is available
     *
     * @since 17.0.0
     */
    public function delegateHasValidSubscription() : bool;
    /**
     * Indicates if the subscription has extended support
     *
     * @since 17.0.0
     */
    public function delegateHasExtendedSupport() : bool;
    /**
     * Indicates if a hard user limit is reached and no new users should be created
     *
     * @param IManager|null $notificationManager
     * @since 21.0.0
     */
    public function delegateIsHardUserLimitReached(?\OCP\Notification\IManager $notificationManager = null) : bool;
}
/**
 * @since 17.0.0
 */
interface ISubscription
{
    /**
     * Indicates if a valid subscription is available
     *
     * @since 17.0.0
     */
    public function hasValidSubscription() : bool;
    /**
     * Indicates if the subscription has extended support
     *
     * @since 17.0.0
     */
    public function hasExtendedSupport() : bool;
    /**
     * Indicates if a hard user limit is reached and no new users should be created
     *
     * @since 21.0.0
     */
    public function isHardUserLimitReached() : bool;
}
/**
 * @since 17.0.0
 */
interface ISupportedApps extends \OCP\Support\Subscription\ISubscription
{
    /**
     * Fetches the list of app IDs that are supported by the subscription
     *
     * @since 17.0.0
     */
    public function getSupportedApps() : array;
}
namespace OCP\SystemTag;

/**
 * Public interface for a system-wide tag.
 *
 * @since 9.0.0
 */
interface ISystemTag
{
    /**
     * @since 22.0.0
     */
    public const ACCESS_LEVEL_PUBLIC = 0;
    /**
     * @since 22.0.0
     */
    public const ACCESS_LEVEL_RESTRICTED = 1;
    /**
     * @since 22.0.0
     */
    public const ACCESS_LEVEL_INVISIBLE = 2;
    /**
     * @since 22.0.0
     */
    public const ACCESS_LEVEL_LOOKUP = [\OCP\SystemTag\ISystemTag::ACCESS_LEVEL_PUBLIC => 'public', \OCP\SystemTag\ISystemTag::ACCESS_LEVEL_RESTRICTED => 'restricted', \OCP\SystemTag\ISystemTag::ACCESS_LEVEL_INVISIBLE => 'invisible'];
    /**
     * Returns the tag id
     *
     * @return string id
     *
     * @since 9.0.0
     */
    public function getId() : string;
    /**
     * Returns the tag display name
     *
     * @return string tag display name
     *
     * @since 9.0.0
     */
    public function getName() : string;
    /**
     * Returns whether the tag is visible for regular users
     *
     * @return bool true if visible, false otherwise
     *
     * @since 9.0.0
     */
    public function isUserVisible() : bool;
    /**
     * Returns whether the tag can be assigned to objects by regular users
     *
     * @return bool true if assignable, false otherwise
     *
     * @since 9.0.0
     */
    public function isUserAssignable() : bool;
    /**
     * Returns a term summarizing the access control flags
     *
     * @return int the level of access control
     *
     * @since 22.0.0
     */
    public function getAccessLevel() : int;
}
/**
 * Exception when a tag already exists.
 *
 * @since 9.0.0
 */
class TagAlreadyExistsException extends \RuntimeException
{
}
/**
 * Interface ISystemTagManagerFactory
 *
 * Factory interface for system tag managers
 *
 * @since 9.0.0
 */
interface ISystemTagManagerFactory
{
    /**
     * Constructor for the system tag manager factory
     *
     * @param IServerContainer $serverContainer server container
     * @since 9.0.0
     */
    public function __construct(\OCP\IServerContainer $serverContainer);
    /**
     * creates and returns an instance of the system tag manager
     *
     * @return ISystemTagManager
     * @since 9.0.0
     */
    public function getManager() : \OCP\SystemTag\ISystemTagManager;
    /**
     * creates and returns an instance of the system tag object
     * mapper
     *
     * @return ISystemTagObjectMapper
     * @since 9.0.0
     */
    public function getObjectMapper() : \OCP\SystemTag\ISystemTagObjectMapper;
}
/**
 * Public interface to access and manage system-wide tags.
 *
 * @since 9.0.0
 */
interface ISystemTagObjectMapper
{
    /**
     * Get a list of tag ids for the given object ids.
     *
     * This returns an array that maps object id to tag ids
     * [
     *   1 => array('id1', 'id2'),
     *   2 => array('id3', 'id2'),
     *   3 => array('id5'),
     *   4 => array()
     * ]
     *
     * Untagged objects will have an empty array associated.
     *
     * @param string|array $objIds object ids
     * @param string $objectType object type
     *
     * @return array with object id as key and an array
     * of tag ids as value
     *
     * @since 9.0.0
     */
    public function getTagIdsForObjects($objIds, string $objectType) : array;
    /**
     * Get a list of objects tagged with $tagIds.
     *
     * @param string|array $tagIds Tag id or array of tag ids.
     * @param string $objectType object type
     * @param int $limit Count of object ids you want to get
     * @param string $offset The last object id you already received
     *
     * @return string[] array of object ids or empty array if none found
     *
     * @throws TagNotFoundException if at least one of the
     * given tags does not exist
     * @throws \InvalidArgumentException When a limit is specified together with
     * multiple tag ids
     *
     * @since 9.0.0
     */
    public function getObjectIdsForTags($tagIds, string $objectType, int $limit = 0, string $offset = '') : array;
    /**
     * Assign the given tags to the given object.
     *
     * If at least one of the given tag ids doesn't exist, none of the tags
     * will be assigned.
     *
     * If the relationship already existed, fail silently.
     *
     * @param string $objId object id
     * @param string $objectType object type
     * @param string|array $tagIds tag id or array of tag ids to assign
     *
     * @throws TagNotFoundException if at least one of the
     * given tags does not exist
     *
     * @since 9.0.0
     */
    public function assignTags(string $objId, string $objectType, $tagIds);
    /**
     * Unassign the given tags from the given object.
     *
     * If at least one of the given tag ids doesn't exist, none of the tags
     * will be unassigned.
     *
     * If the relationship did not exist in the first place, fail silently.
     *
     * @param string $objId object id
     * @param string $objectType object type
     * @param string|array $tagIds tag id or array of tag ids to unassign
     *
     * @throws TagNotFoundException if at least one of the
     * given tags does not exist
     *
     * @since 9.0.0
     */
    public function unassignTags(string $objId, string $objectType, $tagIds);
    /**
     * Checks whether the given objects have the given tag.
     *
     * @param string|array $objIds object ids
     * @param string $objectType object type
     * @param string $tagId tag id to check
     * @param bool $all true to check that ALL objects have the tag assigned,
     * false to check that at least ONE object has the tag.
     *
     * @return bool true if the condition set by $all is matched, false
     * otherwise
     *
     * @throws TagNotFoundException if the tag does not exist
     *
     * @since 9.0.0
     */
    public function haveTag($objIds, string $objectType, string $tagId, bool $all = true) : bool;
}
/**
 * Class ManagerEvent
 *
 * @since 9.0.0
 */
class ManagerEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_CREATE = 'OCP\\SystemTag\\ISystemTagManager::createTag';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_UPDATE = 'OCP\\SystemTag\\ISystemTagManager::updateTag';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_DELETE = 'OCP\\SystemTag\\ISystemTagManager::deleteTag';
    /** @var string */
    protected $event;
    /** @var ISystemTag */
    protected $tag;
    /** @var ISystemTag */
    protected $beforeTag;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @param ISystemTag $tag
     * @param ISystemTag|null $beforeTag
     * @since 9.0.0
     */
    public function __construct(string $event, \OCP\SystemTag\ISystemTag $tag, \OCP\SystemTag\ISystemTag $beforeTag = null)
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getEvent() : string
    {
    }
    /**
     * @return ISystemTag
     * @since 9.0.0
     */
    public function getTag() : \OCP\SystemTag\ISystemTag
    {
    }
    /**
     * @return ISystemTag
     * @since 9.0.0
     * @throws \BadMethodCallException
     */
    public function getTagBefore() : \OCP\SystemTag\ISystemTag
    {
    }
}
/**
 * Class MapperEvent
 *
 * @since 9.0.0
 */
class MapperEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_ASSIGN = 'OCP\\SystemTag\\ISystemTagObjectMapper::assignTags';
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_UNASSIGN = 'OCP\\SystemTag\\ISystemTagObjectMapper::unassignTags';
    /** @var string */
    protected $event;
    /** @var string */
    protected $objectType;
    /** @var string */
    protected $objectId;
    /** @var int[] */
    protected $tags;
    /**
     * DispatcherEvent constructor.
     *
     * @param string $event
     * @param string $objectType
     * @param string $objectId
     * @param int[] $tags
     * @since 9.0.0
     */
    public function __construct(string $event, string $objectType, string $objectId, array $tags)
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getEvent() : string
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getObjectType() : string
    {
    }
    /**
     * @return string
     * @since 9.0.0
     */
    public function getObjectId() : string
    {
    }
    /**
     * @return int[]
     * @since 9.0.0
     */
    public function getTags() : array
    {
    }
}
/**
 * Exception when a tag was not found.
 *
 * @since 9.0.0
 */
class TagNotFoundException extends \RuntimeException
{
    /** @var string[] */
    protected $tags;
    /**
     * TagNotFoundException constructor.
     *
     * @param string $message
     * @param int $code
     * @param \Exception|null $previous
     * @param string[] $tags
     * @since 9.0.0
     */
    public function __construct(string $message = '', int $code = 0, \Exception $previous = null, array $tags = [])
    {
    }
    /**
     * @return string[]
     * @since 9.0.0
     */
    public function getMissingTags() : array
    {
    }
}
/**
 * Public interface to access and manage system-wide tags.
 *
 * @since 9.0.0
 */
interface ISystemTagManager
{
    /**
     * Returns the tag objects matching the given tag ids.
     *
     * @param array|string $tagIds id or array of unique ids of the tag to retrieve
     * @param ?IUser $user optional user to run a visibility check against for each tag
     *
     * @return ISystemTag[] array of system tags with tag id as key
     *
     * @throws \InvalidArgumentException if at least one given tag ids is invalid (string instead of integer, etc.)
     * @throws TagNotFoundException if at least one given tag ids did no exist
     * 			The message contains a json_encoded array of the ids that could not be found
     *
     * @since 9.0.0, optional parameter $user added in 27.0.1
     */
    public function getTagsByIds($tagIds, ?\OCP\IUser $user = null) : array;
    /**
     * Returns the tag object matching the given attributes.
     *
     * @param string $tagName tag name
     * @param bool $userVisible whether the tag is visible by users
     * @param bool $userAssignable whether the tag is assignable by users
     *
     * @return ISystemTag system tag
     *
     * @throws TagNotFoundException if tag does not exist
     *
     * @since 9.0.0
     */
    public function getTag(string $tagName, bool $userVisible, bool $userAssignable) : \OCP\SystemTag\ISystemTag;
    /**
     * Creates the tag object using the given attributes.
     *
     * @param string $tagName tag name
     * @param bool $userVisible whether the tag is visible by users
     * @param bool $userAssignable whether the tag is assignable by users
     *
     * @return ISystemTag system tag
     *
     * @throws TagAlreadyExistsException if tag already exists
     *
     * @since 9.0.0
     */
    public function createTag(string $tagName, bool $userVisible, bool $userAssignable) : \OCP\SystemTag\ISystemTag;
    /**
     * Returns all known tags, optionally filtered by visibility.
     *
     * @param bool|null $visibilityFilter filter by visibility if non-null
     * @param string $nameSearchPattern optional search pattern for the tag name
     *
     * @return ISystemTag[] array of system tags or empty array if none found
     *
     * @since 9.0.0
     */
    public function getAllTags($visibilityFilter = null, $nameSearchPattern = null) : array;
    /**
     * Updates the given tag
     *
     * @param string $tagId tag id
     * @param string $newName the new tag name
     * @param bool $userVisible whether the tag is visible by users
     * @param bool $userAssignable whether the tag is assignable by users
     *
     * @throws TagNotFoundException if tag with the given id does not exist
     * @throws TagAlreadyExistsException if there is already another tag
     * with the same attributes
     *
     * @since 9.0.0
     */
    public function updateTag(string $tagId, string $newName, bool $userVisible, bool $userAssignable);
    /**
     * Delete the given tags from the database and all their relationships.
     *
     * @param string|array $tagIds array of tag ids
     *
     * @throws TagNotFoundException if at least one tag did not exist
     *
     * @since 9.0.0
     */
    public function deleteTags($tagIds);
    /**
     * Checks whether the given user is allowed to assign/unassign the tag with the
     * given id.
     *
     * @param ISystemTag $tag tag to check permission for
     * @param IUser $user user to check permission for
     *
     * @return bool true if the user is allowed to assign/unassign the tag, false otherwise
     *
     * @since 9.1.0
     */
    public function canUserAssignTag(\OCP\SystemTag\ISystemTag $tag, \OCP\IUser $user) : bool;
    /**
     * Checks whether the given user is allowed to see the tag with the given id.
     *
     * @param ISystemTag $tag tag to check permission for
     * @param IUser $user user to check permission for
     *
     * @return bool true if the user can see the tag, false otherwise
     *
     * @since 9.1.0
     */
    public function canUserSeeTag(\OCP\SystemTag\ISystemTag $tag, \OCP\IUser $user) : bool;
    /**
     * Set groups that can assign a given tag.
     *
     * @param ISystemTag $tag tag for group assignment
     * @param string[] $groupIds group ids of groups that can assign/unassign the tag
     *
     * @since 9.1.0
     */
    public function setTagGroups(\OCP\SystemTag\ISystemTag $tag, array $groupIds);
    /**
     * Get groups that can assign a given tag.
     *
     * @param ISystemTag $tag tag for group assignment
     *
     * @return string[] group ids of groups that can assign/unassign the tag
     *
     * @since 9.1.0
     */
    public function getTagGroups(\OCP\SystemTag\ISystemTag $tag) : array;
}
/**
 * Class SystemTagsEntityEvent
 *
 * @since 9.1.0
 */
class SystemTagsEntityEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @deprecated 22.0.0
     */
    public const EVENT_ENTITY = 'OCP\\SystemTag\\ISystemTagManager::registerEntity';
    /** @var string */
    protected $event;
    /** @var \Closure[] */
    protected $collections;
    /**
     * SystemTagsEntityEvent constructor.
     *
     * @param string $event
     * @since 9.1.0
     */
    public function __construct(string $event)
    {
    }
    /**
     * @param string $name
     * @param \Closure $entityExistsFunction The closure should take one
     *                 argument, which is the id of the entity, that tags
     *                 should be handled for. The return should then be bool,
     *                 depending on whether tags are allowed (true) or not.
     * @throws \OutOfBoundsException when the entity name is already taken
     * @since 9.1.0
     */
    public function addEntityCollection(string $name, \Closure $entityExistsFunction)
    {
    }
    /**
     * @return \Closure[]
     * @since 9.1.0
     */
    public function getEntityCollections() : array
    {
    }
}
namespace OCP\Talk\Exceptions;

/**
 * Thrown when the Talk API is accessed but there is no registered backend
 *
 * @since 24.0.0
 */
final class NoBackendException extends \RuntimeException
{
}
namespace OCP\Talk;

/**
 * Abstraction over the optional Talk backend
 *
 * http://software-pattern.org/Broker
 *
 * @since 24.0.0
 */
interface IBroker
{
    /**
     * Check if the Talk backend is available
     *
     * @return bool
     * @since 24.0.0
     */
    public function hasBackend() : bool;
    /**
     * Create a new instance of the objects object for specifics of a new conversation
     *
     * @return IConversationOptions
     * @throws NoBackendException when Talk is not available
     * @since 24.0.0
     */
    public function newConversationOptions() : \OCP\Talk\IConversationOptions;
    /**
     * Create a new conversation
     *
     * The conversation is private by default. Use the options parameter to make
     * it public.
     *
     * @param string $name
     * @param IUser[] $moderators
     * @param IConversationOptions|null $options optional configuration for the conversation
     *
     * @return IConversation
     * @throws NoBackendException when Talk is not available
     * @since 24.0.0
     */
    public function createConversation(string $name, array $moderators, \OCP\Talk\IConversationOptions $options = null) : \OCP\Talk\IConversation;
    /**
     * Delete a conversation by id
     *
     * @param string $id conversation id
     *
     * @return void
     * @throws NoBackendException when Talk is not available
     * @since 26.0.0
     */
    public function deleteConversation(string $id) : void;
}
/**
 * @since 24.0.0
 */
interface IConversation
{
    /**
     * Get the unique token that identifies this conversation
     *
     * @return string
     * @since 26.0.0
     */
    public function getId() : string;
    /**
     * Get the absolute URL to this conversation
     *
     * @return string
     * @since 24.0.0
     */
    public function getAbsoluteUrl() : string;
}
/**
 * @since 24.0.0
 */
interface IConversationOptions
{
    /**
     * Will the conversation be public?
     *
     * @return bool
     * @since 24.0.0
     */
    public function isPublic() : bool;
    /**
     * Make the new conversation public
     *
     * @param bool $isPublic
     *
     * @return $this
     * @since 24.0.0
     */
    public function setPublic(bool $isPublic = true) : self;
}
/**
 * Interface for the Talk app to implement
 *
 * Other apps must not implement nor use this interface in any way. Use the
 * broker instead
 *
 * @see IBroker
 * @since 24.0.0
 */
interface ITalkBackend
{
    /**
     * @param string $name
     * @param IUser[] $moderators
     * @param IConversationOptions $options configuration for the conversation
     *
     * @return IConversation
     * @since 24.0.0
     */
    public function createConversation(string $name, array $moderators, \OCP\Talk\IConversationOptions $options) : \OCP\Talk\IConversation;
    /**
     * Delete a conversation by id
     *
     * @param string $id conversation id
     *
     * @return void
     * @since 26.0.0
     */
    public function deleteConversation(string $id) : void;
}
namespace OCP;

/**
 * This class provides the template system for owncloud. You can use it to load
 * specific templates, add data and generate the html code
 *
 * @since 8.0.0
 */
class Template extends \OC_Template
{
    /**
     * Make OC_Helper::imagePath available as a simple function
     *
     * @see \OCP\IURLGenerator::imagePath
     *
     * @param string $app
     * @param string $image
     * @return string to the image
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function image_path($app, $image)
    {
    }
    /**
     * Make OC_Helper::mimetypeIcon available as a simple function
     *
     * @param string $mimetype
     * @return string to the image of this file type.
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function mimetype_icon($mimetype)
    {
    }
    /**
     * Make preview_icon available as a simple function
     *
     * @param string $path path to file
     * @return string to the preview of the image
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function preview_icon($path)
    {
    }
    /**
     * Make publicpreview_icon available as a simple function
     * Returns the path to the preview of the image.
     *
     * @param string $path of file
     * @param string $token
     * @return string link to the preview
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function publicPreview_icon($path, $token)
    {
    }
    /**
     * Make OC_Helper::humanFileSize available as a simple function
     * Example: 2048 to 2 kB.
     *
     * @param int $bytes in bytes
     * @return string size as string
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function human_file_size($bytes)
    {
    }
    /**
     * Return the relative date in relation to today. Returns something like "last hour" or "two month ago"
     *
     * @param int $timestamp unix timestamp
     * @param boolean $dateOnly
     * @return string human readable interpretation of the timestamp
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     * @suppress PhanTypeMismatchArgument
     */
    public static function relative_modified_date($timestamp, $dateOnly = false)
    {
    }
    /**
     * Generate html code for an options block.
     *
     * @param array $options the options
     * @param mixed $selected which one is selected?
     * @param array $params the parameters
     * @return string html options
     * @since 8.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function html_select_options($options, $selected, $params = [])
    {
    }
}
namespace OCP\User\Backend;

/**
 * @since 14.0.0
 */
interface ICheckPasswordBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $loginName The loginname
     * @param string $password The password
     * @return string|false The uid on success false on failure
     */
    public function checkPassword(string $loginName, string $password);
}
/**
 * @since 24.0.7
 */
interface ICountMappedUsersBackend
{
    /**
     * @since 24.0.7
     *
     * @return int The number of users already mapped to a Nextcloud account
     */
    public function countMappedUsers() : int;
}
/**
 * @since 20.0.0
 *
 * Allow backends to signal that they handle logout. For example
 * SSO providers that also have a SSO logout url
 */
interface ICustomLogout
{
    /**
     * @since 20.0.0
     *
     * The url to redirect to for logout
     *
     * @return string
     */
    public function getLogoutUrl() : string;
}
namespace OCP;

/**
 * Interface IUserBackend
 *
 * @since 8.0.0
 */
interface IUserBackend
{
    /**
     * Backend name to be shown in user management
     * @return string the name of the backend to be shown
     * @since 8.0.0
     */
    public function getBackendName();
}
/**
 * TODO actually this is a IUserBackend
 *
 * @since 4.5.0
 */
interface UserInterface
{
    /**
     * Check if backend implements actions
     * @param int $actions bitwise-or'ed actions
     * @return boolean
     *
     * Returns the supported actions as int to be
     * compared with \OC\User\Backend::CREATE_USER etc.
     * @since 4.5.0
     * @deprecated 14.0.0 Switch to the interfaces from OCP\User\Backend
     */
    public function implementsActions($actions);
    /**
     * delete a user
     * @param string $uid The username of the user to delete
     * @return bool
     * @since 4.5.0
     */
    public function deleteUser($uid);
    /**
     * Get a list of all users
     *
     * @param string $search
     * @param null|int $limit
     * @param null|int $offset
     * @return string[] an array of all uids
     * @since 4.5.0
     */
    public function getUsers($search = '', $limit = null, $offset = null);
    /**
     * check if a user exists
     * @param string $uid the username
     * @return boolean
     * @since 4.5.0
     */
    public function userExists($uid);
    /**
     * get display name of the user
     * @param string $uid user ID of the user
     * @return string display name
     * @since 4.5.0
     */
    public function getDisplayName($uid);
    /**
     * Get a list of all display names and user ids.
     *
     * @param string $search
     * @param int|null $limit
     * @param int|null $offset
     * @return array an array of all displayNames (value) and the corresponding uids (key)
     * @since 4.5.0
     */
    public function getDisplayNames($search = '', $limit = null, $offset = null);
    /**
     * Check if a user list is available or not
     * @return boolean if users can be listed or not
     * @since 4.5.0
     */
    public function hasUserListings();
}
namespace OCP\User\Backend;

/**
 * @since 14.0.0
 */
abstract class ABackend implements \OCP\IUserBackend, \OCP\UserInterface
{
    /**
     * @deprecated 14.0.0
     * @since 14.0.0
     *
     * @param int $actions The action to check for
     * @return bool
     */
    public function implementsActions($actions) : bool
    {
    }
}
/**
 * @since 14.0.0
 */
interface ICountUsersBackend
{
    /**
     * @since 14.0.0
     *
     * @return int|false The number of users on success false on failure
     */
    public function countUsers();
}
/**
 * @since 14.0.0
 */
interface ICreateUserBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid The username of the user to create
     * @param string $password The password of the new user
     * @return bool
     */
    public function createUser(string $uid, string $password) : bool;
}
/**
 * @since 14.0.0
 */
interface IGetDisplayNameBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid user ID of the user
     * @return string display name
     */
    public function getDisplayName($uid) : string;
}
/**
 * @since 14.0.0
 */
interface IGetHomeBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid the username
     * @return string|bool Datadir on success false on failure
     */
    public function getHome(string $uid);
}
/**
 * @since 17.0.0
 */
interface IGetRealUIDBackend
{
    /**
     * Some backends accept different UIDs than what is the internal UID to be used.
     * For example the database backend accepts different cased UIDs in all the functions
     * but the internal UID that is to be used should be correctly cased.
     *
     * This little function makes sure that the used UID will be correct hen using the user object
     *
     * @since 17.0.0
     * @param string $uid
     * @return string
     */
    public function getRealUID(string $uid) : string;
}
/**
 * @since 15.0.0
 */
interface IPasswordConfirmationBackend
{
    /**
     * @since 15.0.0
     */
    public function canConfirmPassword(string $uid) : bool;
}
/**
 * @since 14.0.0
 */
interface IProvideAvatarBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid
     * @return bool
     */
    public function canChangeAvatar(string $uid) : bool;
}
/**
 * @since 21.0.1
 */
interface ISearchKnownUsersBackend
{
    /**
     * @param string $searcher
     * @param string $pattern
     * @param int|null $limit
     * @param int|null $offset
     * @return array
     * @since 21.0.1
     */
    public function searchKnownUsersByDisplayName(string $searcher, string $pattern, ?int $limit = null, ?int $offset = null) : array;
}
/**
 * @since 14.0.0
 */
interface ISetDisplayNameBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid The username
     * @param string $displayName The new display name
     * @return bool
     *
     * @since 25.0.0 Throw InvalidArgumentException
     * @throws \InvalidArgumentException
     */
    public function setDisplayName(string $uid, string $displayName) : bool;
}
/**
 * @since 14.0.0
 */
interface ISetPasswordBackend
{
    /**
     * @since 14.0.0
     *
     * @param string $uid The username
     * @param string $password The new password
     * @return bool
     */
    public function setPassword(string $uid, string $password) : bool;
}
namespace OCP\User\Events;

/**
 * @since 18.0.0
 */
class UserChangedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $feature, $value, $oldValue = null)
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getFeature() : string
    {
    }
    /**
     * @return mixed
     * @since 18.0.0
     */
    public function getValue()
    {
    }
    /**
     * @return mixed
     * @since 18.0.0
     */
    public function getOldValue()
    {
    }
}
/**
 * Emitted before the user password is updated.
 *
 * @since 18.0.0
 */
class BeforePasswordUpdatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser $user
     * @param string $password
     * @param string|null $recoveryPassword
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $password, string $recoveryPassword = null)
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
    /**
     * @return string|null
     * @since 18.0.0
     */
    public function getRecoveryPassword() : ?string
    {
    }
}
/**
 * Emitted before a new user is created on the back-end.
 *
 * @since 18.0.0
 */
class BeforeUserCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(string $uid, string $password)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUid() : string
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeUserDeletedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser $user
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user)
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 18.0.0
 */
class BeforeUserLoggedInEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     * @since 26.0.0 password can be null
     */
    public function __construct(string $username, ?string $password, ?\OCP\Authentication\IApacheBackend $backend = null)
    {
    }
    /**
     * returns the login name, which must not necessarily match to a user ID
     *
     * @since 18.0.0
     */
    public function getUsername() : string
    {
    }
    /**
     * @since 18.0.0
     * @since 26.0.0 value can be null
     */
    public function getPassword() : ?string
    {
    }
    /**
     * return backend if available (or null)
     *
     * @return IApacheBackend|null
     * @since 26.0.0
     */
    public function getBackend() : ?\OCP\Authentication\IApacheBackend
    {
    }
}
/**
 * Emitted before a user is logged in via remember-me cookies.
 *
 * @since 18.0.0
 */
class BeforeUserLoggedInWithCookieEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(string $username)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUsername() : string
    {
    }
}
/**
 * Emitted before a user is logged out.
 *
 * @since 18.0.0
 */
class BeforeUserLoggedOutEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user = null)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : ?\OCP\IUser
    {
    }
}
/**
 * Emitted when the user password has been updated.
 *
 * @since 18.0.0
 */
class PasswordUpdatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser $user
     * @param string $password
     * @param string|null $recoveryPassword
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $password, string $recoveryPassword = null)
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return string
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
    /**
     * @return string|null
     * @since 18.0.0
     */
    public function getRecoveryPassword() : ?string
    {
    }
}
/**
 * @since 18.0.0
 */
class PostLoginEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $loginName, string $password, bool $isTokenLogin)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @since 20.0.0
     */
    public function getLoginName() : string
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
    /**
     * @since 18.0.0
     */
    public function isTokenLogin() : bool
    {
    }
}
/**
 * Emitted when a new user has been created on the back-end.
 *
 * @since 18.0.0
 */
class UserCreatedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $password)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUid() : string
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : string
    {
    }
}
/**
 * @since 18.0.0
 */
class UserDeletedEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @param IUser $user
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user)
    {
    }
    /**
     * @return IUser
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
}
/**
 * @since 20.0.0
 */
class UserLiveStatusEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @var string
     * @since 20.0.0
     */
    public const STATUS_ONLINE = 'online';
    /**
     * @var string
     * @since 20.0.0
     */
    public const STATUS_AWAY = 'away';
    /**
     * @var string
     * @since 20.0.0
     */
    public const STATUS_OFFLINE = 'offline';
    /**
     * @since 20.0.0
     */
    public function __construct(\OCP\IUser $user, string $status, int $timestamp)
    {
    }
    /**
     * @return IUser
     * @since 20.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @return string
     * @since 20.0.0
     */
    public function getStatus() : string
    {
    }
    /**
     * @return int
     * @since 20.0.0
     */
    public function getTimestamp() : int
    {
    }
    /**
     * Get the user status that might be available after processing the event
     * @since 24.0.0
     */
    public function getUserStatus() : ?\OCP\UserStatus\IUserStatus
    {
    }
    /**
     * @since 24.0.0
     */
    public function setUserStatus(\OCP\UserStatus\IUserStatus $userStatus)
    {
    }
}
/**
 * @since 18.0.0
 */
class UserLoggedInEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, string $loginName, ?string $password, bool $isTokenLogin)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @since 21.0.0
     */
    public function getLoginName() : string
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : ?string
    {
    }
    /**
     * @since 18.0.0
     */
    public function isTokenLogin() : bool
    {
    }
}
/**
 * Emitted when a user has been logged out successfully.
 *
 * @since 18.0.0
 */
class UserLoggedOutEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user = null)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : ?\OCP\IUser
    {
    }
}
/**
 * Emitted when a user has been successfully logged in via remember-me cookies.
 *
 * @since 18.0.0
 */
class UserLoggedInWithCookieEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\IUser $user, ?string $password)
    {
    }
    /**
     * @since 18.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * @since 18.0.0
     */
    public function getPassword() : ?string
    {
    }
}
namespace OCP\User;

/**
 * Event to allow apps to
 *
 * @since 20.0.0
 */
class GetQuotaEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 20.0.0
     */
    public function __construct(\OCP\IUser $user)
    {
    }
    /**
     * @since 20.0.0
     */
    public function getUser() : \OCP\IUser
    {
    }
    /**
     * Get the set quota as human readable string, or null if no overwrite is set
     *
     * @since 20.0.0
     */
    public function getQuota() : ?string
    {
    }
    /**
     * Set the quota overwrite as human readable string
     *
     * @since 20.0.0
     */
    public function setQuota(string $quota) : void
    {
    }
}
namespace OCP\UserMigration;

/**
 * @since 24.0.0
 */
interface IImportSource
{
    public const PATH_USER = 'user.json';
    /**
     * Reads a file from the export
     *
     * @param string $path Full path to the file in the export archive.
     * @return string The full content of the file.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function getFileContents(string $path) : string;
    /**
     * Reads a file from the export as a stream
     *
     * @param string $path Full path to the file in the export archive.
     * @return resource A stream resource to read from to get the file content.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function getFileAsStream(string $path);
    /**
     * List the files of a folder
     *
     * @param string $path Full path to the folder in the export archive.
     * @return array The list of files.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function getFolderListing(string $path) : array;
    /**
     * Test if a path exists, which may be a file or a folder
     *
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function pathExists(string $path) : bool;
    /**
     * Copy files from the export to a Folder
     *
     * Folder $destination folder to copy into
     * string $sourcePath path in the export archive
     *
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function copyToFolder(\OCP\Files\Folder $destination, string $sourcePath) : void;
    /**
     * @return array<string,int> Migrators and their versions from the export archive.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function getMigratorVersions() : array;
    /**
     * @return ?int Version for this migrator from the export archive. Null means migrator missing.
     * @throws UserMigrationException
     * @param string $migrator Migrator id (as returned by IMigrator::getId)
     *
     * @since 24.0.0
     */
    public function getMigratorVersion(string $migrator) : ?int;
    /**
     * Get original uid of the imported account
     *
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function getOriginalUid() : string;
    /**
     * Called after import is complete
     *
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function close() : void;
}
/**
 * Basic version handling: we can import older versions but not newer ones
 * @since 24.0.0
 */
trait TMigratorBasicVersionHandling
{
    protected int $version = 1;
    protected bool $mandatory = false;
    /**
     * {@inheritDoc}
     * @since 24.0.0
     */
    public function getVersion() : int
    {
    }
    /**
     * {@inheritDoc}
     * @since 24.0.0
     */
    public function canImport(\OCP\UserMigration\IImportSource $importSource) : bool
    {
    }
}
/**
 * @since 24.0.0
 */
class UserMigrationException extends \Exception
{
}
/**
 * @since 24.0.0
 */
interface IExportDestination
{
    /**
     * Adds a file to the export
     *
     * @param string $path Full path to the file in the export archive. Parent directories will be created if needed.
     * @param string $content The full content of the file.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function addFileContents(string $path, string $content) : void;
    /**
     * Adds a file to the export as a stream
     *
     * @param string $path Full path to the file in the export archive. Parent directories will be created if needed.
     * @param resource $stream A stream resource to read from to get the file content.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function addFileAsStream(string $path, $stream) : void;
    /**
     * Copy a folder to the export
     *
     * @param Folder $folder folder to copy to the export archive.
     * @param string $destinationPath Full path to the folder in the export archive. Parent directories will be created if needed.
     * @param ?callable(\OCP\Files\Node):bool $nodeFilter Callback to filter nodes to copy
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function copyFolder(\OCP\Files\Folder $folder, string $destinationPath, ?callable $nodeFilter = null) : void;
    /**
     * @param array<string,int> $versions Migrators and their versions.
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function setMigratorVersions(array $versions) : void;
    /**
     * Called after export is complete
     *
     * @throws UserMigrationException
     *
     * @since 24.0.0
     */
    public function close() : void;
}
/**
 * @since 24.0.0
 */
interface IMigrator
{
    /**
     * Export user data
     *
     * @throws UserMigrationException
     * @since 24.0.0
     */
    public function export(\OCP\IUser $user, \OCP\UserMigration\IExportDestination $exportDestination, \Symfony\Component\Console\Output\OutputInterface $output) : void;
    /**
     * Import user data
     *
     * @throws UserMigrationException
     * @since 24.0.0
     */
    public function import(\OCP\IUser $user, \OCP\UserMigration\IImportSource $importSource, \Symfony\Component\Console\Output\OutputInterface $output) : void;
    /**
     * Returns the unique ID
     *
     * @since 24.0.0
     */
    public function getId() : string;
    /**
     * Returns the display name
     *
     * @since 24.0.0
     */
    public function getDisplayName() : string;
    /**
     * Returns the description
     *
     * @since 24.0.0
     */
    public function getDescription() : string;
    /**
     * Returns the version of the export format for this migrator
     *
     * @since 24.0.0
     */
    public function getVersion() : int;
    /**
     * Checks whether it is able to import a version of the export format for this migrator
     * Use $importSource->getMigratorVersion($this->getId()) to get the version from the archive
     *
     * @since 24.0.0
     */
    public function canImport(\OCP\UserMigration\IImportSource $importSource) : bool;
}
/**
 * @since 25.0.0
 */
interface ISizeEstimationMigrator
{
    /**
     * Returns an estimate of the exported data size in KiB.
     * Should be fast, favor performance over accuracy.
     *
     * @since 25.0.0
     * @since 27.0.0 return value may overflow from int to float
     */
    public function getEstimatedExportSize(\OCP\IUser $user) : int|float;
}
namespace OCP\UserStatus;

/**
 * This interface allows to manage the user status.
 *
 * This interface must not be implemented in your application but
 * instead should be used as a service and injected in your code with
 * dependency injection.
 *
 * @since 20.0.0
 */
interface IManager
{
    /**
     * Gets the statuses for all users in $users
     *
     * @param string[] $userIds
     * @return IUserStatus[]
     * @since 20.0.0
     */
    public function getUserStatuses(array $userIds) : array;
    /**
     * Set a new status for the selected user.
     *
     * @param string $userId The user for which we want to update the status.
     * @param string $messageId The id of the predefined message.
     * @param string $status The status to assign
     * @param bool $createBackup If true, this will store the old status so that it is possible to revert it later (e.g. after a call).
     * @since 23.0.0
     */
    public function setUserStatus(string $userId, string $messageId, string $status, bool $createBackup = false) : void;
    /**
     * Revert an automatically set user status. For example after leaving a call,
     * change back to the previously set status.
     *
     * @param string $userId The user for which we want to update the status.
     * @param string $messageId The expected current messageId. If the user has already updated their status, this method does nothing.
     * @param string $status The expected current status. If the user has already updated their status, this method does nothing.
     * @since 23.0.0
     */
    public function revertUserStatus(string $userId, string $messageId, string $status) : void;
    /**
     * Revert an automatically set user status. For example after leaving a call,
     * change back to the previously set status.
     *
     * @param string[] $userIds The user for which we want to update the status.
     * @param string $messageId The expected current messageId. If the user has already updated their status, this method does nothing.
     * @param string $status The expected current status. If the user has already updated their status, this method does nothing.
     * @since 23.0.0
     */
    public function revertMultipleUserStatus(array $userIds, string $messageId, string $status) : void;
}
/**
 * Interface IProvider
 *
 * @since 20.0.0
 */
interface IProvider
{
    /**
     * Gets the statuses for all users in $users
     *
     * @param string[] $userIds
     * @return IUserStatus[]
     * @since 20.0.0
     */
    public function getUserStatuses(array $userIds) : array;
}
/**
 * Interface IUserStatus
 *
 * @since 20.0.0
 */
interface IUserStatus
{
    /**
     * @var string
     * @since 20.0.0
     */
    public const ONLINE = 'online';
    /**
     * @var string
     * @since 20.0.0
     */
    public const AWAY = 'away';
    /**
     * @var string
     * @since 20.0.0
     */
    public const DND = 'dnd';
    /**
     * @var string
     * @since 20.0.0
     */
    public const OFFLINE = 'offline';
    /**
     * @var string
     * @since 20.0.0
     */
    public const INVISIBLE = 'invisible';
    /**
     * @var string
     * @since 25.0.0
     */
    public const MESSAGE_CALL = 'call';
    /**
     * @var string
     * @since 25.0.0
     */
    public const MESSAGE_AVAILABILITY = 'availability';
    /**
     * Get the user this status is connected to
     *
     * @return string
     * @since 20.0.0
     */
    public function getUserId() : string;
    /**
     * Get the status
     *
     * It will return one of the constants defined above.
     * It will never return invisible. In case a user marked
     * themselves as invisible, it will return offline.
     *
     * @return string See IUserStatus constants
     * @since 20.0.0
     */
    public function getStatus() : string;
    /**
     * Get a custom message provided by the user
     *
     * @return string|null
     * @since 20.0.0
     */
    public function getMessage() : ?string;
    /**
     * Get a custom icon provided by the user
     *
     * @return string|null
     * @since 20.0.0
     */
    public function getIcon() : ?string;
    /**
     * Gets the time that the custom status will be cleared at
     *
     * @return DateTimeImmutable|null
     * @since 20.0.0
     */
    public function getClearAt() : ?\DateTimeImmutable;
}
namespace OCP\WorkflowEngine\EntityContext;

/**
 * Interface IDisplayName
 *
 *
 * @since 18.0.0
 */
interface IDisplayName
{
    /**
     * returns the end user facing name of the object related to the entity
     *
     * @since 18.0.0
     */
    public function getDisplayName() : string;
}
/**
 * Interface IIcon
 *
 *
 * @since 18.0.0
 */
interface IIcon
{
    /**
     * returns a URL to an icon that is related to the entity, for instance
     * a group icon for groups.
     *
     * @since 18.0.0
     */
    public function getIconUrl() : string;
}
/**
 * Interface IUrl
 *
 *
 * @since 18.0.0
 */
interface IUrl
{
    /**
     * returns a URL that is related to the entity, e.g. the link to a share
     *
     * @since 18.0.0
     */
    public function getUrl() : string;
}
/**
 * Interface IContextPortation
 *
 * Occasionally an IEntity needs to be reused not in the same, but a new
 * request. As IEntities receive custom context information during a flow
 * cycle, sometimes it might be necessary to export context identifiers to
 * be able to recreate the state at a later point. For example: handling
 * translations in a notification INotifier.
 *
 *
 * @since 20.0.0
 */
interface IContextPortation
{
    /**
     * All relevant context identifiers that are needed to restore the state
     * of an entity shall be returned with this method. The resulting array
     * must be JSON-serializable.
     *
     * @since 20.0.0
     */
    public function exportContextIDs() : array;
    /**
     * This method receives the array as returned by `exportContextIDs()` in
     * order to restore the state of the IEntity if necessary.
     *
     * @since 20.0.0
     */
    public function importContextIDs(array $contextIDs) : void;
}
/**
 * Interface IDisplayText
 *
 *
 * @since 18.0.0
 */
interface IDisplayText
{
    /**
     * returns translated text used for display to the end user. For instance,
     * it can describe the event in a human readable way.
     *
     * The entity may react to a verbosity level that is provided. With the
     * basic level, 0, it would return brief information, and more with higher
     * numbers. All information shall be shown at a level of 3.
     *
     * @since 18.0.0
     */
    public function getDisplayText(int $verbosity = 0) : string;
}
namespace OCP\WorkflowEngine\Events;

/**
 * Emitted when the workflow engine settings page is loaded.
 *
 * @since 20.0.0
 */
class LoadSettingsScriptsEvent extends \OCP\EventDispatcher\Event
{
}
/**
 * @since 18.0.0
 */
class RegisterChecksEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\WorkflowEngine\IManager $manager)
    {
    }
    /**
     * @since 18.0.0
     */
    public function registerCheck(\OCP\WorkflowEngine\ICheck $check) : void
    {
    }
}
/**
 * @since 18.0.0
 */
class RegisterEntitiesEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\WorkflowEngine\IManager $manager)
    {
    }
    /**
     * @since 18.0.0
     */
    public function registerEntity(\OCP\WorkflowEngine\IEntity $entity) : void
    {
    }
}
/**
 * @since 18.0.0
 */
class RegisterOperationsEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 18.0.0
     */
    public function __construct(\OCP\WorkflowEngine\IManager $manager)
    {
    }
    /**
     * @since 18.0.0
     */
    public function registerOperation(\OCP\WorkflowEngine\IOperation $operation) : void
    {
    }
}
namespace OCP\WorkflowEngine;

/**
 * Interface ICheck
 *
 * @since 9.1
 */
interface ICheck
{
    /**
     * @param string $operator
     * @param string $value
     * @return bool
     * @since 9.1
     */
    public function executeCheck($operator, $value);
    /**
     * @param string $operator
     * @param string $value
     * @throws \UnexpectedValueException
     * @since 9.1
     */
    public function validateCheck($operator, $value);
    /**
     * returns a list of Entities the checker supports. The values must match
     * the class name of the entity.
     *
     * An empty result means the check is universally available.
     *
     * @since 18.0.0
     */
    public function supportedEntities() : array;
    /**
     * returns whether the operation can be used in the requested scope.
     *
     * Scope IDs are defined as constants in OCP\WorkflowEngine\IManager. At
     * time of writing these are SCOPE_ADMIN and SCOPE_USER.
     *
     * For possibly unknown future scopes the recommended behaviour is: if
     * user scope is permitted, the default behaviour should return `true`,
     * otherwise `false`.
     *
     * @since 18.0.0
     */
    public function isAvailableForScope(int $scope) : bool;
}
/**
 * Interface IFileCheck
 *
 * @since 18.0.0
 */
interface IEntityCheck
{
    /**
     * Equips the check with a subject fitting the Entity. For instance, an
     * entity of File will receive an instance of OCP\Files\Node, or a comment
     * entity might get an IComment.
     *
     * The implementing check must be aware of the incoming type.
     *
     * If an unsupported subject is passed the implementation MAY throw an
     * \UnexpectedValueException.
     *
     * @param IEntity $entity
     * @param mixed $subject
     * @throws \UnexpectedValueException
     * @since 18.0.0
     */
    public function setEntitySubject(\OCP\WorkflowEngine\IEntity $entity, $subject) : void;
}
/**
 * Interface IFileCheck
 *
 * @since 18.0.0
 */
interface IFileCheck extends \OCP\WorkflowEngine\IEntityCheck
{
    /**
     * @param IStorage $storage
     * @param string $path
     * @param bool $isDir
     * @since 18.0.0
     */
    public function setFileInfo(\OCP\Files\Storage\IStorage $storage, string $path, bool $isDir = false) : void;
}
/**
 * Interface IOperation
 *
 * @since 9.1
 */
interface IOperation
{
    /**
     * returns a translated name to be presented in the web interface
     *
     * Example: "Automated tagging" (en), "Aŭtomata etikedado" (eo)
     *
     * @since 18.0.0
     */
    public function getDisplayName() : string;
    /**
     * returns a translated, descriptive text to be presented in the web interface.
     *
     * It should be short and precise.
     *
     * Example: "Tag based automatic deletion of files after a given time." (en)
     *
     * @since 18.0.0
     */
    public function getDescription() : string;
    /**
     * returns the URL to the icon of the operator for display in the web interface.
     *
     * Usually, the implementation would utilize the `imagePath()` method of the
     * `\OCP\IURLGenerator` instance and simply return its result.
     *
     * Example implementation: return $this->urlGenerator->imagePath('myApp', 'cat.svg');
     *
     * @since 18.0.0
     */
    public function getIcon() : string;
    /**
     * returns whether the operation can be used in the requested scope.
     *
     * Scope IDs are defined as constants in OCP\WorkflowEngine\IManager. At
     * time of writing these are SCOPE_ADMIN and SCOPE_USER.
     *
     * For possibly unknown future scopes the recommended behaviour is: if
     * user scope is permitted, the default behaviour should return `true`,
     * otherwise `false`.
     *
     * @param int $scope
     * @psalm-param IManager::SCOPE_* $scope
     *
     * @since 18.0.0
     */
    public function isAvailableForScope(int $scope) : bool;
    /**
     * Validates whether a configured workflow rule is valid. If it is not,
     * an `\UnexpectedValueException` is supposed to be thrown.
     *
     * @throws \UnexpectedValueException
     * @since 9.1
     */
    public function validateOperation(string $name, array $checks, string $operation) : void;
    /**
     * Is being called by the workflow engine when an event was triggered that
     * is configured for this operation. An evaluation whether the event
     * qualifies for this operation to run has still to be done by the
     * implementor by calling the RuleMatchers getMatchingOperations method
     * and evaluating the results.
     *
     * If the implementor is an IComplexOperation, this method will not be
     * called automatically. It can be used or left as no-op by the implementor.
     *
     * @since 18.0.0
     */
    public function onEvent(string $eventName, \OCP\EventDispatcher\Event $event, \OCP\WorkflowEngine\IRuleMatcher $ruleMatcher) : void;
}
/**
 * Class IRuleMatcher
 *
 *
 * @since 18.0.0
 */
interface IRuleMatcher extends \OCP\WorkflowEngine\IFileCheck
{
    /**
     * This method is left for backwards compatibility and easier porting of
     * apps. Please use 'getFlows' instead (and setOperation if you implement
     * an IComplexOperation).
     *
     * @since 18.0.0
     * @deprecated 18.0.0
     */
    public function getMatchingOperations(string $class, bool $returnFirstMatchingOperationOnly = true) : array;
    /**
     * @throws RuntimeException
     * @since 18.0.0
     */
    public function getFlows(bool $returnFirstMatchingOperationOnly = true) : array;
    /**
     * this method can only be called once and is typically called by the
     * Flow engine, unless for IComplexOperations.
     *
     * @throws RuntimeException
     * @since 18.0.0
     */
    public function setOperation(\OCP\WorkflowEngine\IOperation $operation) : void;
    /**
     * this method can only be called once and is typically called by the
     * Flow engine, unless for IComplexOperations.
     *
     * @throws RuntimeException
     * @since 18.0.0
     */
    public function setEntity(\OCP\WorkflowEngine\IEntity $entity) : void;
    /**
     * returns the entity which might provide more information, depending on
     * the interfaces it implements
     *
     * @return IEntity
     * @since 18.0.0
     */
    public function getEntity() : \OCP\WorkflowEngine\IEntity;
    /**
     * this method can be called once to set the event name that is currently
     * being processed. The workflow engine takes care of this usually, only an
     * IComplexOperation might want to make use of it.
     *
     * @throws RuntimeException
     * @since 20.0.0
     */
    public function setEventName(string $eventName) : void;
}
/**
 * Interface IEntityEvent
 *
 * represents an entity event that is dispatched via EventDispatcher
 *
 *
 * @since 18.0.0
 */
interface IEntityEvent
{
    /**
     * returns a translated name to be presented in the web interface.
     *
     * Example: "created" (en), "kreita" (eo)
     *
     * @since 18.0.0
     */
    public function getDisplayName() : string;
    /**
     * returns the event name that is emitted by the EventDispatcher, e.g.:
     *
     * Example: "OCA\MyApp\Factory\Cats::postCreated"
     *
     * @since 18.0.0
     */
    public function getEventName() : string;
}
/**
 * Class GenericEntityEvent
 *
 *
 * @since 18.0.0
 */
class GenericEntityEvent implements \OCP\WorkflowEngine\IEntityEvent
{
    /**
     * GenericEntityEvent constructor.
     *
     * @since 18.0.0
     */
    public function __construct(string $displayName, string $eventName)
    {
    }
    /**
     * returns a translated name to be presented in the web interface.
     *
     * Example: "created" (en), "kreita" (eo)
     *
     * @since 18.0.0
     */
    public function getDisplayName() : string
    {
    }
    /**
     * returns the event name that is emitted by the EventDispatcher, e.g.:
     *
     * Example: "OCA\MyApp\Factory\Cats::postCreated"
     *
     * @since 18.0.0
     */
    public function getEventName() : string
    {
    }
}
/**
 * Interface IComplexOperation
 *
 * This interface represents an operator that is less generic and indicates
 * that some of the tasks it does itself instead of relying on the engine.
 * This includes:
 *
 * * registering listeners – the implementing app needs to ensure that the
 *   business logic registers listeners to the events it listens to. For example
 *   when direct storage access is required, adding a wrapper or listening to
 *   a specific one is required over usual file events.
 *
 *
 * @since 18.0.0
 */
interface IComplexOperation extends \OCP\WorkflowEngine\IOperation
{
    /**
     * As IComplexOperation chooses the triggering events itself, a hint has
     * to be shown to the user so make clear when this operation is becoming
     * active. This method returns such a translated string.
     *
     * Example: "When a file is accessed" (en)
     *
     * @since 18.0.0
     */
    public function getTriggerHint() : string;
}
/**
 * Interface IEntity
 *
 * This interface represents an entity that supports events the workflow engine
 * can listen to. For example a file with the create, update, etc. events.
 *
 * Ensure to listen to 'OCP/WorkflowEngine::loadEntities' for registering your
 * entities.
 *
 * @since 18.0.0
 */
interface IEntity
{
    /**
     * returns a translated name to be presented in the web interface.
     *
     * Example: "File" (en), "Dosiero" (eo)
     *
     * @since 18.0.0
     */
    public function getName() : string;
    /**
     * returns the URL to the icon of the entity for display in the web interface.
     *
     * Usually, the implementation would utilize the `imagePath()` method of the
     * `\OCP\IURLGenerator` instance and simply return its result.
     *
     * Example implementation: return $this->urlGenerator->imagePath('myApp', 'cat.svg');
     *
     * @since 18.0.0
     */
    public function getIcon() : string;
    /**
     * returns a list of supported events
     *
     * @return IEntityEvent[]
     * @since 18.0.0
     */
    public function getEvents() : array;
    /**
     * @since 18.0.0
     */
    public function prepareRuleMatcher(\OCP\WorkflowEngine\IRuleMatcher $ruleMatcher, string $eventName, \OCP\EventDispatcher\Event $event) : void;
    /**
     * returns whether the provided user id is allowed to run a flow against
     * the known context
     *
     * @since 18.0.0
     */
    public function isLegitimatedForUserId(string $userId) : bool;
}
/**
 * Interface ISpecificOperation
 *
 * This interface represents an operator that is designed to work with exactly
 * one entity type.
 *
 * In almost all of the cases it is not necessary to have this limitation,
 * because the action is not connected to the event. This mechanism suits
 * special cases.
 *
 * @since 18.0.0
 */
interface ISpecificOperation extends \OCP\WorkflowEngine\IOperation
{
    /**
     * returns the id of the entity the operator is designed for
     *
     * Example: 'WorkflowEngine_Entity_File'
     *
     * @since 18.0.0
     */
    public function getEntityId() : string;
}
/**
 * Interface IManager
 *
 * @since 9.1
 */
interface IManager
{
    public const SCOPE_ADMIN = 0;
    public const SCOPE_USER = 1;
    /**
     * @since 21.0.0
     */
    public const MAX_CHECK_VALUE_BYTES = 2048;
    /**
     * @since 21.0.0
     */
    public const MAX_OPERATION_VALUE_BYTES = 4096;
    /**
     * @deprecated 17.0.0 Will be removed in NC19. Use the dedicated events in OCP\WorkflowEngine\Events
     */
    public const EVENT_NAME_REG_OPERATION = 'OCP\\WorkflowEngine::registerOperations';
    /**
     * @deprecated 17.0.0
     */
    public const EVENT_NAME_REG_ENTITY = 'OCP\\WorkflowEngine::registerEntities';
    /**
     * @deprecated 17.0.0
     */
    public const EVENT_NAME_REG_CHECK = 'OCP\\WorkflowEngine::registerChecks';
    /**
     * Listen to `OCP\WorkflowEngine\Events\RegisterEntitiesEvent` at the
     * IEventDispatcher for registering your entities.
     *
     * @since 18.0.0
     */
    public function registerEntity(\OCP\WorkflowEngine\IEntity $entity) : void;
    /**
     * Listen to `OCP\WorkflowEngine\Events\RegisterOperationsEvent` at the
     * IEventDispatcher for registering your operators.
     *
     * @since 18.0.0
     */
    public function registerOperation(\OCP\WorkflowEngine\IOperation $operator) : void;
    /**
     * Listen to `OCP\WorkflowEngine\Events\RegisterChecksEvent` at the
     * IEventDispatcher for registering your operators.
     *
     * @since 18.0.0
     */
    public function registerCheck(\OCP\WorkflowEngine\ICheck $check) : void;
    /**
     * @since 18.0.0
     */
    public function getRuleMatcher() : \OCP\WorkflowEngine\IRuleMatcher;
}
namespace OCP;

/**
 * @since 8.2.0
 */
class SabrePluginEvent extends \OCP\EventDispatcher\Event
{
    /** @var int */
    protected $statusCode;
    /** @var string */
    protected $message;
    /** @var Server */
    protected $server;
    /**
     * @since 8.2.0
     */
    public function __construct($server = null)
    {
    }
    /**
     * @param int $statusCode
     * @return self
     * @since 8.2.0
     */
    public function setStatusCode($statusCode)
    {
    }
    /**
     * @param string $message
     * @return self
     * @since 8.2.0
     */
    public function setMessage($message)
    {
    }
    /**
     * @return int
     * @since 8.2.0
     */
    public function getStatusCode()
    {
    }
    /**
     * @return string
     * @since 8.2.0
     */
    public function getMessage()
    {
    }
    /**
     * @return null|Server
     * @since 9.0.0
     */
    public function getServer()
    {
    }
}
/**
 * Dispatched before Sabre is loaded when accessing public webdav endpoints
 * This can be used to inject a Sabre plugin for example
 *
 * @since 26.0.0
 */
class BeforeSabrePubliclyLoadedEvent extends \OCP\SabrePluginEvent
{
}
/**
 * public api to access default strings and urls for your templates
 * @since 6.0.0
 */
class Defaults
{
    /**
     * creates a \OC_Defaults instance which is used in all methods to retrieve the
     * actual defaults
     * @since 6.0.0
     */
    public function __construct(\OC_Defaults $defaults = null)
    {
    }
    /**
     * get base URL for the organisation behind your ownCloud instance
     * @return string
     * @since 6.0.0
     */
    public function getBaseUrl() : string
    {
    }
    /**
     * link to the desktop sync client
     * @return string
     * @since 6.0.0
     */
    public function getSyncClientUrl() : string
    {
    }
    /**
     * link to the iOS client
     * @return string
     * @since 8.0.0
     */
    public function getiOSClientUrl() : string
    {
    }
    /**
     * link to the Android client
     * @return string
     * @since 8.0.0
     */
    public function getAndroidClientUrl() : string
    {
    }
    /**
     * link to the Android client on F-Droid
     * @return string
     * @since 23.0.0
     */
    public function getFDroidClientUrl()
    {
    }
    /**
     * base URL to the documentation of your ownCloud instance
     * @return string
     * @since 6.0.0
     */
    public function getDocBaseUrl() : string
    {
    }
    /**
     * name of your Nextcloud instance (e.g. MyPrivateCloud)
     * @return string
     * @since 6.0.0
     */
    public function getName() : string
    {
    }
    /**
     * Name of the software product (defaults to Nextcloud)
     *
     * @return string
     * @since 22.0.0
     */
    public function getProductName() : string
    {
    }
    /**
     * name of your ownCloud instance containing HTML styles
     * @return string
     * @since 8.0.0
     * @deprecated 22.0.0
     */
    public function getHTMLName() : string
    {
    }
    /**
     * Entity behind your onwCloud instance
     * @return string
     * @since 6.0.0
     */
    public function getEntity() : string
    {
    }
    /**
     * ownCloud slogan
     * @return string
     * @since 6.0.0
     */
    public function getSlogan(?string $lang = null) : string
    {
    }
    /**
     * footer, short version
     * @return string
     * @since 6.0.0
     */
    public function getShortFooter() : string
    {
    }
    /**
     * footer, long version
     * @return string
     * @since 6.0.0
     */
    public function getLongFooter() : string
    {
    }
    /**
     * Returns the AppId for the App Store for the iOS Client
     * @return string AppId
     * @since 8.0.0
     */
    public function getiTunesAppId() : string
    {
    }
    /**
     * Themed logo url
     *
     * @param bool $useSvg Whether to point to the SVG image or a fallback
     * @return string
     * @since 12.0.0
     */
    public function getLogo(bool $useSvg = true) : string
    {
    }
    /**
     * Returns primary color
     * @return string
     * @since 12.0.0
     */
    public function getColorPrimary() : string
    {
    }
    /**
     * Return the default color primary
     * @return string
     * @since 25.0.4
     */
    public function getDefaultColorPrimary() : string
    {
    }
    /**
     * @param string $key
     * @return string URL to doc with key
     * @since 12.0.0
     */
    public function buildDocLinkToKey(string $key) : string
    {
    }
    /**
     * Returns the title
     * @return string title
     * @since 12.0.0
     */
    public function getTitle() : string
    {
    }
    /**
     * Returns primary color
     * @return string
     * @since 13.0.0
     */
    public function getTextColorPrimary() : string
    {
    }
    /**
     * Returns primary color
     * @return string
     * @since 25.0.4
     */
    public function getDefaultTextColorPrimary() : string
    {
    }
}
/**
 * Interface IAddressBook
 *
 * @since 5.0.0
 */
interface IAddressBook
{
    /**
     * @return string defining the technical unique key
     * @since 5.0.0
     */
    public function getKey();
    /**
     * @return string defining the unique uri
     * @since 16.0.0
     */
    public function getUri() : string;
    /**
     * In comparison to getKey() this function returns a human readable (maybe translated) name
     * @return mixed
     * @since 5.0.0
     */
    public function getDisplayName();
    /**
     * @param string $pattern which should match within the $searchProperties
     * @param array $searchProperties defines the properties within the query pattern should match
     * @param array $options Options to define the output format and search behavior
     * 	- 'types' boolean (since 15.0.0) If set to true, fields that come with a TYPE property will be an array
     *    example: ['id' => 5, 'FN' => 'Thomas Tanghus', 'EMAIL' => ['type => 'HOME', 'value' => 'g@h.i']]
     * 	- 'escape_like_param' - If set to false wildcards _ and % are not escaped
     * 	- 'limit' - Set a numeric limit for the search results
     * 	- 'offset' - Set the offset for the limited search results
     * 	- 'wildcard' - (since 23.0.0) Whether the search should use wildcards
     * @psalm-param array{types?: bool, escape_like_param?: bool, limit?: int, offset?: int, wildcard?: bool} $options
     * @return array an array of contacts which are arrays of key-value-pairs
     *  example result:
     *  [
     *		['id' => 0, 'FN' => 'Thomas Müller', 'EMAIL' => 'a@b.c', 'GEO' => '37.386013;-122.082932'],
     *		['id' => 5, 'FN' => 'Thomas Tanghus', 'EMAIL' => ['d@e.f', 'g@h.i']]
     *	]
     * @since 5.0.0
     */
    public function search($pattern, $searchProperties, $options);
    /**
     * @param array $properties this array if key-value-pairs defines a contact
     * @return array an array representing the contact just created or updated
     * @since 5.0.0
     */
    public function createOrUpdate($properties);
    //	// dummy
    //	return array('id'    => 0, 'FN' => 'Thomas Müller', 'EMAIL' => 'a@b.c',
    //		     'PHOTO' => 'VALUE=uri:http://www.abc.com/pub/photos/jqpublic.gif',
    //		     'ADR'   => ';;123 Main Street;Any Town;CA;91921-1234'
    //	);
    /**
     * @return mixed
     * @since 5.0.0
     */
    public function getPermissions();
    /**
     * @param int $id the unique identifier to a contact
     * @return bool successful or not
     * @since 5.0.0
     */
    public function delete($id);
    /**
     * Returns true if this address-book is not owned by the current user,
     * but shared with them.
     *
     * @return bool
     * @since 20.0.0
     */
    public function isShared() : bool;
    /**
     * @return bool
     * @since 20.0.0
     */
    public function isSystemAddressBook() : bool;
}
/**
 * This class provides avatar functionality
 * @since 6.0.0
 */
interface IAvatar
{
    /**
     * Get the users avatar
     *
     * @param int $size size in px of the avatar, avatars are square, defaults to 64, -1 can be used to not scale the image
     * @param bool $darkTheme Should the generated avatar be dark themed
     * @return false|\OCP\IImage containing the avatar or false if there's no image
     * @since 6.0.0 - size of -1 was added in 9.0.0
     */
    public function get(int $size = 64, bool $darkTheme = false);
    /**
     * Check if an avatar exists for the user
     *
     * @since 8.1.0
     */
    public function exists() : bool;
    /**
     * Check if the avatar of a user is a custom uploaded one
     *
     * @since 14.0.0
     */
    public function isCustomAvatar() : bool;
    /**
     * Sets the users avatar
     *
     * @param \OCP\IImage|resource|string $data An image object, imagedata or path to set a new avatar
     * @throws \Exception if the provided file is not a jpg or png image
     * @throws \Exception if the provided image is not valid
     * @throws \OC\NotSquareException if the image is not square
     * @since 6.0.0
     */
    public function set($data) : void;
    /**
     * Remove the user's avatar
     *
     * @param bool $silent Whether removing the avatar should trigger a change
     * @since 6.0.0
     */
    public function remove(bool $silent = false) : void;
    /**
     * Get the file of the avatar
     *
     * @param int $size The desired image size. -1 can be used to not scale the image
     * @param bool $darkTheme Should the generated avatar be dark themed
     * @throws NotFoundException
     * @since 9.0.0
     */
    public function getFile(int $size, bool $darkTheme = false) : \OCP\Files\SimpleFS\ISimpleFile;
    /**
     * Get the avatar background color
     *
     * @since 14.0.0
     */
    public function avatarBackgroundColor(string $hash) : \OCP\Color;
    /**
     * Updates the display name if changed.
     *
     * @param string $feature The changed feature
     * @param mixed $oldValue The previous value
     * @param mixed $newValue The new value
     * @since 13.0.0
     */
    public function userChanged(string $feature, $oldValue, $newValue) : void;
}
/**
 * This class provides avatar functionality
 * @since 6.0.0
 */
interface IAvatarManager
{
    /**
     * Return a user specific instance of \OCP\IAvatar
     * @see IAvatar
     * @param string $userId the Nextcloud user id
     * @throws \Exception In case the username is potentially dangerous
     * @throws \OCP\Files\NotFoundException In case there is no user folder yet
     * @since 6.0.0
     */
    public function getAvatar(string $userId) : \OCP\IAvatar;
    /**
     * Returns a guest user avatar instance.
     *
     * @param string $name The guest name, e.g. "Albert".
     * @return IAvatar
     * @since 16.0.0
     */
    public function getGuestAvatar(string $name) : \OCP\IAvatar;
}
/**
 * Manages the ownCloud navigation
 * @since 6.0.0
 */
interface INavigationManager
{
    /**
     * Navigation entries of the app navigation
     * @since 16.0.0
     */
    public const TYPE_APPS = 'link';
    /**
     * Navigation entries of the settings navigation
     * @since 16.0.0
     */
    public const TYPE_SETTINGS = 'settings';
    /**
     * Navigation entries for public page footer navigation
     * @since 16.0.0
     */
    public const TYPE_GUEST = 'guest';
    /**
     * Creates a new navigation entry
     *
     * @param array|\Closure $entry Array containing: id, name, order, icon and href key
     *					The use of a closure is preferred, because it will avoid
     * 					loading the routing of your app, unless required.
     * @return void
     * @since 6.0.0
     */
    public function add($entry);
    /**
     * Sets the current navigation entry of the currently running app
     * @param string $appId id of the app entry to activate (from added $entry)
     * @return void
     * @since 6.0.0
     */
    public function setActiveEntry($appId);
    /**
     * Get the current navigation entry of the currently running app
     * @return string
     * @since 20.0.0
     */
    public function getActiveEntry();
    /**
     * Get a list of navigation entries
     *
     * @param string $type type of the navigation entries
     * @return array
     * @since 14.0.0
     */
    public function getAll(string $type = self::TYPE_APPS) : array;
    /**
     * Set an unread counter for navigation entries
     *
     * @param string $id id of the navigation entry
     * @param int $unreadCounter Number of unread entries (0 to hide the counter which is the default)
     * @since 22.0.0
     */
    public function setUnreadCounter(string $id, int $unreadCounter) : void;
}
/**
 * Small Interface for Search
 * @since 7.0.0
 * @deprecated 20.0.0
 */
interface ISearch
{
    /**
     * Search all providers for $query
     * @param string $query
     * @param string[] $inApps optionally limit results to the given apps
     * @param int $page pages start at page 1
     * @param int $size
     * @return array An array of OCP\Search\Result's
     * @since 8.0.0
     * @deprecated 20.0.0
     */
    public function searchPaged($query, array $inApps = [], $page = 1, $size = 30);
    /**
     * Register a new search provider to search with
     * @param string $class class name of a OCP\Search\Provider
     * @param array $options optional
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public function registerProvider($class, array $options = []);
    /**
     * Remove one existing search provider
     * @param string $provider class name of a OCP\Search\Provider
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public function removeProvider($provider);
    /**
     * Remove all registered search providers
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public function clearProviders();
}
/**
 * Interface ISession
 *
 * wrap PHP's internal session handling into the ISession interface
 * @since 6.0.0
 */
interface ISession
{
    /**
     * Set a value in the session
     *
     * @param string $key
     * @param mixed $value
     * @since 6.0.0
     */
    public function set(string $key, $value);
    /**
     * Get a value from the session
     *
     * @param string $key
     * @return mixed should return null if $key does not exist
     * @since 6.0.0
     */
    public function get(string $key);
    /**
     * Check if a named key exists in the session
     *
     * @param string $key
     * @return bool
     * @since 6.0.0
     */
    public function exists(string $key) : bool;
    /**
     * Remove a $key/$value pair from the session
     *
     * @param string $key
     * @since 6.0.0
     */
    public function remove(string $key);
    /**
     * Reset and recreate the session
     * @since 6.0.0
     */
    public function clear();
    /**
     * Reopen a session for writing again
     *
     * @return bool true if the session was actually reopened, otherwise false
     * @since 25.0.0
     */
    public function reopen() : bool;
    /**
     * Close the session and release the lock
     * @since 7.0.0
     */
    public function close();
    /**
     * Wrapper around session_regenerate_id
     *
     * @param bool $deleteOldSession Whether to delete the old associated session file or not.
     * @param bool $updateToken Wheater to update the associated auth token
     * @return void
     * @since 9.0.0, $updateToken added in 14.0.0
     */
    public function regenerateId(bool $deleteOldSession = true, bool $updateToken = false);
    /**
     * Wrapper around session_id
     *
     * @return string
     * @throws SessionNotAvailableException
     * @since 9.1.0
     */
    public function getId() : string;
}
/**
 * Factory class creating instances of \OCP\ITags
 *
 * A tag can be e.g. 'Family', 'Work', 'Chore', 'Special Occation' or
 * anything else that is either parsed from a vobject or that the user chooses
 * to add.
 * Tag names are not case-sensitive, but will be saved with the case they
 * are entered in. If a user already has a tag 'family' for a type, and
 * tries to add a tag named 'Family' it will be silently ignored.
 * @since 6.0.0
 */
interface ITagManager
{
    /**
     * Create a new \OCP\ITags instance and load tags from db for the current user.
     *
     * @see \OCP\ITags
     * @param string $type The type identifier e.g. 'contact' or 'event'.
     * @param array $defaultTags An array of default tags to be used if none are stored.
     * @param boolean $includeShared Whether to include tags for items shared with this user by others. - always false since 20.0.0
     * @param string $userId user for which to retrieve the tags, defaults to the currently
     * logged in user
     * @return \OCP\ITags
     * @since 6.0.0 - parameter $includeShared and $userId were added in 8.0.0 - $includeShared is always false since 20.0.0
     */
    public function load($type, $defaultTags = [], $includeShared = false, $userId = null);
}
/**
 * Class for easily tagging objects by their id
 *
 * A tag can be e.g. 'Family', 'Work', 'Chore', 'Special Occation' or
 * anything else that is either parsed from a vobject or that the user chooses
 * to add.
 * Tag names are not case-sensitive, but will be saved with the case they
 * are entered in. If a user already has a tag 'family' for a type, and
 * tries to add a tag named 'Family' it will be silently ignored.
 * @since 6.0.0
 */
interface ITags
{
    /**
     * @since 19.0.0
     */
    public const TAG_FAVORITE = '_$!<Favorite>!$_';
    /**
     * Check if any tags are saved for this type and user.
     * @since 6.0.0
     */
    public function isEmpty() : bool;
    /**
     * Returns an array mapping a given tag's properties to its values:
     * ['id' => 0, 'name' = 'Tag', 'owner' = 'User', 'type' => 'tagtype']
     *
     * @param string $id The ID of the tag that is going to be mapped
     * @return array|false
     * @since 8.0.0
     */
    public function getTag(string $id);
    /**
     * Get the tags for a specific user.
     *
     * This returns an array with id/name maps:
     *
     * ```php
     * [
     * 	['id' => 0, 'name' = 'First tag'],
     * 	['id' => 1, 'name' = 'Second tag'],
     * ]
     * ```
     *
     * @return array<array-key, array{id: int, name: string}>
     * @since 6.0.0
     */
    public function getTags() : array;
    /**
     * Get a list of tags for the given item ids.
     *
     * This returns an array with object id / tag names:
     *
     * ```php
     * [
     *   1 => array('First tag', 'Second tag'),
     *   2 => array('Second tag'),
     *   3 => array('Second tag', 'Third tag'),
     * ]
     * ```
     *
     * @param array $objIds item ids
     * @return array|false with object id as key and an array
     * of tag names as value or false if an error occurred
     * @since 8.0.0
     */
    public function getTagsForObjects(array $objIds);
    /**
     * Get a list of items tagged with $tag.
     *
     * Throws an exception if the tag could not be found.
     *
     * @param string|integer $tag Tag id or name.
     * @return array|false An array of object ids or false on error.
     * @since 6.0.0
     */
    public function getIdsForTag($tag);
    /**
     * Checks whether a tag is already saved.
     *
     * @param string $name The name to check for.
     * @since 6.0.0
     */
    public function hasTag(string $name) : bool;
    /**
     * Checks whether a tag is saved for the given user,
     * disregarding the ones shared with him or her.
     *
     * @param string $name The tag name to check for.
     * @param string $user The user whose tags are to be checked.
     * @return bool
     * @since 8.0.0
     */
    public function userHasTag(string $name, string $user) : bool;
    /**
     * Add a new tag.
     *
     * @param string $name A string with a name of the tag
     * @return int|false the id of the added tag or false if it already exists.
     * @since 6.0.0
     */
    public function add(string $name);
    /**
     * Rename tag.
     *
     * @param string|integer $from The name or ID of the existing tag
     * @param string $to The new name of the tag.
     * @return bool
     * @since 6.0.0
     */
    public function rename($from, string $to) : bool;
    /**
     * Add a list of new tags.
     *
     * @param string|string[] $names A string with a name or an array of strings containing
     * the name(s) of the to add.
     * @param bool $sync When true, save the tags
     * @param int|null $id int Optional object id to add to this|these tag(s)
     * @return bool Returns false on error.
     * @since 6.0.0
     */
    public function addMultiple($names, bool $sync = false, ?int $id = null) : bool;
    /**
     * Delete tag/object relations from the db
     *
     * @param array $ids The ids of the objects
     * @return boolean Returns false on error.
     * @since 6.0.0
     */
    public function purgeObjects(array $ids);
    /**
     * Get favorites for an object type
     *
     * @return array|false An array of object ids.
     * @since 6.0.0
     */
    public function getFavorites();
    /**
     * Add an object to favorites
     *
     * @param int $objid The id of the object
     * @return boolean
     * @since 6.0.0
     */
    public function addToFavorites($objid);
    /**
     * Remove an object from favorites
     *
     * @param int $objid The id of the object
     * @return boolean
     * @since 6.0.0
     */
    public function removeFromFavorites($objid);
    /**
     * Creates a tag/object relation.
     *
     * @param int $objid The id of the object
     * @param string $tag The id or name of the tag
     * @return boolean Returns false on database error.
     * @since 6.0.0
     */
    public function tagAs($objid, $tag);
    /**
     * Delete single tag/object relation from the db
     *
     * @param int $objid The id of the object
     * @param string $tag The id or name of the tag
     * @return boolean
     * @since 6.0.0
     */
    public function unTag($objid, $tag);
    /**
     * Delete tags from the database
     *
     * @param string[]|integer[] $names An array of tags (names or IDs) to delete
     * @return bool Returns false on error
     * @since 6.0.0
     */
    public function delete($names);
}
/**
 * Class to generate URLs
 * @since 6.0.0
 */
interface IURLGenerator
{
    /**
     * Regex for matching http(s) urls
     *
     * This is a copy of the frontend regex in core/src/OCP/comments.js, make sure to adjust both when changing
     *
     * @since 25.0.0
     */
    public const URL_REGEX = '/' . self::URL_REGEX_NO_MODIFIERS . '/mi';
    /**
     * Regex for matching http(s) urls (without modifiers for client compatibility)
     *
     * This is a copy of the frontend regex in core/src/OCP/comments.js, make sure to adjust both when changing
     *
     * @since 25.0.0
     */
    public const URL_REGEX_NO_MODIFIERS = '(\\s|\\n|^)(https?:\\/\\/)((?:[-A-Z0-9+_]+\\.)+[-A-Z]+(?:\\/[-A-Z0-9+&@#%?=~_|!:,.;()]*)*)(\\s|\\n|$)';
    /**
     * Returns the URL for a route
     * @param string $routeName the name of the route
     * @param array $arguments an array with arguments which will be filled into the url
     * @return string the url
     * @since 6.0.0
     */
    public function linkToRoute(string $routeName, array $arguments = []) : string;
    /**
     * Returns the absolute URL for a route
     * @param string $routeName the name of the route
     * @param array $arguments an array with arguments which will be filled into the url
     * @return string the absolute url
     * @since 8.0.0
     */
    public function linkToRouteAbsolute(string $routeName, array $arguments = []) : string;
    /**
     * @param string $routeName
     * @param array $arguments
     * @return string
     * @since 15.0.0
     */
    public function linkToOCSRouteAbsolute(string $routeName, array $arguments = []) : string;
    /**
     * Returns an URL for an image or file
     * @param string $appName the name of the app
     * @param string $file the name of the file
     * @param array $args array with param=>value, will be appended to the returned url
     *    The value of $args will be urlencoded
     * @return string the url
     * @since 6.0.0
     */
    public function linkTo(string $appName, string $file, array $args = []) : string;
    /**
     * Returns the link to an image, like linkTo but only with prepending img/
     * @param string $appName the name of the app
     * @param string $file the name of the file
     * @return string the url
     * @since 6.0.0
     */
    public function imagePath(string $appName, string $file) : string;
    /**
     * Makes an URL absolute
     * @param string $url the url in the ownCloud host
     * @return string the absolute version of the url
     * @since 6.0.0
     */
    public function getAbsoluteURL(string $url) : string;
    /**
     * @param string $key
     * @return string url to the online documentation
     * @since 8.0.0
     */
    public function linkToDocs(string $key) : string;
    /**
     * Returns the URL of the default page based on the system configuration
     * and the apps visible for the current user
     * @return string
     * @since 23.0.0
     */
    public function linkToDefaultPageUrl() : string;
    /**
     * @return string base url of the current request
     * @since 13.0.0
     */
    public function getBaseUrl() : string;
    /**
     * @return string webroot part of the base url
     * @since 23.0.0
     */
    public function getWebroot() : string;
}
/**
 * Class Manager
 *
 * Hooks available in scope \OC\User:
 * - preSetPassword(\OC\User\User $user, string $password, string $recoverPassword)
 * - postSetPassword(\OC\User\User $user, string $password, string $recoverPassword)
 * - preDelete(\OC\User\User $user)
 * - postDelete(\OC\User\User $user)
 * - preCreateUser(string $uid, string $password)
 * - postCreateUser(\OC\User\User $user, string $password)
 * - assignedUserId(string $uid)
 * - preUnassignedUserId(string $uid)
 * - postUnassignedUserId(string $uid)
 *
 * @since 8.0.0
 */
interface IUserManager
{
    /**
     * @since 26.0.0
     */
    public const MAX_PASSWORD_LENGTH = 469;
    /**
     * register a user backend
     *
     * @param \OCP\UserInterface $backend
     * @since 8.0.0
     */
    public function registerBackend($backend);
    /**
     * Get the active backends
     * @return \OCP\UserInterface[]
     * @since 8.0.0
     */
    public function getBackends();
    /**
     * remove a user backend
     *
     * @param \OCP\UserInterface $backend
     * @since 8.0.0
     */
    public function removeBackend($backend);
    /**
     * remove all user backends
     * @since 8.0.0
     */
    public function clearBackends();
    /**
     * get a user by user id
     *
     * @param string $uid
     * @return \OCP\IUser|null Either the user or null if the specified user does not exist
     * @since 8.0.0
     */
    public function get($uid);
    /**
     * Get the display name of a user
     *
     * @param string $uid
     * @return string|null
     * @since 25.0.0
     */
    public function getDisplayName(string $uid) : ?string;
    /**
     * check if a user exists
     *
     * @param string $uid
     * @return bool
     * @since 8.0.0
     */
    public function userExists($uid);
    /**
     * Check if the password is valid for the user
     *
     * @param string $loginName
     * @param string $password
     * @return IUser|false the User object on success, false otherwise
     * @since 8.0.0
     */
    public function checkPassword($loginName, $password);
    /**
     * search by user id
     *
     * @param string $pattern
     * @param int $limit
     * @param int $offset
     * @return \OCP\IUser[]
     * @since 8.0.0
     */
    public function search($pattern, $limit = null, $offset = null);
    /**
     * search by displayName
     *
     * @param string $pattern
     * @param int $limit
     * @param int $offset
     * @return \OCP\IUser[]
     * @since 8.0.0
     */
    public function searchDisplayName($pattern, $limit = null, $offset = null);
    /**
     * Search known users (from phonebook sync) by displayName
     *
     * @param string $searcher
     * @param string $pattern
     * @param int|null $limit
     * @param int|null $offset
     * @return IUser[]
     * @since 21.0.1
     */
    public function searchKnownUsersByDisplayName(string $searcher, string $pattern, ?int $limit = null, ?int $offset = null) : array;
    /**
     * @param string $uid
     * @param string $password
     * @throws \InvalidArgumentException
     * @return false|\OCP\IUser the created user or false
     * @since 8.0.0
     */
    public function createUser($uid, $password);
    /**
     * @param string $uid
     * @param string $password
     * @param UserInterface $backend
     * @return IUser|null
     * @throws \InvalidArgumentException
     * @since 12.0.0
     */
    public function createUserFromBackend($uid, $password, \OCP\UserInterface $backend);
    /**
     * Get how many users per backend exist (if supported by backend)
     *
     * @return array<string, int> an array of backend class name as key and count number as value
     * @since 8.0.0
     */
    public function countUsers();
    /**
     * @param \Closure $callback
     * @psalm-param \Closure(\OCP\IUser):void $callback
     * @param string $search
     * @since 9.0.0
     */
    public function callForAllUsers(\Closure $callback, $search = '');
    /**
     * returns how many users have logged in once
     *
     * @return int
     * @since 11.0.0
     */
    public function countDisabledUsers();
    /**
     * returns how many users have logged in once
     *
     * @return int
     * @since 11.0.0
     */
    public function countSeenUsers();
    /**
     * @param \Closure $callback
     * @psalm-param \Closure(\OCP\IUser):?bool $callback
     * @since 11.0.0
     */
    public function callForSeenUsers(\Closure $callback);
    /**
     * returns all users having the provided email set as system email address
     *
     * @param string $email
     * @return IUser[]
     * @since 9.1.0
     */
    public function getByEmail($email);
    /**
     * @param string $uid The user ID to validate
     * @param bool $checkDataDirectory Whether it should be checked if files for the ID exist inside the data directory
     * @throws \InvalidArgumentException Message is an already translated string with a reason why the ID is not valid
     * @since 26.0.0
     */
    public function validateUserId(string $uid, bool $checkDataDirectory = false) : void;
}
/**
 * @since 8.2.0
 */
class SabrePluginException extends \Sabre\DAV\Exception
{
    /**
     * Returns the HTTP statuscode for this exception
     *
     * @return int
     * @since 8.2.0
     */
    public function getHTTPCode()
    {
    }
}
/**
 * Class allowing to inject services into your application. You should
 * use whenever possible dependency injections instead.
 *
 * ```php
 * use OCP\Server;
 *
 * $tagManager = Server::get(ITagManager::class);
 * ```
 *
 * @since 25.0.0
 */
final class Server
{
    /**
     * @template T
     * @param class-string<T>|string $serviceName
     * @return T|mixed
     * @psalm-template S as class-string<T>|string
     * @psalm-param S $serviceName
     * @psalm-return (S is class-string<T> ? T : mixed)
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     * @since 25.0.0
     */
    public static function get(string $serviceName)
    {
    }
}
/**
 * This class provides the ability for apps to share their content between users.
 * Apps must create a backend class that implements OCP\Share_Backend and register it with this class.
 *
 * It provides the following hooks:
 *  - post_shared
 * @since 5.0.0
 * @deprecated 17.0.0
 */
class Share extends \OC\Share\Constants
{
    /**
     * Get the item of item type shared with a given user by source
     * @param string $itemType
     * @param string $itemSource
     * @param string $user User to whom the item was shared
     * @param string $owner Owner of the share
     * @return array Return list of items with file_target, permissions and expiration
     * @since 6.0.0 - parameter $owner was added in 8.0.0
     * @deprecated 17.0.0
     */
    public static function getItemSharedWithUser($itemType, $itemSource, $user, $owner = null)
    {
    }
    /**
     * Get the item of item type shared with the current user by source
     * @param string $itemType
     * @param string $itemSource
     * @param int $format (optional) Format type must be defined by the backend
     * @param mixed $parameters
     * @param bool $includeCollections
     * @return void
     * @since 5.0.0
     * @deprecated 17.0.0
     */
    public static function getItemSharedWithBySource($itemType, $itemSource, $format = self::FORMAT_NONE, $parameters = null, $includeCollections = false)
    {
    }
    /**
     * Based on the given token the share information will be returned - password protected shares will be verified
     * @param string $token
     * @param bool $checkPasswordProtection
     * @return void
     * @since 5.0.0 - parameter $checkPasswordProtection was added in 7.0.0
     * @deprecated 17.0.0
     */
    public static function getShareByToken($token, $checkPasswordProtection = true)
    {
    }
    /**
     * Get the shared items of item type owned by the current user
     * @param string $itemType
     * @param int $format (optional) Format type must be defined by the backend
     * @param mixed $parameters
     * @param int $limit Number of items to return (optional) Returns all by default
     * @param bool $includeCollections
     * @return void
     * @since 5.0.0
     * @deprecated 17.0.0
     */
    public static function getItemsShared($itemType, $format = self::FORMAT_NONE, $parameters = null, $limit = -1, $includeCollections = false)
    {
    }
    /**
     * Get the shared item of item type owned by the current user
     * @param string $itemType
     * @param string $itemSource
     * @param int $format (optional) Format type must be defined by the backend
     * @param mixed $parameters
     * @param bool $includeCollections
     * @return mixed Return depends on format
     * @since 5.0.0
     * @deprecated 17.0.0
     *
     * Refactoring notes:
     *   * defacto $parameters and $format is always the default and therefore is removed in the subsequent call
     */
    public static function getItemShared($itemType, $itemSource, $format = self::FORMAT_NONE, $parameters = null, $includeCollections = false)
    {
    }
    /**
     * sent status if users got informed by mail about share
     * @param string $itemType
     * @param string $itemSource
     * @param int $shareType SHARE_TYPE_USER, SHARE_TYPE_GROUP, or SHARE_TYPE_LINK
     * @param string $recipient with whom was the item shared
     * @param bool $status
     * @since 6.0.0 - parameter $originIsSource was added in 8.0.0
     * @deprecated 17.0.0
     */
    public static function setSendMailStatus($itemType, $itemSource, $shareType, $recipient, $status)
    {
    }
}
namespace OCP\Translation;

/**
 * @since 26.0.0
 */
interface IDetectLanguageProvider
{
    /**
     * Try to detect the language of a given string
     *
     * @since 26.0.0
     */
    public function detectLanguage(string $text) : ?string;
}
/**
 * @since 26.0.0
 */
interface ITranslationProvider
{
    /**
     * @since 26.0.0
     */
    public function getName() : string;
    /**
     * @since 26.0.0
     */
    public function getAvailableLanguages() : array;
    /**
     * @since 26.0.0
     * @throws RuntimeException If the text could not be translated
     */
    public function translate(?string $fromLanguage, string $toLanguage, string $text) : string;
}
/**
 * @since 27.0.0
 */
class CouldNotTranslateException extends \RuntimeException
{
    /**
     * @since 27.0.0
     */
    public function __construct(protected ?string $from)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getFrom() : ?string
    {
    }
}
/**
 * @since 26.0.0
 */
interface ITranslationManager
{
    /**
     * @since 26.0.0
     */
    public function hasProviders() : bool;
    /**
     * @return ITranslationProvider[]
     * @since 27.1.0
     */
    public function getProviders() : array;
    /**
     * @since 26.0.0
     */
    public function canDetectLanguage() : bool;
    /**
     * @since 26.0.0
     * @return LanguageTuple[]
     */
    public function getLanguages() : array;
    /**
     * @since 26.0.0
     * @throws PreConditionNotMetException If no provider was registered but this method was still called
     * @throws InvalidArgumentException If no matching provider was found that can detect a language
     * @throws CouldNotTranslateException If the translation failed for other reasons
     */
    public function translate(string $text, ?string &$fromLanguage, string $toLanguage) : string;
}
/**
 * @since 26.0.0
 */
class LanguageTuple implements \JsonSerializable
{
    /**
     * @since 26.0.0
     */
    public function __construct(private string $from, private string $fromLabel, private string $to, private string $toLabel)
    {
    }
    /**
     * @since 26.0.0
     */
    public function jsonSerialize() : array
    {
    }
    /**
     * @since 26.0.0
     */
    public static function fromArray(array $data) : \OCP\Translation\LanguageTuple
    {
    }
}
namespace OCP\Common\Exception;

/**
 * This is thrown whenever something was expected to exist but doesn't
 *
 * @since 27.1.0
 */
class NotFoundException extends \Exception
{
    /**
     * Constructor
     * @param string $msg the error message
     * @since 27.1.0
     */
    public function __construct(string $msg)
    {
    }
}
namespace OCP;

/**
 * This class provides access to the internal filesystem abstraction layer. Use
 * this class exclusively if you want to access files
 * @since 5.0.0
 * @deprecated 14.0.0
 */
class Files
{
    /**
     * Recursive deletion of folders
     * @return bool
     * @since 5.0.0
     * @deprecated 14.0.0
     */
    public static function rmdirr($dir)
    {
    }
    /**
     * Get the mimetype form a local file
     * @param string $path
     * @return string
     * does NOT work for ownClouds filesystem, use OC_FileSystem::getMimeType instead
     * @since 5.0.0
     * @deprecated 14.0.0
     */
    public static function getMimeType($path)
    {
    }
    /**
     * Search for files by mimetype
     * @param string $mimetype
     * @return array
     * @since 6.0.0
     * @deprecated 14.0.0
     */
    public static function searchByMime($mimetype)
    {
    }
    /**
     * Copy the contents of one stream to another
     * @param resource $source
     * @param resource $target
     * @return int the number of bytes copied
     * @since 5.0.0
     * @deprecated 14.0.0
     */
    public static function streamCopy($source, $target)
    {
    }
    /**
     * Adds a suffix to the name in case the file exists
     * @param string $path
     * @param string $filename
     * @return string
     * @since 5.0.0
     * @deprecated 14.0.0 use getNonExistingName of the OCP\Files\Folder object
     */
    public static function buildNotExistingFileName($path, $filename)
    {
    }
    /**
     * Gets the Storage for an app - creates the needed folder if they are not
     * existent
     * @param string $app
     * @return \OC\Files\View
     * @since 5.0.0
     * @deprecated 14.0.0 use IAppData instead
     */
    public static function getStorage($app)
    {
    }
}
/**
 * Interface IGroup
 *
 * @since 8.0.0
 */
interface IGroup
{
    /**
     * @return string
     * @since 8.0.0
     */
    public function getGID();
    /**
     * Returns the group display name
     *
     * @return string
     * @since 12.0.0
     */
    public function getDisplayName();
    /**
     * Set the group display name
     *
     * @param string $displayName
     * @return bool
     * @since 18.0.0
     */
    public function setDisplayName(string $displayName) : bool;
    /**
     * get all users in the group
     *
     * @return \OCP\IUser[]
     * @since 8.0.0
     */
    public function getUsers();
    /**
     * check if a user is in the group
     *
     * @param \OCP\IUser $user
     * @return bool
     * @since 8.0.0
     */
    public function inGroup(\OCP\IUser $user);
    /**
     * add a user to the group
     *
     * @param \OCP\IUser $user
     * @since 8.0.0
     */
    public function addUser(\OCP\IUser $user);
    /**
     * remove a user from the group
     *
     * @param \OCP\IUser $user
     * @since 8.0.0
     */
    public function removeUser($user);
    /**
     * search for users in the group by userid
     *
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @return \OCP\IUser[]
     * @since 8.0.0
     */
    public function searchUsers(string $search, ?int $limit = null, ?int $offset = null) : array;
    /**
     * returns the number of users matching the search string
     *
     * @param string $search
     * @return int|bool
     * @since 8.0.0
     */
    public function count($search = '');
    /**
     * returns the number of disabled users
     *
     * @return int|bool
     * @since 14.0.0
     */
    public function countDisabled();
    /**
     * search for users in the group by displayname
     *
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @return \OCP\IUser[]
     * @since 8.0.0
     */
    public function searchDisplayName($search, $limit = null, $offset = null);
    /**
     * Get the names of the backends the group is connected to
     *
     * @return string[]
     * @since 22.0.0
     */
    public function getBackendNames();
    /**
     * delete the group
     *
     * @return bool
     * @since 8.0.0
     */
    public function delete();
    /**
     * @return bool
     * @since 14.0.0
     */
    public function canRemoveUser();
    /**
     * @return bool
     * @since 14.0.0
     */
    public function canAddUser();
    /**
     * @return bool
     * @since 16.0.0
     */
    public function hideFromCollaboration() : bool;
}
/**
 * Class Manager
 *
 * Hooks available in scope \OC\Group:
 * - preAddUser(\OC\Group\Group $group, \OC\User\User $user)
 * - postAddUser(\OC\Group\Group $group, \OC\User\User $user)
 * - preRemoveUser(\OC\Group\Group $group, \OC\User\User $user)
 * - postRemoveUser(\OC\Group\Group $group, \OC\User\User $user)
 * - preDelete(\OC\Group\Group $group)
 * - postDelete(\OC\Group\Group $group)
 * - preCreate(string $groupId)
 * - postCreate(\OC\Group\Group $group)
 *
 * @since 8.0.0
 */
interface IGroupManager
{
    /**
     * Checks whether a given backend is used
     *
     * @param string $backendClass Full classname including complete namespace
     * @return bool
     * @since 8.1.0
     */
    public function isBackendUsed($backendClass);
    /**
     * @param \OCP\GroupInterface $backend
     * @since 8.0.0
     */
    public function addBackend($backend);
    /**
     * @since 8.0.0
     */
    public function clearBackends();
    /**
     * Get the active backends
     * @return \OCP\GroupInterface[]
     * @since 13.0.0
     */
    public function getBackends();
    /**
     * @param string $gid
     * @return \OCP\IGroup|null
     * @since 8.0.0
     */
    public function get($gid);
    /**
     * @param string $gid
     * @return bool
     * @since 8.0.0
     */
    public function groupExists($gid);
    /**
     * @param string $gid
     * @return \OCP\IGroup|null
     * @since 8.0.0
     */
    public function createGroup($gid);
    /**
     * @param string $search
     * @param ?int $limit
     * @param ?int $offset
     * @return \OCP\IGroup[]
     * @since 8.0.0
     */
    public function search(string $search, ?int $limit = null, ?int $offset = 0);
    /**
     * @param \OCP\IUser|null $user
     * @return \OCP\IGroup[]
     * @since 8.0.0
     */
    public function getUserGroups(\OCP\IUser $user = null);
    /**
     * @param \OCP\IUser $user
     * @return string[] with group names
     * @since 8.0.0
     */
    public function getUserGroupIds(\OCP\IUser $user) : array;
    /**
     * get a list of all display names in a group
     *
     * @param string $gid
     * @param string $search
     * @param int $limit
     * @param int $offset
     * @return array an array of display names (value) and user ids (key)
     * @since 8.0.0
     */
    public function displayNamesInGroup($gid, $search = '', $limit = -1, $offset = 0);
    /**
     * Checks if a userId is in the admin group
     * @param string $userId
     * @return bool if admin
     * @since 8.0.0
     */
    public function isAdmin($userId);
    /**
     * Checks if a userId is in a group
     * @param string $userId
     * @param string $group
     * @return bool if in group
     * @since 8.0.0
     */
    public function isInGroup($userId, $group);
    /**
     * Get the display name of a Nextcloud group
     *
     * @param string $groupId
     * @return ?string display name, if any
     *
     * @since 26.0.0
     */
    public function getDisplayName(string $groupId) : ?string;
}
/**
 * Interface IUser
 *
 * @since 8.0.0
 */
interface IUser
{
    /**
     * get the user id
     *
     * @return string
     * @since 8.0.0
     */
    public function getUID();
    /**
     * get the display name for the user, if no specific display name is set it will fallback to the user id
     *
     * @return string
     * @since 8.0.0
     */
    public function getDisplayName();
    /**
     * set the display name for the user
     *
     * @param string $displayName
     * @return bool
     * @since 8.0.0
     *
     * @since 25.0.0 Throw InvalidArgumentException
     * @throws \InvalidArgumentException
     */
    public function setDisplayName($displayName);
    /**
     * returns the timestamp of the user's last login or 0 if the user did never
     * login
     *
     * @return int
     * @since 8.0.0
     */
    public function getLastLogin();
    /**
     * updates the timestamp of the most recent login of this user
     * @since 8.0.0
     */
    public function updateLastLoginTimestamp();
    /**
     * Delete the user
     *
     * @return bool
     * @since 8.0.0
     */
    public function delete();
    /**
     * Set the password of the user
     *
     * @param string $password
     * @param string $recoveryPassword for the encryption app to reset encryption keys
     * @return bool
     * @since 8.0.0
     */
    public function setPassword($password, $recoveryPassword = null);
    /**
     * get the users home folder to mount
     *
     * @return string
     * @since 8.0.0
     */
    public function getHome();
    /**
     * Get the name of the backend class the user is connected with
     *
     * @return string
     * @since 8.0.0
     */
    public function getBackendClassName();
    /**
     * Get the backend for the current user object
     * @return ?UserInterface
     * @since 15.0.0
     */
    public function getBackend();
    /**
     * check if the backend allows the user to change his avatar on Personal page
     *
     * @return bool
     * @since 8.0.0
     */
    public function canChangeAvatar();
    /**
     * check if the backend supports changing passwords
     *
     * @return bool
     * @since 8.0.0
     */
    public function canChangePassword();
    /**
     * check if the backend supports changing display names
     *
     * @return bool
     * @since 8.0.0
     */
    public function canChangeDisplayName();
    /**
     * check if the user is enabled
     *
     * @return bool
     * @since 8.0.0
     */
    public function isEnabled();
    /**
     * set the enabled status for the user
     *
     * @param bool $enabled
     * @since 8.0.0
     */
    public function setEnabled(bool $enabled = true);
    /**
     * get the user's email address
     *
     * @return string|null
     * @since 9.0.0
     */
    public function getEMailAddress();
    /**
     * get the user's system email address
     *
     * The system mail address may be read only and may be set from different
     * sources like LDAP, SAML or simply the admin.
     *
     * Use this getter only when the system address is needed. For picking the
     * proper address to e.g. send a mail to, use getEMailAddress().
     *
     * @return string|null
     * @since 23.0.0
     */
    public function getSystemEMailAddress() : ?string;
    /**
     * get the user's preferred email address
     *
     * The primary mail address may be set be the user to specify a different
     * email address where mails by Nextcloud are sent to. It is not necessarily
     * set.
     *
     * Use this getter only when the primary address is needed. For picking the
     * proper address to e.g. send a mail to, use getEMailAddress().
     *
     * @return string|null
     * @since 23.0.0
     */
    public function getPrimaryEMailAddress() : ?string;
    /**
     * get the avatar image if it exists
     *
     * @param int $size
     * @return IImage|null
     * @since 9.0.0
     */
    public function getAvatarImage($size);
    /**
     * get the federation cloud id
     *
     * @return string
     * @since 9.0.0
     */
    public function getCloudId();
    /**
     * set the email address of the user
     *
     * It is an alias to setSystemEMailAddress()
     *
     * @param string|null $mailAddress
     * @return void
     * @since 9.0.0
     * @deprecated 23.0.0 use setSystemEMailAddress() or setPrimaryEMailAddress()
     */
    public function setEMailAddress($mailAddress);
    /**
     * Set the system email address of the user
     *
     * This is supposed to be used when the email is set from different sources
     * (i.e. other user backends, admin).
     *
     * @since 23.0.0
     */
    public function setSystemEMailAddress(string $mailAddress) : void;
    /**
     * Set the primary email address of the user.
     *
     * This method should be typically called when the user is changing their
     * own primary address and is not allowed to change their system email.
     *
     * The mail address provided here must be already registered as an
     * additional mail in the user account and also be verified locally. Also
     * an empty string is allowed to delete this preference.
     *
     * @throws InvalidArgumentException when the provided email address does not
     *                                  satisfy constraints.
     *
     * @since 23.0.0
     */
    public function setPrimaryEMailAddress(string $mailAddress) : void;
    /**
     * get the users' quota in human readable form. If a specific quota is not
     * set for the user, the default value is returned. If a default setting
     * was not set otherwise, it is return as 'none', i.e. quota is not limited.
     *
     * @return string
     * @since 9.0.0
     */
    public function getQuota();
    /**
     * set the users' quota
     *
     * @param string $quota
     * @return void
     * @since 9.0.0
     */
    public function setQuota($quota);
    /**
     * Get the user's manager UIDs
     *
     * @since 27.0.0
     * @return string[]
     */
    public function getManagerUids() : array;
    /**
     * Set the user's manager UIDs
     *
     * @param string[] $uids UIDs of all managers
     * @return void
     * @since 27.0.0
     */
    public function setManagerUids(array $uids) : void;
}
namespace OCP\SpeechToText\Events;

/**
 * @since 27.0.0
 */
abstract class AbstractTranscriptionEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 27.0.0
     */
    public function __construct(private int $fileIdId, private ?\OCP\Files\File $file, private ?string $userId, private string $appId)
    {
    }
    /**
     * @since 27.0.0
     */
    public function getFileId() : int
    {
    }
    /**
     * @since 27.0.0
     */
    public function getFile() : ?\OCP\Files\File
    {
    }
    /**
     * @since 27.0.0
     */
    public function getUserId() : ?string
    {
    }
    /**
     * @since 27.0.0
     */
    public function getAppId() : string
    {
    }
}
/**
 * This Event is emitted if a transcription of a media file using a Speech-To-Text provider failed
 * @since 27.0.0
 */
class TranscriptionFailedEvent extends \OCP\SpeechToText\Events\AbstractTranscriptionEvent
{
    /**
     * @since 27.0.0
     */
    public function __construct(int $fileId, ?\OCP\Files\File $file, private string $errorMessage, ?string $userId, string $appId)
    {
    }
    /**
     * @since 27.0.0
     * @return string The error message
     */
    public function getErrorMessage() : string
    {
    }
}
/**
 * This Event is emitted when a transcription of a media file happened successfully
 * @since 27.0.0
 */
class TranscriptionSuccessfulEvent extends \OCP\SpeechToText\Events\AbstractTranscriptionEvent
{
    /**
     * @since 27.0.0
     */
    public function __construct(int $fileId, ?\OCP\Files\File $file, private string $transcript, ?string $userId, string $appId)
    {
    }
    /**
     * @since 27.0.0
     * @return string The transcript of the media file
     */
    public function getTranscript() : string
    {
    }
}
namespace OCP\SpeechToText;

/**
 * @since 27.0.0
 */
interface ISpeechToTextManager
{
    /**
     * @since 27.0.0
     */
    public function hasProviders() : bool;
    /**
     * @return ISpeechToTextProvider[]
     * @since 27.1.0
     */
    public function getProviders() : array;
    /**
     * Will schedule a transcription process in the background. The result will become available
     * with the \OCP\SpeechToText\Events\TranscriptionFinishedEvent
     * You should add context information to the context array to re-identify the transcription result as
     * belonging to your transcription request.
     *
     * @param File $file The media file to transcribe
     * @param ?string $userId The user that triggered this request (only for convenience, will be available on the TranscriptEvents)
     * @param string $appId The app that triggered this request (only for convenience, will be available on the TranscriptEvents)
     * @throws PreConditionNotMetException If no provider was registered but this method was still called
     * @throws InvalidArgumentException If the file could not be found or is not of a supported type
     * @since 27.0.0
     */
    public function scheduleFileTranscription(\OCP\Files\File $file, ?string $userId, string $appId) : void;
    /**
     * @param File $file The media file to transcribe
     * @returns string The transcription of the passed media file
     * @throws PreConditionNotMetException If no provider was registered but this method was still called
     * @throws InvalidArgumentException If the file could not be found or is not of a supported type
     * @throws RuntimeException If the transcription failed for other reasons
     * @since 27.0.0
     */
    public function transcribeFile(\OCP\Files\File $file) : string;
}
/**
 * @since 27.0.0
 */
interface ISpeechToTextProvider
{
    /**
     * @since 27.0.0
     */
    public function getName() : string;
    /**
     * @since 27.0.0
     * @throws RuntimeException If the text could not be transcribed
     */
    public function transcribeFile(\OCP\Files\File $file) : string;
}
namespace OCP\TextProcessing\Events;

/**
 * @since 27.1.0
 */
abstract class AbstractTextProcessingEvent extends \OCP\EventDispatcher\Event
{
    /**
     * @since 27.1.0
     */
    public function __construct(private \OCP\TextProcessing\Task $task)
    {
    }
    /**
     * @return Task
     * @since 27.1.0
     */
    public function getTask() : \OCP\TextProcessing\Task
    {
    }
}
/**
 * @since 27.1.0
 */
class TaskFailedEvent extends \OCP\TextProcessing\Events\AbstractTextProcessingEvent
{
    /**
     * @param Task $task
     * @param string $errorMessage
     * @since 27.1.0
     */
    public function __construct(\OCP\TextProcessing\Task $task, private string $errorMessage)
    {
    }
    /**
     * @return string
     * @since 27.1.0
     */
    public function getErrorMessage() : string
    {
    }
}
/**
 * @since 27.1.0
 */
class TaskSuccessfulEvent extends \OCP\TextProcessing\Events\AbstractTextProcessingEvent
{
}
namespace OCP\TextProcessing;

/**
 * This is a task type interface that is implemented by text processing
 * task types
 * @since 27.1.0
 */
interface ITaskType
{
    /**
     * Returns the localized name of this task type
     *
     * @since 27.1.0
     * @return string
     */
    public function getName() : string;
    /**
     * Returns the localized description of this task type
     *
     * @since 27.1.0
     * @return string
     */
    public function getDescription() : string;
}
/**
 * This is the text processing task type for free prompting
 * @since 27.1.0
 */
class FreePromptTaskType implements \OCP\TextProcessing\ITaskType
{
    /**
     * Constructor for FreePromptTaskType
     *
     * @param IFactory $l10nFactory
     * @since 27.1.0
     */
    public function __construct(\OCP\L10N\IFactory $l10nFactory)
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getName() : string
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getDescription() : string
    {
    }
}
/**
 * This is the text processing task type for creating headline
 * @since 27.1.0
 */
class HeadlineTaskType implements \OCP\TextProcessing\ITaskType
{
    /**
     * Constructor for HeadlineTaskType
     *
     * @param IFactory $l10nFactory
     * @since 27.1.0
     */
    public function __construct(\OCP\L10N\IFactory $l10nFactory)
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getName() : string
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getDescription() : string
    {
    }
}
/**
 * API surface for apps interacting with and making use of LanguageModel providers
 * without known which providers are installed
 * @since 27.1.0
 */
interface IManager
{
    /**
     * @since 27.1.0
     */
    public function hasProviders() : bool;
    /**
     * @return IProvider[]
     * @since 27.1.0
     */
    public function getProviders() : array;
    /**
     * @return class-string<ITaskType>[]
     * @since 27.1.0
     */
    public function getAvailableTaskTypes() : array;
    /**
     * @param Task $task The task to run
     * @throws PreConditionNotMetException If no or not the requested provider was registered but this method was still called
     * @throws RuntimeException If something else failed
     * @since 27.1.0
     */
    public function runTask(\OCP\TextProcessing\Task $task) : string;
    /**
     * Will schedule an LLM inference process in the background. The result will become available
     * with the \OCP\LanguageModel\Events\TaskSuccessfulEvent
     * If inference fails a \OCP\LanguageModel\Events\TaskFailedEvent will be dispatched instead
     *
     * @param Task $task The task to schedule
     * @throws PreConditionNotMetException If no or not the requested provider was registered but this method was still called
     * @since 27.1.0
     */
    public function scheduleTask(\OCP\TextProcessing\Task $task) : void;
    /**
     * Delete a task that has been scheduled before
     *
     * @param Task $task The task to delete
     * @since 27.1.0
     */
    public function deleteTask(\OCP\TextProcessing\Task $task) : void;
    /**
     * @param int $id The id of the task
     * @return Task
     * @throws RuntimeException If the query failed
     * @throws NotFoundException If the task could not be found
     * @since 27.1.0
     */
    public function getTask(int $id) : \OCP\TextProcessing\Task;
    /**
     * @param int $id The id of the task
     * @param string|null $userId The user id that scheduled the task
     * @return Task
     * @throws RuntimeException If the query failed
     * @throws NotFoundException If the task could not be found
     * @since 27.1.0
     */
    public function getUserTask(int $id, ?string $userId) : \OCP\TextProcessing\Task;
    /**
     * @param string $userId
     * @param string $appId
     * @param string|null $identifier
     * @return array
     * @since 27.1.0
     */
    public function getUserTasksByApp(string $userId, string $appId, ?string $identifier = null) : array;
}
/**
 * This is the interface that is implemented by apps that
 * implement a text processing provider
 * @template T of ITaskType
 * @since 27.1.0
 */
interface IProvider
{
    /**
     * The localized name of this provider
     * @since 27.1.0
     */
    public function getName() : string;
    /**
     * Processes a text
     *
     * @param string $prompt The input text
     * @return string the output text
     * @since 27.1.0
     * @throws RuntimeException If the text could not be processed
     */
    public function process(string $prompt) : string;
    /**
     * Returns the task type class string of the task type, that this
     * provider handles
     *
     * @since 27.1.0
     * @return class-string<T>
     */
    public function getTaskType() : string;
}
/**
 * This is the text processing task type for summaries
 * @since 27.1.0
 */
class SummaryTaskType implements \OCP\TextProcessing\ITaskType
{
    /**
     * Constructor for SummaryTaskType
     *
     * @param IFactory $l10nFactory
     * @since 27.1.0
     */
    public function __construct(\OCP\L10N\IFactory $l10nFactory)
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getName() : string
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getDescription() : string
    {
    }
}
/**
 * This is a text processing task
 * @since 27.1.0
 * @psalm-template T of ITaskType
 * @psalm-template S as class-string<T>
 * @psalm-template P as IProvider<T>
 */
final class Task implements \JsonSerializable
{
    /**
     * @since 27.1.0
     */
    public const TYPES = [\OCP\TextProcessing\FreePromptTaskType::class, \OCP\TextProcessing\SummaryTaskType::class, \OCP\TextProcessing\HeadlineTaskType::class, \OCP\TextProcessing\TopicsTaskType::class];
    /**
     * @since 27.1.0
     */
    public const STATUS_FAILED = 4;
    /**
     * @since 27.1.0
     */
    public const STATUS_SUCCESSFUL = 3;
    /**
     * @since 27.1.0
     */
    public const STATUS_RUNNING = 2;
    /**
     * @since 27.1.0
     */
    public const STATUS_SCHEDULED = 1;
    /**
     * @since 27.1.0
     */
    public const STATUS_UNKNOWN = 0;
    /**
     * @psalm-param S $type
     * @param string $type
     * @param string $input
     * @param string $appId
     * @param string|null $userId
     * @param string $identifier An arbitrary identifier for this task. max length: 255 chars
     * @since 27.1.0
     */
    public final function __construct(protected string $type, protected string $input, protected string $appId, protected ?string $userId, protected string $identifier = '')
    {
    }
    /**
     * @psalm-param P $provider
     * @param IProvider $provider
     * @return string
     * @since 27.1.0
     */
    public function visitProvider(\OCP\TextProcessing\IProvider $provider) : string
    {
    }
    /**
     * @psalm-param P $provider
     * @param IProvider $provider
     * @return bool
     * @since 27.1.0
     */
    public function canUseProvider(\OCP\TextProcessing\IProvider $provider) : bool
    {
    }
    /**
     * @psalm-return S
     * @since 27.1.0
     */
    public final function getType() : string
    {
    }
    /**
     * @return string|null
     * @since 27.1.0
     */
    public final function getOutput() : ?string
    {
    }
    /**
     * @param string|null $output
     * @since 27.1.0
     */
    public final function setOutput(?string $output) : void
    {
    }
    /**
     * @psalm-return self::STATUS_*
     * @since 27.1.0
     */
    public final function getStatus() : int
    {
    }
    /**
     * @psalm-param self::STATUS_* $status
     * @since 27.1.0
     */
    public final function setStatus(int $status) : void
    {
    }
    /**
     * @return int|null
     * @since 27.1.0
     */
    public final function getId() : ?int
    {
    }
    /**
     * @param int|null $id
     * @since 27.1.0
     */
    public final function setId(?int $id) : void
    {
    }
    /**
     * @return string
     * @since 27.1.0
     */
    public final function getInput() : string
    {
    }
    /**
     * @return string
     * @since 27.1.0
     */
    public final function getAppId() : string
    {
    }
    /**
     * @return string
     * @since 27.1.0
     */
    public final function getIdentifier() : string
    {
    }
    /**
     * @return string|null
     * @since 27.1.0
     */
    public final function getUserId() : ?string
    {
    }
    /**
     * @psalm-return array{id: ?int, type: S, status: 0|1|2|3|4, userId: ?string, appId: string, input: string, output: ?string, identifier: string}
     * @since 27.1.0
     */
    public function jsonSerialize() : array
    {
    }
}
/**
 * This is the text processing task type for topics extraction
 * @since 27.1.0
 */
class TopicsTaskType implements \OCP\TextProcessing\ITaskType
{
    /**
     * Constructor for TopicsTaskType
     *
     * @param IFactory $l10nFactory
     * @since 27.1.0
     */
    public function __construct(\OCP\L10N\IFactory $l10nFactory)
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getName() : string
    {
    }
    /**
     * @inheritDoc
     * @since 27.1.0
     */
    public function getDescription() : string
    {
    }
}
namespace OCP;

/**
 * This class provides an easy way for apps to store config values in the
 * database.
 * @since 7.0.0
 */
interface IAppConfig
{
    /**
     * check if a key is set in the appconfig
     * @param string $app
     * @param string $key
     * @return bool
     * @since 7.0.0
     */
    public function hasKey($app, $key);
    /**
     * get multiply values, either the app or key can be used as wildcard by setting it to false
     *
     * @param string|false $key
     * @param string|false $app
     * @return array|false
     * @since 7.0.0
     */
    public function getValues($app, $key);
    /**
     * get all values of the app or and filters out sensitive data
     *
     * @param string $app
     * @return array
     * @since 12.0.0
     */
    public function getFilteredValues($app);
    /**
     * Get all apps using the config
     * @return array an array of app ids
     *
     * This function returns a list of all apps that have at least one
     * entry in the appconfig table.
     * @since 7.0.0
     */
    public function getApps();
}
/**
 * Interface IDBConnection
 *
 * @since 6.0.0
 */
interface IDBConnection
{
    /**
     * @deprecated 22.0.0 this is an internal event, use {@see AddMissingIndicesEvent} instead
     */
    public const ADD_MISSING_INDEXES_EVENT = self::class . '::ADD_MISSING_INDEXES';
    /**
     * @deprecated 22.0.0 this is an internal event, use {@see AddMissingIndicesEvent} instead
     */
    public const CHECK_MISSING_INDEXES_EVENT = self::class . '::CHECK_MISSING_INDEXES';
    /**
     * @deprecated 22.0.0 this is an internal event
     */
    public const ADD_MISSING_PRIMARY_KEYS_EVENT = self::class . '::ADD_MISSING_PRIMARY_KEYS';
    /**
     * @deprecated 22.0.0 this is an internal event
     */
    public const CHECK_MISSING_PRIMARY_KEYS_EVENT = self::class . '::CHECK_MISSING_PRIMARY_KEYS';
    /**
     * @deprecated 22.0.0 this is an internal event
     */
    public const ADD_MISSING_COLUMNS_EVENT = self::class . '::ADD_MISSING_COLUMNS';
    /**
     * @deprecated 22.0.0 this is an internal event
     */
    public const CHECK_MISSING_COLUMNS_EVENT = self::class . '::CHECK_MISSING_COLUMNS';
    /**
     * Gets the QueryBuilder for the connection.
     *
     * @return \OCP\DB\QueryBuilder\IQueryBuilder
     * @since 8.2.0
     */
    public function getQueryBuilder();
    /**
     * Used to abstract the ownCloud database access away
     * @param string $sql the sql query with ? placeholder for params
     * @param int|null $limit the maximum number of rows
     * @param int|null $offset from which row we want to start
     * @return IPreparedStatement The prepared statement.
     * @since 6.0.0
     * @throws Exception since 21.0.0
     *
     * @psalm-taint-sink sql $sql
     */
    public function prepare($sql, $limit = null, $offset = null) : \OCP\DB\IPreparedStatement;
    /**
     * Executes an, optionally parameterized, SQL query.
     *
     * If the query is parameterized, a prepared statement is used.
     * If an SQLLogger is configured, the execution is logged.
     *
     * @param string $sql The SQL query to execute.
     * @param string[] $params The parameters to bind to the query, if any.
     * @param array $types The types the previous parameters are in.
     * @return IResult The executed statement.
     * @since 8.0.0
     * @throws Exception since 21.0.0
     *
     * @psalm-taint-sink sql $sql
     */
    public function executeQuery(string $sql, array $params = [], $types = []) : \OCP\DB\IResult;
    /**
     * Executes an SQL INSERT/UPDATE/DELETE query with the given parameters
     * and returns the number of affected rows.
     *
     * This method supports PDO binding types as well as DBAL mapping types.
     *
     * @param string $sql The SQL query.
     * @param array $params The query parameters.
     * @param array $types The parameter types.
     * @return int The number of affected rows.
     * @since 8.0.0
     * @throws Exception since 21.0.0
     *
     * @deprecated 21.0.0 use executeStatement
     *
     * @psalm-taint-sink sql $sql
     */
    public function executeUpdate(string $sql, array $params = [], array $types = []) : int;
    /**
     * Executes an SQL INSERT/UPDATE/DELETE query with the given parameters
     * and returns the number of affected rows.
     *
     * This method supports PDO binding types as well as DBAL mapping types.
     *
     * @param string $sql The SQL query.
     * @param array $params The query parameters.
     * @param array $types The parameter types.
     * @return int The number of affected rows.
     * @since 21.0.0
     * @throws Exception since 21.0.0
     *
     * @psalm-taint-sink sql $sql
     */
    public function executeStatement($sql, array $params = [], array $types = []) : int;
    /**
     * Used to get the id of the just inserted element
     * @param string $table the name of the table where we inserted the item
     * @return int the id of the inserted element
     * @since 6.0.0
     * @throws Exception since 21.0.0
     * @deprecated 21.0.0 use \OCP\DB\QueryBuilder\IQueryBuilder::getLastInsertId
     */
    public function lastInsertId(string $table) : int;
    /**
     * Insert a row if the matching row does not exists. To accomplish proper race condition avoidance
     * it is needed that there is also a unique constraint on the values. Then this method will
     * catch the exception and return 0.
     *
     * @param string $table The table name (will replace *PREFIX* with the actual prefix)
     * @param array $input data that should be inserted into the table  (column name => value)
     * @param array|null $compare List of values that should be checked for "if not exists"
     *				If this is null or an empty array, all keys of $input will be compared
     *				Please note: text fields (clob) must not be used in the compare array
     * @return int number of inserted rows
     * @throws Exception used to be the removed dbal exception, since 21.0.0 it's \OCP\DB\Exception
     * @since 6.0.0 - parameter $compare was added in 8.1.0, return type changed from boolean in 8.1.0
     * @deprecated 15.0.0 - use unique index and "try { $db->insert() } catch (UniqueConstraintViolationException $e) {}" instead, because it is more reliable and does not have the risk for deadlocks - see https://github.com/nextcloud/server/pull/12371
     */
    public function insertIfNotExist(string $table, array $input, array $compare = null);
    /**
     *
     * Insert a row if the row does not exist. Eventual conflicts during insert will be ignored.
     *
     * Implementation is not fully finished and should not be used!
     *
     * @param string $table The table name (will replace *PREFIX* with the actual prefix)
     * @param array $values data that should be inserted into the table  (column name => value)
     * @return int number of inserted rows
     * @since 16.0.0
     */
    public function insertIgnoreConflict(string $table, array $values) : int;
    /**
     * Insert or update a row value
     *
     * @param string $table
     * @param array $keys (column name => value)
     * @param array $values (column name => value)
     * @param array $updatePreconditionValues ensure values match preconditions (column name => value)
     * @return int number of new rows
     * @throws Exception used to be the removed dbal exception, since 21.0.0 it's \OCP\DB\Exception
     * @throws PreConditionNotMetException
     * @since 9.0.0
     */
    public function setValues($table, array $keys, array $values, array $updatePreconditionValues = []) : int;
    /**
     * Create an exclusive read+write lock on a table
     *
     * Important Note: Due to the nature how locks work on different DBs, it is
     * only possible to lock one table at a time. You should also NOT start a
     * transaction while holding a lock.
     *
     * @param string $tableName
     * @throws Exception since 21.0.0
     * @since 9.1.0
     */
    public function lockTable($tableName) : void;
    /**
     * Release a previous acquired lock again
     *
     * @throws Exception since 21.0.0
     * @since 9.1.0
     */
    public function unlockTable() : void;
    /**
     * Start a transaction
     * @since 6.0.0
     * @throws Exception since 21.0.0
     */
    public function beginTransaction() : void;
    /**
     * Check if a transaction is active
     *
     * @return bool
     * @since 8.2.0
     */
    public function inTransaction() : bool;
    /**
     * Commit the database changes done during a transaction that is in progress
     * @since 6.0.0
     * @throws Exception since 21.0.0
     */
    public function commit() : void;
    /**
     * Rollback the database changes done during a transaction that is in progress
     * @since 6.0.0
     * @throws Exception since 21.0.0
     */
    public function rollBack() : void;
    /**
     * Gets the error code and message as a string for logging
     * @return string
     * @since 6.0.0
     * @deprecated 21.0.0 doesn't return anything meaningful
     */
    public function getError() : string;
    /**
     * Fetch the SQLSTATE associated with the last database operation.
     *
     * @return integer The last error code.
     * @since 8.0.0
     * @deprecated 21.0.0 doesn't return anything anymore
     */
    public function errorCode();
    /**
     * Fetch extended error information associated with the last database operation.
     *
     * @return array The last error information.
     * @since 8.0.0
     * @deprecated 21.0.0 doesn't return anything anymore
     */
    public function errorInfo();
    /**
     * Establishes the connection with the database.
     *
     * @return bool
     * @throws Exception since 21.0.0
     * @since 8.0.0
     */
    public function connect() : bool;
    /**
     * Close the database connection
     * @since 8.0.0
     */
    public function close() : void;
    /**
     * Quotes a given input parameter.
     *
     * @param mixed $input Parameter to be quoted.
     * @param int $type Type of the parameter.
     * @return mixed The quoted parameter.
     * @since 8.0.0
     */
    public function quote($input, $type = \OCP\DB\QueryBuilder\IQueryBuilder::PARAM_STR);
    /**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     * @since 8.0.0
     */
    public function getDatabasePlatform();
    /**
     * Drop a table from the database if it exists
     *
     * @param string $table table name without the prefix
     * @throws Exception since 21.0.0
     * @since 8.0.0
     *
     * @psalm-taint-sink sql $table
     */
    public function dropTable(string $table) : void;
    /**
     * Check if a table exists
     *
     * @param string $table table name without the prefix
     * @return bool
     * @throws Exception since 21.0.0
     * @since 8.0.0
     */
    public function tableExists(string $table) : bool;
    /**
     * Escape a parameter to be used in a LIKE query
     *
     * @param string $param
     * @return string
     * @since 9.0.0
     */
    public function escapeLikeParameter(string $param) : string;
    /**
     * Check whether or not the current database support 4byte wide unicode
     *
     * @return bool
     * @since 11.0.0
     */
    public function supports4ByteText() : bool;
    /**
     * Create the schema of the connected database
     *
     * @return Schema
     * @throws Exception since 21.0.0
     * @since 13.0.0
     */
    public function createSchema() : \Doctrine\DBAL\Schema\Schema;
    /**
     * Migrate the database to the given schema
     *
     * @param Schema $toSchema
     * @throws Exception since 21.0.0
     * @since 13.0.0
     */
    public function migrateToSchema(\Doctrine\DBAL\Schema\Schema $toSchema) : void;
}
/**
 * This class provides functions to render and show thumbnails and previews of files
 * @since 6.0.0
 */
interface IPreview
{
    /**
     * @since 9.2.0
     * @deprecated 22.0.0
     */
    public const EVENT = self::class . ':' . 'PreviewRequested';
    public const MODE_FILL = 'fill';
    public const MODE_COVER = 'cover';
    /**
     * In order to improve lazy loading a closure can be registered which will be
     * called in case preview providers are actually requested
     *
     * $callable has to return an instance of \OCP\Preview\IProvider
     *
     * @param string $mimeTypeRegex Regex with the mime types that are supported by this provider
     * @param \Closure $callable
     * @return void
     * @since 8.1.0
     * @see \OCP\AppFramework\Bootstrap\IRegistrationContext::registerPreviewProvider
     *
     * @deprecated 23.0.0 Register your provider via the IRegistrationContext when booting the app
     */
    public function registerProvider($mimeTypeRegex, \Closure $callable);
    /**
     * Get all providers
     * @return array
     * @since 8.1.0
     */
    public function getProviders();
    /**
     * Does the manager have any providers
     * @return bool
     * @since 8.1.0
     */
    public function hasProviders();
    /**
     * Returns a preview of a file
     *
     * The cache is searched first and if nothing usable was found then a preview is
     * generated by one of the providers
     *
     * @param File $file
     * @param int $width
     * @param int $height
     * @param bool $crop
     * @param string $mode
     * @param string $mimeType To force a given mimetype for the file (files_versions needs this)
     * @return ISimpleFile
     * @throws NotFoundException
     * @throws \InvalidArgumentException if the preview would be invalid (in case the original image is invalid)
     * @since 11.0.0 - \InvalidArgumentException was added in 12.0.0
     */
    public function getPreview(\OCP\Files\File $file, $width = -1, $height = -1, $crop = false, $mode = \OCP\IPreview::MODE_FILL, $mimeType = null);
    /**
     * Returns true if the passed mime type is supported
     * @param string $mimeType
     * @return boolean
     * @since 6.0.0
     */
    public function isMimeSupported($mimeType = '*');
    /**
     * Check if a preview can be generated for a file
     *
     * @param \OCP\Files\FileInfo $file
     * @return bool
     * @since 8.0.0
     */
    public function isAvailable(\OCP\Files\FileInfo $file);
    /**
     * Generates previews of a file
     *
     * @param File $file
     * @param array $specifications
     * @param string $mimeType
     * @return ISimpleFile the last preview that was generated
     * @throws NotFoundException
     * @throws \InvalidArgumentException if the preview would be invalid (in case the original image is invalid)
     * @since 19.0.0
     */
    public function generatePreviews(\OCP\Files\File $file, array $specifications, $mimeType = null);
}
/**
 * This interface provides an immutable object with with accessors to
 * request variables and headers.
 *
 * Access request variables by method and name.
 *
 * Examples:
 *
 * $request->post['myvar']; // Only look for POST variables
 * $request->myvar; or $request->{'myvar'}; or $request->{$myvar}
 * Looks in the combined GET, POST and urlParams array.
 *
 * If you access e.g. ->post but the current HTTP request method
 * is GET a \LogicException will be thrown.
 *
 * NOTE:
 * - When accessing ->put a stream resource is returned and the accessor
 *   will return false on subsequent access to ->put or ->patch.
 * - When accessing ->patch and the Content-Type is either application/json
 *   or application/x-www-form-urlencoded (most cases) it will act like ->get
 *   and ->post and return an array. Otherwise the raw data will be returned.
 *
 * @property-read string[] $server
 * @property-read string[] $urlParams
 * @since 6.0.0
 */
interface IRequest
{
    /**
     * @since 9.1.0
     */
    public const USER_AGENT_CLIENT_ANDROID = '/^Mozilla\\/5\\.0 \\(Android\\) (ownCloud|Nextcloud)\\-android.*$/';
    /**
     * @since 13.0.0
     */
    public const USER_AGENT_TALK_ANDROID = '/^Mozilla\\/5\\.0 \\(Android\\) Nextcloud\\-Talk v.*$/';
    /**
     * @since 9.1.0
     */
    public const USER_AGENT_CLIENT_DESKTOP = '/^Mozilla\\/5\\.0 \\([A-Za-z ]+\\) (mirall|csyncoC)\\/.*$/';
    /**
     * @since 26.0.0
     */
    public const USER_AGENT_TALK_DESKTOP = '/^Mozilla\\/5\\.0 \\((?!Android|iOS)[A-Za-z ]+\\) Nextcloud\\-Talk v.*$/';
    /**
     * @since 9.1.0
     */
    public const USER_AGENT_CLIENT_IOS = '/^Mozilla\\/5\\.0 \\(iOS\\) (ownCloud|Nextcloud)\\-iOS.*$/';
    /**
     * @since 13.0.0
     */
    public const USER_AGENT_TALK_IOS = '/^Mozilla\\/5\\.0 \\(iOS\\) Nextcloud\\-Talk v.*$/';
    /**
     * @since 13.0.1
     */
    public const USER_AGENT_OUTLOOK_ADDON = '/^Mozilla\\/5\\.0 \\([A-Za-z ]+\\) Nextcloud\\-Outlook v.*$/';
    /**
     * @since 13.0.1
     */
    public const USER_AGENT_THUNDERBIRD_ADDON = '/^Mozilla\\/5\\.0 \\([A-Za-z ]+\\) Nextcloud\\-Thunderbird v.*$/';
    /**
     * @since 26.0.0
     */
    public const JSON_CONTENT_TYPE_REGEX = '/^application\\/(?:[a-z0-9.-]+\\+)?json\\b/';
    /**
     * @param string $name
     *
     * @psalm-taint-source input
     *
     * @return string
     * @since 6.0.0
     */
    public function getHeader(string $name) : string;
    /**
     * Lets you access post and get parameters by the index
     * In case of json requests the encoded json body is accessed
     *
     * @psalm-taint-source input
     *
     * @param string $key the key which you want to access in the URL Parameter
     *                     placeholder, $_POST or $_GET array.
     *                     The priority how they're returned is the following:
     *                     1. URL parameters
     *                     2. POST parameters
     *                     3. GET parameters
     * @param mixed $default If the key is not found, this value will be returned
     * @return mixed the content of the array
     * @since 6.0.0
     */
    public function getParam(string $key, $default = null);
    /**
     * Returns all params that were received, be it from the request
     *
     * (as GET or POST) or through the URL by the route
     *
     * @psalm-taint-source input
     *
     * @return array the array with all parameters
     * @since 6.0.0
     */
    public function getParams() : array;
    /**
     * Returns the method of the request
     *
     * @return string the method of the request (POST, GET, etc)
     * @since 6.0.0
     */
    public function getMethod() : string;
    /**
     * Shortcut for accessing an uploaded file through the $_FILES array
     *
     * @param string $key the key that will be taken from the $_FILES array
     * @return array the file in the $_FILES element
     * @since 6.0.0
     */
    public function getUploadedFile(string $key);
    /**
     * Shortcut for getting env variables
     *
     * @param string $key the key that will be taken from the $_ENV array
     * @return array the value in the $_ENV element
     * @since 6.0.0
     */
    public function getEnv(string $key);
    /**
     * Shortcut for getting cookie variables
     *
     * @psalm-taint-source input
     *
     * @param string $key the key that will be taken from the $_COOKIE array
     * @return string|null the value in the $_COOKIE element
     * @since 6.0.0
     */
    public function getCookie(string $key);
    /**
     * Checks if the CSRF check was correct
     *
     * @return bool true if CSRF check passed
     * @since 6.0.0
     */
    public function passesCSRFCheck() : bool;
    /**
     * Checks if the strict cookie has been sent with the request if the request
     * is including any cookies.
     *
     * @return bool
     * @since 9.0.0
     */
    public function passesStrictCookieCheck() : bool;
    /**
     * Checks if the lax cookie has been sent with the request if the request
     * is including any cookies.
     *
     * @return bool
     * @since 9.0.0
     */
    public function passesLaxCookieCheck() : bool;
    /**
     * Returns an ID for the request, value is not guaranteed to be unique and is mostly meant for logging
     * If `mod_unique_id` is installed this value will be taken.
     *
     * @return string
     * @since 8.1.0
     */
    public function getId() : string;
    /**
     * Returns the remote address, if the connection came from a trusted proxy
     * and `forwarded_for_headers` has been configured then the IP address
     * specified in this header will be returned instead.
     * Do always use this instead of $_SERVER['REMOTE_ADDR']
     *
     * @return string IP address
     * @since 8.1.0
     */
    public function getRemoteAddress() : string;
    /**
     * Returns the server protocol. It respects reverse proxy servers and load
     * balancers.
     *
     * @return string Server protocol (http or https)
     * @since 8.1.0
     */
    public function getServerProtocol() : string;
    /**
     * Returns the used HTTP protocol.
     *
     * @return string HTTP protocol. HTTP/2, HTTP/1.1 or HTTP/1.0.
     * @since 8.2.0
     */
    public function getHttpProtocol() : string;
    /**
     * Returns the request uri, even if the website uses one or more
     * reverse proxies
     *
     * @psalm-taint-source input
     *
     * @return string
     * @since 8.1.0
     */
    public function getRequestUri() : string;
    /**
     * Get raw PathInfo from request (not urldecoded)
     *
     * @psalm-taint-source input
     *
     * @throws \Exception
     * @return string Path info
     * @since 8.1.0
     */
    public function getRawPathInfo() : string;
    /**
     * Get PathInfo from request
     *
     * @psalm-taint-source input
     *
     * @throws \Exception
     * @return string|false Path info or false when not found
     * @since 8.1.0
     */
    public function getPathInfo();
    /**
     * Returns the script name, even if the website uses one or more
     * reverse proxies
     *
     * @return string the script name
     * @since 8.1.0
     */
    public function getScriptName() : string;
    /**
     * Checks whether the user agent matches a given regex
     *
     * @param array $agent array of agent names
     * @return bool true if at least one of the given agent matches, false otherwise
     * @since 8.1.0
     */
    public function isUserAgent(array $agent) : bool;
    /**
     * Returns the unverified server host from the headers without checking
     * whether it is a trusted domain
     *
     * @psalm-taint-source input
     *
     * @return string Server host
     * @since 8.1.0
     */
    public function getInsecureServerHost() : string;
    /**
     * Returns the server host from the headers, or the first configured
     * trusted domain if the host isn't in the trusted list
     *
     * @return string Server host
     * @since 8.1.0
     */
    public function getServerHost() : string;
}
/**
 * This is a tagging interface for the server container
 *
 * The interface currently extends IContainer, but this interface is deprecated as of Nextcloud 20,
 * thus this interface won't extend it anymore once that was removed. So migrate to the ContainerInterface
 * only.
 *
 * @deprecated 20.0.0
 *
 * @since 6.0.0
 */
interface IServerContainer extends \Psr\Container\ContainerInterface, \OCP\IContainer
{
    /**
     * The calendar manager will act as a broker between consumers for calendar information and
     * providers which actual deliver the calendar information.
     *
     * @return \OCP\Calendar\IManager
     * @since 13.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCalendarManager();
    /**
     * The calendar resource backend manager will act as a broker between consumers
     * for calendar resource information an providers which actual deliver the room information.
     *
     * @return \OCP\Calendar\Resource\IBackend
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCalendarResourceBackendManager();
    /**
     * The calendar room backend manager will act as a broker between consumers
     * for calendar room information an providers which actual deliver the room information.
     *
     * @return \OCP\Calendar\Room\IBackend
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCalendarRoomBackendManager();
    /**
     * The contacts manager will act as a broker between consumers for contacts information and
     * providers which actual deliver the contact information.
     *
     * @return \OCP\Contacts\IManager
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getContactsManager();
    /**
     * The current request object holding all information about the request currently being processed
     * is returned from this method.
     * In case the current execution was not initiated by a web request null is returned
     *
     * @return \OCP\IRequest
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getRequest();
    /**
     * Returns the preview manager which can create preview images for a given file
     *
     * @return \OCP\IPreview
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getPreviewManager();
    /**
     * Returns the tag manager which can get and set tags for different object types
     *
     * @see \OCP\ITagManager::load()
     * @return \OCP\ITagManager
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getTagManager();
    /**
     * Returns the root folder of ownCloud's data directory
     *
     * @return \OCP\Files\IRootFolder
     * @since 6.0.0 - between 6.0.0 and 8.0.0 this returned \OCP\Files\Folder
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getRootFolder();
    /**
     * Returns a view to ownCloud's files folder
     *
     * @param string $userId user ID
     * @return \OCP\Files\Folder
     * @since 6.0.0 - parameter $userId was added in 8.0.0
     * @see getUserFolder in \OCP\Files\IRootFolder
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getUserFolder($userId = null);
    /**
     * Returns a user manager
     *
     * @return \OCP\IUserManager
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getUserManager();
    /**
     * Returns a group manager
     *
     * @return \OCP\IGroupManager
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getGroupManager();
    /**
     * Returns the user session
     *
     * @return \OCP\IUserSession
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getUserSession();
    /**
     * Returns the navigation manager
     *
     * @return \OCP\INavigationManager
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getNavigationManager();
    /**
     * Returns the config manager
     *
     * @return \OCP\IConfig
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getConfig();
    /**
     * Returns a Crypto instance
     *
     * @return \OCP\Security\ICrypto
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCrypto();
    /**
     * Returns a Hasher instance
     *
     * @return \OCP\Security\IHasher
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getHasher();
    /**
     * Returns a SecureRandom instance
     *
     * @return \OCP\Security\ISecureRandom
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getSecureRandom();
    /**
     * Returns a CredentialsManager instance
     *
     * @return \OCP\Security\ICredentialsManager
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCredentialsManager();
    /**
     * Returns the app config manager
     *
     * @return \OCP\IAppConfig
     * @since 7.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getAppConfig();
    /**
     * @return \OCP\L10N\IFactory
     * @since 8.2.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getL10NFactory();
    /**
     * get an L10N instance
     * @param string $app appid
     * @param string $lang
     * @return \OCP\IL10N
     * @since 6.0.0 - parameter $lang was added in 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getL10N($app, $lang = null);
    /**
     * @return \OC\Encryption\Manager
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getEncryptionManager();
    /**
     * @return \OC\Encryption\File
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getEncryptionFilesHelper();
    /**
     * @return \OCP\Encryption\Keys\IStorage
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getEncryptionKeyStorage();
    /**
     * Returns the URL generator
     *
     * @return \OCP\IURLGenerator
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getURLGenerator();
    /**
     * Returns an ICache instance
     *
     * @return \OCP\ICache
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCache();
    /**
     * Returns an \OCP\CacheFactory instance
     *
     * @return \OCP\ICacheFactory
     * @since 7.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMemCacheFactory();
    /**
     * Returns the current session
     *
     * @return \OCP\ISession
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getSession();
    /**
     * Returns the activity manager
     *
     * @return \OCP\Activity\IManager
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getActivityManager();
    /**
     * Returns the current session
     *
     * @return \OCP\IDBConnection
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getDatabaseConnection();
    /**
     * Returns an avatar manager, used for avatar functionality
     *
     * @return \OCP\IAvatarManager
     * @since 6.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getAvatarManager();
    /**
     * Returns an job list for controlling background jobs
     *
     * @return \OCP\BackgroundJob\IJobList
     * @since 7.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getJobList();
    /**
     * Returns a logger instance
     *
     * @return \OCP\ILogger
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getLogger();
    /**
     * returns a log factory instance
     *
     * @return ILogFactory
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getLogFactory();
    /**
     * Returns a router for generating and matching urls
     *
     * @return \OCP\Route\IRouter
     * @since 7.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getRouter();
    /**
     * Returns a search instance
     *
     * @return \OCP\ISearch
     * @since 7.0.0
     * @deprecated 20.0.0
     */
    public function getSearch();
    /**
     * Get the certificate manager
     *
     * @return \OCP\ICertificateManager
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCertificateManager();
    /**
     * Create a new event source
     *
     * @return \OCP\IEventSource
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function createEventSource();
    /**
     * Returns an instance of the HTTP client service
     *
     * @return \OCP\Http\Client\IClientService
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getHTTPClientService();
    /**
     * Get the active event logger
     *
     * @return \OCP\Diagnostics\IEventLogger
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getEventLogger();
    /**
     * Get the active query logger
     *
     * The returned logger only logs data when debug mode is enabled
     *
     * @return \OCP\Diagnostics\IQueryLogger
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getQueryLogger();
    /**
     * Get the manager for temporary files and folders
     *
     * @return \OCP\ITempManager
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getTempManager();
    /**
     * Get the app manager
     *
     * @return \OCP\App\IAppManager
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getAppManager();
    /**
     * Get the webroot
     *
     * @return string
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getWebRoot();
    /**
     * @return \OCP\Files\Config\IMountProviderCollection
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMountProviderCollection();
    /**
     * Get the IniWrapper
     *
     * @return \bantu\IniGetWrapper\IniGetWrapper
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getIniWrapper();
    /**
     * @return \OCP\Command\IBus
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCommandBus();
    /**
     * Creates a new mailer
     *
     * @return \OCP\Mail\IMailer
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMailer();
    /**
     * Get the locking provider
     *
     * @return \OCP\Lock\ILockingProvider
     * @since 8.1.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getLockingProvider();
    /**
     * @return \OCP\Files\Mount\IMountManager
     * @since 8.2.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMountManager();
    /**
     * Get the MimeTypeDetector
     *
     * @return \OCP\Files\IMimeTypeDetector
     * @since 8.2.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMimeTypeDetector();
    /**
     * Get the MimeTypeLoader
     *
     * @return \OCP\Files\IMimeTypeLoader
     * @since 8.2.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getMimeTypeLoader();
    /**
     * Get the EventDispatcher
     *
     * @return EventDispatcherInterface
     * @deprecated 20.0.0 use \OCP\EventDispatcher\IEventDispatcher
     * @since 8.2.0
     */
    public function getEventDispatcher();
    /**
     * Get the Notification Manager
     *
     * @return \OCP\Notification\IManager
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getNotificationManager();
    /**
     * @return \OCP\Comments\ICommentsManager
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCommentsManager();
    /**
     * Returns the system-tag manager
     *
     * @return \OCP\SystemTag\ISystemTagManager
     *
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getSystemTagManager();
    /**
     * Returns the system-tag object mapper
     *
     * @return \OCP\SystemTag\ISystemTagObjectMapper
     *
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getSystemTagObjectMapper();
    /**
     * Returns the share manager
     *
     * @return \OCP\Share\IManager
     * @since 9.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getShareManager();
    /**
     * @return IContentSecurityPolicyManager
     * @since 9.0.0
     * @deprecated 17.0.0 Use the AddContentSecurityPolicyEvent
     */
    public function getContentSecurityPolicyManager();
    /**
     * @return \OCP\IDateTimeZone
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getDateTimeZone();
    /**
     * @return \OCP\IDateTimeFormatter
     * @since 8.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getDateTimeFormatter();
    /**
     * @return \OCP\Federation\ICloudIdManager
     * @since 12.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCloudIdManager();
    /**
     * @return \OCP\GlobalScale\IConfig
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getGlobalScaleConfig();
    /**
     * @return ICloudFederationFactory
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCloudFederationFactory();
    /**
     * @return ICloudFederationProviderManager
     * @since 14.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getCloudFederationProviderManager();
    /**
     * @return \OCP\Remote\Api\IApiFactory
     * @since 13.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getRemoteApiFactory();
    /**
     * @return \OCP\Remote\IInstanceFactory
     * @since 13.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getRemoteInstanceFactory();
    /**
     * @return \OCP\Files\Storage\IStorageFactory
     * @since 15.0.0
     * @deprecated 20.0.0 have it injected or fetch it through \Psr\Container\ContainerInterface::get
     */
    public function getStorageFactory();
}
/**
 * This class provides different helper functions to make the life of a developer easier
 *
 * @since 4.0.0
 */
class Util
{
    /**
     * get the current installed version of Nextcloud
     * @return array
     * @since 4.0.0
     */
    public static function getVersion()
    {
    }
    /**
     * @since 17.0.0
     */
    public static function hasExtendedSupport() : bool
    {
    }
    /**
     * Set current update channel
     * @param string $channel
     * @since 8.1.0
     */
    public static function setChannel($channel)
    {
    }
    /**
     * Get current update channel
     * @return string
     * @since 8.1.0
     */
    public static function getChannel()
    {
    }
    /**
     * write a message in the log
     * @param string $app
     * @param string $message
     * @param int $level
     * @since 4.0.0
     * @deprecated 13.0.0 use log of \OCP\ILogger
     */
    public static function writeLog($app, $message, $level)
    {
    }
    /**
     * check if sharing is disabled for the current user
     *
     * @return boolean
     * @since 7.0.0
     * @deprecated 9.1.0 Use \OC::$server->getShareManager()->sharingDisabledForUser
     */
    public static function isSharingDisabledForUser()
    {
    }
    /**
     * get l10n object
     * @param string $application
     * @param string|null $language
     * @return \OCP\IL10N
     * @since 6.0.0 - parameter $language was added in 8.0.0
     */
    public static function getL10N($application, $language = null)
    {
    }
    /**
     * add a css file
     * @param string $application
     * @param string $file
     * @since 4.0.0
     */
    public static function addStyle($application, $file = null)
    {
    }
    /**
     * add a javascript file
     *
     * @param string $application
     * @param string|null $file
     * @param string $afterAppId
     * @since 4.0.0
     */
    public static function addScript(string $application, string $file = null, string $afterAppId = 'core') : void
    {
    }
    /**
     * Return the list of scripts injected to the page
     *
     * @return array
     * @since 24.0.0
     */
    public static function getScripts() : array
    {
    }
    /**
     * Add a translation JS file
     * @param string $application application id
     * @param string $languageCode language code, defaults to the current locale
     * @since 8.0.0
     */
    public static function addTranslations($application, $languageCode = null)
    {
    }
    /**
     * Add a custom element to the header
     * If $text is null then the element will be written as empty element.
     * So use "" to get a closing tag.
     * @param string $tag tag name of the element
     * @param array $attributes array of attributes for the element
     * @param string $text the text content for the element
     * @since 4.0.0
     */
    public static function addHeader($tag, $attributes, $text = null)
    {
    }
    /**
     * Creates an absolute url to the given app and file.
     * @param string $app app
     * @param string $file file
     * @param array $args array with param=>value, will be appended to the returned url
     * 	The value of $args will be urlencoded
     * @return string the url
     * @since 4.0.0 - parameter $args was added in 4.5.0
     */
    public static function linkToAbsolute($app, $file, $args = [])
    {
    }
    /**
     * Creates an absolute url for remote use.
     * @param string $service id
     * @return string the url
     * @since 4.0.0
     */
    public static function linkToRemote($service)
    {
    }
    /**
     * Creates an absolute url for public use
     * @param string $service id
     * @return string the url
     * @since 4.5.0
     * @deprecated 15.0.0 - use OCP\IURLGenerator
     */
    public static function linkToPublic($service)
    {
    }
    /**
     * Returns the server host name without an eventual port number
     * @return string the server hostname
     * @since 5.0.0
     */
    public static function getServerHostName()
    {
    }
    /**
     * Returns the default email address
     * @param string $user_part the user part of the address
     * @return string the default email address
     *
     * Assembles a default email address (using the server hostname
     * and the given user part, and returns it
     * Example: when given lostpassword-noreply as $user_part param,
     *     and is currently accessed via http(s)://example.com/,
     *     it would return 'lostpassword-noreply@example.com'
     *
     * If the configuration value 'mail_from_address' is set in
     * config.php, this value will override the $user_part that
     * is passed to this function
     * @since 5.0.0
     */
    public static function getDefaultEmailAddress(string $user_part) : string
    {
    }
    /**
     * Converts string to int of float depending if it fits an int
     * @param numeric-string|float|int $number numeric string
     * @return int|float int if it fits, float if it is too big
     * @since 26.0.0
     */
    public static function numericToNumber(string|float|int $number) : int|float
    {
    }
    /**
     * Make a human file size (2048 to 2 kB)
     * @param int|float $bytes file size in bytes
     * @return string a human readable file size
     * @since 4.0.0
     */
    public static function humanFileSize(int|float $bytes) : string
    {
    }
    /**
     * Make a computer file size (2 kB to 2048)
     * @param string $str file size in a fancy format
     * @return false|int|float a file size in bytes
     *
     * Inspired by: https://www.php.net/manual/en/function.filesize.php#92418
     * @since 4.0.0
     */
    public static function computerFileSize(string $str) : false|int|float
    {
    }
    /**
     * connects a function to a hook
     *
     * @param string $signalClass class name of emitter
     * @param string $signalName name of signal
     * @param string|object $slotClass class name of slot
     * @param string $slotName name of slot
     * @return bool
     *
     * This function makes it very easy to connect to use hooks.
     *
     * TODO: write example
     * @since 4.0.0
     * @deprecated 21.0.0 use \OCP\EventDispatcher\IEventDispatcher::addListener
     */
    public static function connectHook($signalClass, $signalName, $slotClass, $slotName)
    {
    }
    /**
     * Emits a signal. To get data from the slot use references!
     * @param string $signalclass class name of emitter
     * @param string $signalname name of signal
     * @param array $params default: array() array with additional data
     * @return bool true if slots exists or false if not
     *
     * TODO: write example
     * @since 4.0.0
     * @deprecated 21.0.0 use \OCP\EventDispatcher\IEventDispatcher::dispatchTypedEvent
     */
    public static function emitHook($signalclass, $signalname, $params = [])
    {
    }
    /**
     * Register an get/post call. This is important to prevent CSRF attacks
     * @since 4.5.0
     */
    public static function callRegister()
    {
    }
    /**
     * Used to sanitize HTML
     *
     * This function is used to sanitize HTML and should be applied on any
     * string or array of strings before displaying it on a web page.
     *
     * @param string|string[] $value
     * @return string|string[] an array of sanitized strings or a single sanitized string, depends on the input parameter.
     * @since 4.5.0
     */
    public static function sanitizeHTML($value)
    {
    }
    /**
     * Public function to encode url parameters
     *
     * This function is used to encode path to file before output.
     * Encoding is done according to RFC 3986 with one exception:
     * Character '/' is preserved as is.
     *
     * @param string $component part of URI to encode
     * @return string
     * @since 6.0.0
     */
    public static function encodePath($component)
    {
    }
    /**
     * Returns an array with all keys from input lowercased or uppercased. Numbered indices are left as is.
     *
     * @param array $input The array to work on
     * @param int $case Either MB_CASE_UPPER or MB_CASE_LOWER (default)
     * @param string $encoding The encoding parameter is the character encoding. Defaults to UTF-8
     * @return array
     * @since 4.5.0
     */
    public static function mb_array_change_key_case($input, $case = MB_CASE_LOWER, $encoding = 'UTF-8')
    {
    }
    /**
     * performs a search in a nested array
     *
     * @param array $haystack the array to be searched
     * @param string $needle the search string
     * @param mixed $index optional, only search this key name
     * @return mixed the key of the matching field, otherwise false
     * @since 4.5.0
     * @deprecated 15.0.0
     */
    public static function recursiveArraySearch($haystack, $needle, $index = null)
    {
    }
    /**
     * calculates the maximum upload size respecting system settings, free space and user quota
     *
     * @param string $dir the current folder where the user currently operates
     * @param int|float|null $free the number of bytes free on the storage holding $dir, if not set this will be received from the storage directly
     * @return int|float number of bytes representing
     * @since 5.0.0
     */
    public static function maxUploadFilesize(string $dir, int|float|null $free = null) : int|float
    {
    }
    /**
     * Calculate free space left within user quota
     * @param string $dir the current folder where the user currently operates
     * @return int|float number of bytes representing
     * @since 7.0.0
     */
    public static function freeSpace(string $dir) : int|float
    {
    }
    /**
     * Calculate PHP upload limit
     *
     * @return int|float number of bytes representing
     * @since 7.0.0
     */
    public static function uploadLimit() : int|float
    {
    }
    /**
     * Returns whether the given file name is valid
     * @param string $file file name to check
     * @return bool true if the file name is valid, false otherwise
     * @deprecated 8.1.0 use \OC\Files\View::verifyPath()
     * @since 7.0.0
     * @suppress PhanDeprecatedFunction
     */
    public static function isValidFileName($file)
    {
    }
    /**
     * Compare two strings to provide a natural sort
     * @param string $a first string to compare
     * @param string $b second string to compare
     * @return int -1 if $b comes before $a, 1 if $a comes before $b
     * or 0 if the strings are identical
     * @since 7.0.0
     */
    public static function naturalSortCompare($a, $b)
    {
    }
    /**
     * Check if a password is required for each public link
     *
     * @param bool $checkGroupMembership Check group membership exclusion
     * @return boolean
     * @since 7.0.0
     */
    public static function isPublicLinkPasswordRequired(bool $checkGroupMembership = true)
    {
    }
    /**
     * check if share API enforces a default expire date
     * @return boolean
     * @since 8.0.0
     */
    public static function isDefaultExpireDateEnforced()
    {
    }
    protected static $needUpgradeCache = null;
    /**
     * Checks whether the current version needs upgrade.
     *
     * @return bool true if upgrade is needed, false otherwise
     * @since 7.0.0
     */
    public static function needUpgrade()
    {
    }
    /**
     * Sometimes a string has to be shortened to fit within a certain maximum
     * data length in bytes. substr() you may break multibyte characters,
     * because it operates on single byte level. mb_substr() operates on
     * characters, so does not ensure that the shortened string satisfies the
     * max length in bytes.
     *
     * For example, json_encode is messing with multibyte characters a lot,
     * replacing them with something along "\u1234".
     *
     * This function shortens the string with by $accuracy (-5) from
     * $dataLength characters, until it fits within $dataLength bytes.
     *
     * @since 23.0.0
     */
    public static function shortenMultibyteString(string $subject, int $dataLength, int $accuracy = 5) : string
    {
    }
    /**
     * Check if a function is enabled in the php configuration
     *
     * @since 25.0.0
     */
    public static function isFunctionEnabled(string $functionName) : bool
    {
    }
}
/*
 * @copyright 2022 Christoph Wurst <christoph@winzerhof-wurst.at>
 *
 * @author 2022 Christoph Wurst <christoph@winzerhof-wurst.at>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace OCP\Log;

/**
 * Get a PSR logger
 *
 * Whenever possible, inject a logger into your classes instead of relying on
 * this helper function.
 *
 * @warning the returned logger implementation is not guaranteed to be the same
 *          between two function calls. During early stages of the process you
 *          might in fact get a noop implementation when Nextcloud isn't ready
 *          to log. Therefore you MUST NOT cache the result of this function but
 *          fetch a new logger for every log line you want to write.
 *
 * @param string|null $appId optional parameter to acquire the app-specific logger
 *
 * @return LoggerInterface
 * @since 24.0.0
 */
function logger(string $appId = null) : \Psr\Log\LoggerInterface
{
}