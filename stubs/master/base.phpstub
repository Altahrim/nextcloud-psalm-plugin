<?php

/**
 * Class that is a namespace for all global OC variables
 * No, we can not put this class in its own file because it is used by
 * OC_autoload!
 */
class OC
{
    /**
     * Associative array for autoloading. classname => filename
     */
    public static array $CLASSPATH = [];
    /**
     * The installation path for Nextcloud  on the server (e.g. /srv/http/nextcloud)
     */
    public static string $SERVERROOT = '';
    /**
     * the Nextcloud root path for http requests (e.g. nextcloud/)
     */
    public static string $WEBROOT = '';
    /**
     * The installation path array of the apps folder on the server (e.g. /srv/http/nextcloud) 'path' and
     * web path in 'url'
     */
    public static array $APPSROOTS = [];
    public static string $configDir;
    public static int $VERSION_MTIME = 0;
    /**
     * requested app
     */
    public static string $REQUESTEDAPP = '';
    /**
     * check if Nextcloud runs in cli mode
     */
    public static bool $CLI = \false;
    public static \OC\Autoloader $loader;
    public static \Composer\Autoload\ClassLoader $composerAutoloader;
    public static \OC\Server $server;
    /**
     * @throws \RuntimeException when the 3rdparty directory is missing or
     * the app path list is empty or contains an invalid path
     */
    public static function initPaths() : void
    {
    }
    public static function checkConfig() : void
    {
    }
    public static function checkInstalled(\OC\SystemConfig $systemConfig) : void
    {
    }
    public static function checkMaintenanceMode(\OC\SystemConfig $systemConfig) : void
    {
    }
    public static function initSession() : void
    {
    }
    /**
     * @return bool true if the session expiry should only be done by gc instead of an explicit timeout
     */
    public static function hasSessionRelaxedExpiry() : bool
    {
    }
    /**
     * Try to set some values to the required Nextcloud default
     */
    public static function setRequiredIniValues() : void
    {
    }
    public static function init() : void
    {
    }
    /**
     * register hooks for the cleanup of cache and bruteforce protection
     */
    public static function registerCleanupHooks(\OC\SystemConfig $systemConfig) : void
    {
    }
    /**
     * register hooks for sharing
     */
    public static function registerShareHooks(\OC\SystemConfig $systemConfig) : void
    {
    }
    protected static function registerAutoloaderCache(\OC\SystemConfig $systemConfig) : void
    {
    }
    /**
     * Handle the request
     */
    public static function handleRequest() : void
    {
    }
    /**
     * Check login: apache auth, auth token, basic auth
     */
    public static function handleLogin(\OCP\IRequest $request) : bool
    {
    }
    protected static function handleAuthHeaders() : void
    {
    }
    protected static function tryAppEcosystemV2Login(\OCP\IRequest $request) : bool
    {
    }
}